var $e=Object.create;var fe=Object.defineProperty;var We=Object.getOwnPropertyDescriptor;var Je=Object.getOwnPropertyNames;var He=Object.getPrototypeOf,Ue=Object.prototype.hasOwnProperty;var B=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports);var Ne=(e,t,r,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of Je(t))!Ue.call(e,n)&&n!==r&&fe(e,n,{get:()=>t[n],enumerable:!(o=We(t,n))||o.enumerable});return e};var pe=(e,t,r)=>(r=e!=null?$e(He(e)):{},Ne(t||!e||!e.__esModule?fe(r,"default",{value:e,enumerable:!0}):r,e));var te=B(ee=>{"use strict";Object.defineProperty(ee,"__esModule",{value:!0});ee.default=Object.freeze({GET:"GET",SET:"SET",DELETE:"DELETE",UPDATE:"UPDATE"})});var Fe=B(T=>{"use strict";var rt=T&&T.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(T,"__esModule",{value:!0});var Se=rt(te()),re=class{constructor(){this.listeners=Object.values(Se.default).reduce((t,r)=>(t[r]=new Set,t),{}),this.on=function(t,r){if(this.listeners[t].has(r))throw Error(`This listener on ${t} already exists.`);this.listeners[t].add(r)},this.once=function(t,r){let o=(n,i)=>{this.off(n,o),r(n,i)};this.on(t,o)},this.off=function(t,r){this.listeners[t].delete(r)},this.emit=function(t,r){for(let o of this.listeners[t])o(t,r)};for(let t of Object.values(Se.default))this[t.toLowerCase()]=r=>{this.emit(t,r)}}};T.default=re});var Ce=B(R=>{"use strict";var ot=R&&R.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(R,"__esModule",{value:!0});var nt=ot(Fe());function it(e={},{nestArrays:t=!0}={}){let r=new nt.default;function o(n,i,l){return new Proxy(n,{get(s,a){let c=[...l,a],u=s[a];return u!=null?(r.get({path:c,value:u}),!t&&Array.isArray(u)?u:typeof u=="object"?o(u,i,c):u):o(s[a]={},i,c)},set(s,a,c){return s[a]=c,r.set({path:[...l,a],value:c}),!0},deleteProperty(s,a){return delete s[a]?(r.delete({path:[...l,a]}),!0):!1},has(s,a){return typeof s[a]=="object"&&Object.keys(s[a]).length===0?!1:a in s}})}return Object.assign({store:o(e,e,[]),ghost:e},r)}R.default=it});var oe=B(A=>{"use strict";var ve=A&&A.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(A,"__esModule",{value:!0});A.make=A.Events=void 0;var st=te();Object.defineProperty(A,"Events",{enumerable:!0,get:function(){return ve(st).default}});var at=Ce();Object.defineProperty(A,"make",{enumerable:!0,get:function(){return ve(at).default}})});var P=class{constructor(){this.listeners=new Map}_prepareListenersMap(t){this.listeners.has(t)||this.listeners.set(t,new Map)}on(t,r){return this._prepareListenersMap(t),this.listeners.get(t).set(r,{once:!1}),()=>{this.listeners.get(t).delete(r)}}once(t,r){return this._prepareListenersMap(t),this.listeners.get(t)?.set(r,{once:!0}),()=>{this.listeners.get(t).delete(r)}}off(t,r){if(!t)return this.listeners=new Map;if(!r)return this.listeners?.delete(t);this.listeners.get(t)?.delete(r)}emit(t,...r){if(!this.listeners.has(t))return;let o=this.listeners.get(t);o.forEach(({once:n},i)=>{n&&o?.delete(i),i(...r)})}};var Ye=new P,F=Ye;var de={parse(e){let t=document.createElement("div");return t.innerHTML=e,t.firstElementChild}};new MutationObserver(t=>{t.forEach(r=>{F.emit("dom-mutation",r)})}).observe(document,{attributes:!0,childList:!0,subtree:!0});var X=["a","b","i"],h=new Map;function he(e,t,r,o,n){let i=h.get(t)?.[e];if(!i)return n?Reflect.construct(t[e],r,o):t[e].apply(o,r);for(let a of i.b.values()){let c=a.call(o,r);Array.isArray(c)&&(r=c)}let l=(...a)=>n?Reflect.construct(i.o,a,o):i.o.apply(o,a);for(let a of i.i.values()){let c=l;l=(...u)=>a.call(o,u,c)}let s=l(...r);for(let a of i.a.values())s=a.call(o,r,s)??s;return s}function $(e,t,r,o){let n=h.get(e),i=n?.[t];return i?.[o].has(r)?(i[o].delete(r),X.every(l=>i[l].size===0)&&(Reflect.defineProperty(e,t,{value:i.o,writable:!0,configurable:!0})||(e[t]=i.o),delete n[t]),Object.keys(n).length==0&&h.delete(e),!0):!1}function W(){for(let[e,t]of h.entries())for(let r in t)for(let o of X)for(let n of t[r]?.[o].keys()??[])$(e,r,n,o)}var G=e=>(t,r,o,n=!1)=>{if(typeof r[t]!="function")throw new Error(`${t} is not a function in ${r.constructor.name}`);h.has(r)||h.set(r,{});let i=h.get(r);if(!i[t]){let a=r[t];i[t]={o:a,b:new Map,i:new Map,a:new Map};let c=(y,w,S)=>{let Xe=he(t,r,w,y,S);return n&&s(),Xe},u=new Proxy(a,{apply:(y,w,S)=>c(w,S,!1),construct:(y,w)=>c(a,w,!0),get:(y,w,S)=>w=="toString"?a.toString.bind(a):Reflect.get(y,w,S)});Reflect.defineProperty(r,t,{value:u,configurable:!0,writable:!0})||(r[t]=u),r[t].__original__=i[t].o}let l=Symbol(),s=()=>$(r,t,l,e);return i[t][e].set(l,o),s};var _e=G("b"),me=G("i"),xe=G("a");var C={__cache__:{patched:h},before:_e,after:xe,instead:me,unPatchAll:W,injectCSS(e){let t=document.createElement("style");return t.className="acord--injected-css",t.textContent=e,document.head.appendChild(t),()=>{t?.remove()}},unPatchAllCSS(){document.querySelectorAll(".acord--injected-css").forEach(e=>{e.remove()})}};var ye=`
@keyframes acordLoadingFade {
  0% {
    opacity: 0.1;
  }
  100% {
    opacity: 0.9;
  }
}
.acord--startup-loading {
  animation: acordLoadingFade 0.5s alternate infinite linear;
  position: absolute;
  transition: all 0.5s linear;
  right: 8px;
  bottom: 8px;
  width: 16px;
  height: 16px;
  background-image: url("https://api.acord.app/logo.svg?fg=ffffff");
  background-position: center;
  background-repeat: no-repeat;
  background-size: contain;
  z-index: 999999;
}
.acord--startup-loading.hidden {
  opacity: 0 !important;
}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VSb290IjoiQzpcXFVzZXJzXFxraXJhY1xcRG9jdW1lbnRzXFxHaXRIdWJcXGFjb3JkLXN0YW5kYWxvbmVcXHJlbmRlcmVyXFxzcmNcXG90aGVyXFxsb2FkaW5nLWFuaW1hdGlvbiIsInNvdXJjZXMiOlsic3R5bGUuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDRTtFQUNFO0lBQ0U7O0VBRUY7SUFDRTs7O0FBSUo7RUFDRTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7O0FBRUE7RUFDRSIsInNvdXJjZXNDb250ZW50IjpbIi5hY29yZCB7XHJcbiAgQGtleWZyYW1lcyBhY29yZExvYWRpbmdGYWRlIHtcclxuICAgIDAlIHtcclxuICAgICAgb3BhY2l0eTogMC4xO1xyXG4gICAgfVxyXG4gICAgMTAwJSB7XHJcbiAgICAgIG9wYWNpdHk6IDAuOTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gICYtLXN0YXJ0dXAtbG9hZGluZyB7XHJcbiAgICBhbmltYXRpb246IGFjb3JkTG9hZGluZ0ZhZGUgMC41cyBhbHRlcm5hdGUgaW5maW5pdGUgbGluZWFyO1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgdHJhbnNpdGlvbjogYWxsIDAuNXMgbGluZWFyO1xyXG4gICAgcmlnaHQ6IDhweDtcclxuICAgIGJvdHRvbTogOHB4O1xyXG4gICAgd2lkdGg6IDE2cHg7XHJcbiAgICBoZWlnaHQ6IDE2cHg7XHJcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCJodHRwczovL2FwaS5hY29yZC5hcHAvbG9nby5zdmc/Zmc9ZmZmZmZmXCIpO1xyXG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyO1xyXG4gICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcclxuICAgIGJhY2tncm91bmQtc2l6ZTogY29udGFpbjtcclxuICAgIHotaW5kZXg6IDk5OTk5OTtcclxuXHJcbiAgICAmLmhpZGRlbiB7XHJcbiAgICAgIG9wYWNpdHk6IDAgIWltcG9ydGFudDtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19 */`;C.injectCSS(ye);async function Ve(){for(;!document.querySelector("#app-mount");)await new Promise(t=>setTimeout(t,100));if(document.querySelector(".acord--startup-loading"))return;let e=de.parse(`
    <div class="acord--startup-loading"></div>
  `);document.querySelector("#app-mount").appendChild(e)}function Ke(){let e=document.querySelector(".acord--startup-loading");e&&(e.classList.add("hidden"),setTimeout(()=>{e.remove()},500))}var J={show:Ve,hide:Ke};var be={common:{modals:{components:{__:!0,filter:{export:!1,in:"properties",by:[["Header","Footer"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},ModalRoot:{__:!0,filter:{export:!1,in:"strings",by:[["ENTERING"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},actions:{open:{__:!0,filter:{export:!1,in:"strings",by:[["onCloseCallback","Layer"]]},path:{before:["exports.Z","exports.ZP","exports.default","exports"],after:["open"]},map:{open:["onCloseCallback","Layer"]}}}},components:{Button:{__:!0,filter:{export:!1,in:"properties",by:[["BorderColors"]]},path:{before:["exports.Z","exports.ZP","exports.default","exports"],after:"Button"},map:{Button:[".FILLED",".onMouseLeave"]}},ConfirmationModal:{__:!0,filter:{export:!1,in:"strings",by:[[".confirmButtonColor"]]},path:{before:["exports.Z","exports.ZP","exports.default","exports"]}},Text:{__:!0,filter:"$?.Sizes?.SIZE_32 && $.Colors",path:{before:["exports.Z","exports.ZP","exports.default","exports"]}}},Markdown:{__:!0,filter:"$?.prototype?.render && $.rules"},FluxDispatcher:{__:!0,path:{after:["exports.Z","exports.ZP","exports.default","exports"]},filter:{export:!1,in:"properties",by:[["_currentDispatchActionType","dispatch"]]}},React:{__:!0,path:{after:["exports.Z","exports.ZP","exports.default","exports"]},filter:{export:!1,in:"properties",by:[["createElement","useState"]]}},Rest:{__:!0,path:{after:["exports.Z","exports.ZP","exports.default","exports"]},filter:{export:!1,in:"properties",by:[["get","post","getAPIBaseURL"]]}},Flux:{__:!0,path:{after:["exports.Z","exports.ZP","exports.default","exports"]},filter:{export:!1,in:"properties",by:[["connectStores","destroy"]]}},ActivityActions:{__:!0,path:{after:["exports.Z","exports.ZP","exports.default","exports"]},filter:{export:!1,in:"properties",by:[["sendActivityInvite","updateActivity"]]}},AckActions:{__:!0,filter:{in:"strings",by:[['type:"BULK_ACK"'],[]]},path:{export:!0,before:"exports"},map:{ack:['type:"CHANNEL_ACK"',"messageId","channelId"],bulkAck:['type:"BULK_ACK"']}},AnalyticsActions:{__:!0,filter:{export:!1,in:"properties",by:[["isThrottled","track"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},AnimationActions:{__:!0,export:!1,filter:{in:"properties",by:[["spring","decay"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},ConnectionActions:{__:!0,filter:{export:!1,in:"properties",by:[["setShowActivity","setVisibility"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},RTCConnectionActions:{__:!0,filter:{export:!1,in:"properties",by:[["getChannelId","getGuildId","getRTCConnectionId"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},EmojiActions:{__:!0,filter:{export:!1,in:"properties",by:[["translateInlineEmojiToSurrogates","translateSurrogatesToInlineEmoji"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},EmojiStateActions:{__:!0,filter:{export:!1,in:"properties",by:[["getURL","isEmojiDisabled"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},GuildNotificationsActions:{__:!0,filter:{export:!1,in:"properties",by:[["updateChannelOverrideSettings","updateGuildNotificationSettings"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},InternalReact:{__:!0,filter:{export:!1,in:"properties",by:[["jsx","jsxs","Fragment"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},LoginActions:{__:!0,filter:{export:!1,in:"properties",by:[["login","logout"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},QueryActions:{__:!0,filter:{export:!1,in:"properties",by:[["queryEmojiResults","queryFriends"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},MessageActions:{__:!0,filter:{export:!1,in:"properties",by:[["receiveMessage","sendMessage"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},PremiumActions:{__:!0,filter:{export:!1,in:"properties",by:[["isPremium","canUseEmojisEverywhere"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},VoiceActions:{__:!0,filter:{export:!1,in:"properties",by:[["selectVoiceChannel","disconnect"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},TypingActions:{__:!0,filter:{export:!1,in:"properties",by:[["startTyping","stopTyping"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},GuildActions:{__:!0,filter:{export:!1,in:"properties",by:[["setChannel","setServerMute"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},InviteActions:{__:!0,filter:{export:!1,in:"properties",by:[["acceptInvite","acceptInviteAndTransitionToInviteChannel"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},MediaEngineActions:{__:!0,filter:{export:!1,in:"properties",by:[["toggleSelfDeaf","toggleSelfMute"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},i18n:{__:!0,filter:{export:!1,in:"properties",by:[["_requestedLocale","getDefaultLocale"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},uuid:{__:!0,filter:{export:!1,in:"properties",by:[["v1","v4"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},hljs:{__:!0,filter:{export:!1,in:"properties",by:[["highlightAll","highlight"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}}}};function v(e,t,{walkable:r=null,ignore:o=[],limit:n=100}={}){let i=0;function l(s,a,{walkable:c=null,ignore:u=[]}={}){if(i+=1,!(i>n)){if(typeof a=="string"){if(s.hasOwnProperty(a))return s[a]}else if(a(s))return s;if(s){if(Array.isArray(s))for(let p of s){let y=l(p,a,{walkable:c,ignore:u});if(y)return y}else if(typeof s=="object"){for(let p of Object.keys(s))if(!(c!=null&&!c.includes(p))&&!u.includes(p))try{let y=l(s[p],a,{walkable:c,ignore:u});if(y)return y}catch{}}}}}return l(e,t,{walkable:r,ignore:o})}function Z(e="Acord",t,r){return(...o)=>console[t](`%c${e}%c`,`background-color: ${r}; color: white; border-radius: 4px; padding: 0px 6px 0px 6px; font-weight: bold`,"",...o)}var L={log:Z("Acord","log","#00fbb0"),debug:Z("Acord Debug","debug","#00fbb0"),info:Z("Acord Info","log","#82aaff"),warn:Z("Acord Warn","warn","#debf18"),error:Z("Acord Error","error","#ef5858"),build:Z};var ge={getInstance(e){return Object.entries(e).find(t=>t[0].startsWith("__reactFiber$"))?.[1]},getOwnerInstance(e){let t=this.getInstance(e);for(let r=t;r;r=r.return)if(r.stateNode?.forceUpdate)return r.stateNode},findInTree(e,t){return v(e,t,{walkable:["props","state","children","return"]})},getComponents(e){let t=this.getInstance(e),r=[],o=t;for(;o&&o.return&&typeof o.return.type!="string";)o.return.type&&r.push(o.return.type),o=o.return;return r},getStateNodes(e){let t=this.getInstance(e),r=[],o=t;for(;o&&o.return&&!(o.return.stateNode instanceof HTMLElement);)o.return.stateNode&&r.push(o.return.stateNode),o=o.return;return r},getProps(e,t=o=>o,r=1e4){let o=this.getInstance(e);if(!o?.return)return null;for(let n=o?.return,i=0;i>r||n!==null;n=n?.return,i++)if(n?.pendingProps&&t(n.pendingProps))return n.pendingProps;return null}};var b={logger:L,react:ge,findInTree:v,format(e,...t){return`${e}`.replaceAll(/{(\d+)}/g,(r,o)=>t[Number(o)])},interval(e,t){let r=setInterval(e,t);return()=>{clearInterval(r)}},timeout(e,t){let r=setTimeout(e,t);return()=>{clearTimeout(r)}},ifExists(e,t){e&&t(e)},copyText(e){if(window.DiscordNative){DiscordNative.clipboard.copy(e);return}navigator.clipboard.writeText(e).catch(()=>{let t=document.createElement("textarea");t.style.visibility="hidden",t.style.position="fixed",t.style.top="0",t.style.left="0",document.body.appendChild(t),t.focus(),t.select();try{document.execCommand("copy")}catch(r){console.error(r)}document.body.removeChild(t)})}};function x(e){return(...t)=>{try{return t[0]?.default?.remove&&t[0]?.default?.set&&t[0]?.default?.clear&&t[0]?.default?.get&&!t[0]?.default?.sort||t[0].remove&&t[0].set&&t[0].clear&&t[0].get&&!t[0].sort||t[0]?.default?.getToken||t[0]?.default?.getEmail||t[0]?.default?.showToken||t[0]?.getToken||t[0]?.getEmail||t[0]?.showToken?!1:e(...t)}catch(r){return L.warn("Module filter threw an exception.",e,r),!1}}}function H(e,t,r){let o=(n,i)=>r?n.toString().indexOf(i.toString())==-1:n.toString().indexOf(i.toString())>-1;return t.every(n=>o(e?.toString?.()||"",n)||o(e?.__original__?.toString?.()||"",n)||o(e?.type?.toString?.()||"",n)||o(e?.type?.__original__?.toString?.()||"",n)||Object.entries(["function","object"].includes(typeof e?.prototype)?typeof e?.prototype:{}).filter(i=>i[0]?.includes?.("render")).some(i=>o(i[1]?.toString?.()||"",n)))}function U(e,t,r){return t.every(o=>{let n=e[o]?.__original__||e[o];return r?n===void 0:n!==void 0&&!(typeof n=="string"&&!n)})}function N(e,t,r){return e.prototype&&t.every(o=>{let n=e.prototype[o];return r?n===void 0:n!==void 0&&!(typeof n=="string"&&!n)})}var Y="webpackChunkdiscord_app",Q=new Set;{let t=function(r){let[,o]=r;for(let n in Object.keys(o||{})){let i=o[n];o[n]=(l,s,a)=>{try{i.call(null,l,s,a),Q.forEach(c=>{try{c(s)}catch(u){b.logger.error("Push listener threw an exception.",c,u)}})}catch(c){b.logger.error("Unable to patch pushed module.",c)}},Object.assign(o[n],i,{__original__:i,toString:()=>i.toString()})}return e.call(window[Y],r)},e=window[Y].push;Object.defineProperty(window[Y],"push",{configurable:!0,get(){return t},set(r){e=r,Object.defineProperty(window[this.chunkName],"push",{value:this.handlePush,configurable:!0,writable:!0})}})}async function V(e,{signal:t=null,searchExports:r=!1}){return new Promise((o,n)=>{let i=()=>Q.delete(l),l=s=>{if(!s||s===window||s===document.documentElement)return;let a=null;if(typeof s=="object"&&r)for(let c in s){let u=s[c];if(u&&e(u)){a=u;break}}else a=["exports.Z","exports.ZP","exports.default","exports",""].map(u=>{let p=u?_.get(s,u):s;if(p&&e(p))return p}).find(u=>u);a&&(i(),o(a))};Q.add(l),t?.addEventListener("abort",()=>{i(),o(null)})})}function M(e,t,r={}){let o=typeof r.defaultExport!="boolean"?!1:r.defaultExport,n=typeof r.unloaded!="boolean"?!1:r.unloaded,i=typeof r.all!="boolean"?!1:r.all,l=[];if(!n){for(let s in e.c)if(e.c.hasOwnProperty(s)){let a=e.c[s].exports,c=null;if(a&&(typeof a=="object"||typeof a=="function")){if(c=t(a,s))if(i)l.push(o?c:e.c[s]);else return o?c:e.c[s];else for(let u of Object.keys(a))if(u.length<4&&a[u]&&(c=t(a[u],s)))if(i)l.push(o?c:e.c[s]);else return o?c:e.c[s]}if(a&&a.__esModule&&a.default&&(typeof a.default=="object"||typeof a.default=="function")){if(c=t(a.default,s))if(i)l.push(o?c:e.c[s]);else return o?c:e.c[s];else if(a.default.type&&(typeof a.default.type=="object"||typeof a.default.type=="function")&&(c=t(a.default.type,s)))if(i)l.push(o?c:e.c[s]);else return o?c:e.c[s]}}}for(let s in e.m)if(e.m.hasOwnProperty(s)){let a=e.m[s];if(a&&typeof a=="function"){if(e.c[s]&&!n&&t(a,s))if(i)l.push(o?e.c[s].exports:e.c[s]);else return o?e.c[s].exports:e.c[s];if(!e.c[s]&&n&&t(a,s)){let c={},u={};a(c,u,e);let p=u&&Object.getOwnPropertyNames(u||{}).length==0?c:u;if(i)l.push(o?p.exports:p);else return o?p.exports:p}}}if(i)return l}function et(e,t){return e.find(r=>{let o=typeof r[1]=="function"?r[1]?.__original__?.toString?.()||r[1]?.toString?.()||"":(()=>{try{return JSON.stringify(r[1])}catch{return r[1].toString()}})(),n=r[1]?.render?.__original__?.toString?.()||r[1]?.render?.toString?.()||"";return t.every(i=>o.indexOf(i)!=-1||n.indexOf(i)!=-1)})}function we(finder){let found=()=>!1;if(typeof finder?.filter=="string")found=x(eval(`(($)=>{ try { return (${finder.filter}); } catch { return false; } })`));else if(typeof finder?.filter=="function")found=x(finder.filter);else switch(finder.filter.in){case"properties":{finder.filter.by?.[1]?.length?found=x(e=>U(e,finder.filter.by?.[0]||[])&&U(e,finder.filter.by?.[1]||[],!0)):found=x(e=>U(e,finder.filter.by?.[0]||[]));break}case"prototypes":{finder.filter.by?.[1]?.length?found=x(e=>N(e,finder.filter.by?.[0]||[])&&N(e,finder.filter.by?.[1]||[],!0)):found=x(e=>N(e,finder.filter.by?.[0]||[]));break}case"strings":{finder.filter.by?.[1]?.length?found=x(e=>H(e,finder.filter.by?.[0]||[])&&H(e,finder.filter.by?.[1]||[],!0)):found=x(e=>H(e,finder.filter.by?.[0]||[]));break}}return found}function Ae(e,t){let r={},o={__original__:e,__mapped__:r,...e};return Object.entries(t).forEach(([n,i])=>{Object.defineProperty(o,n,{get(){if(r[n])return e[r[n]];let l=et(Object.entries(e||{}),t[n]||[]);if(l?.length)return r[n]=l[0],l[1]}})}),o}function Ie(e,t={}){let r=!!t?.filter?.export,o=M(e,we(t),{defaultExport:r});return!o||(t.path?.before&&(o=(Array.isArray(t.path.before)?t.path.before.map(n=>_.get(o,n)).find(n=>n):_.get(o,t.path.before))||o),t.assign&&(o=Object.assign({},o)),!o)?null:(t.map&&(o=Ae(o,t.map)),t.path?.after&&(o=(Array.isArray(t.path.after)?t.path.after.map(n=>_.get(o,n)).find(n=>n):_.get(o,t.path.after))||o),o)}async function Ee(e={}){let t=await V(we(e),{searchExports:!1});return!t||(e.path?.before&&(t=(Array.isArray(e.path.before)?e.path.before.map(r=>_.get(t,r)).find(r=>r):_.get(t,e.path.before))||t),e.assign&&(t=Object.assign({},t)),!t)?null:(e.map&&(t=Ae(t,e.map)),e.path?.after&&(t=(Array.isArray(e.path.after)?e.path.after.map(r=>_.get(t,r)).find(r=>r):_.get(t,e.path.after))||t),t)}var k={__cache__:{},get req(){if(this.__cache__.req)return this.__cache__.req;let e=`AcordWebpackModules${Date.now()}`,t=window.webpackChunkdiscord_app.push([[e],{},r=>r]);return delete t.m[e],delete t.c[e],window.webpackChunkdiscord_app.pop(),this.__cache__._req=t,t},find(e,t={}){return M(this.req,x(e),t)},lazyFind(e,t={}){return V(x(e),t)},lazyFindByFinder(e){return Ee(e)},filter(e,t={}){return M(this.req,x(e),{...t,all:!0})},findByFinder(e){return Ie(this.req,e)},findByProperties(...e){return this.findByFinder({filter:{export:!1,in:"properties",by:[e]},path:{before:["exports.Z","exports.ZP","exports.default","exports"]}})},findByPrototypes(...e){return this.findByFinder({filter:{export:!1,in:"properties",by:[e]},path:{before:["exports.Z","exports.ZP","exports.default","exports"]}})},findByStrings(...e){return this.findByFinder({filter:{export:!1,in:"properties",by:[e]},path:{before:["exports.Z","exports.ZP","exports.default","exports"]}})}};function Pe(e,t){e?.__cache__||(e.__cache__={});for(let r in t)t?.[r]?.__===!0?Object.defineProperty(e,r,{get(){return e.__cache__[r]?e.__cache__[r]:e.__cache__[r]=k.findByFinder(t[r])}}):(e[r]={},Pe(e[r],t[r]))}var I={__cache__:{}};Pe(I,be.common);{let e=["exports.Z","exports.ZP","exports.default","exports"];k.filter(t=>t?.getName?.()?.endsWith?.("Store"),{defaultExport:!1}).forEach(t=>{let r=e.map(n=>_.get(t,n)).find(n=>n);if(!r)return;let o=r?.getName?.();o&&(I[o]||Object.defineProperty(I,o,{get(){return I.__cache__[o]?I.__cache__[o]:I.__cache__[o]=r}}))})}var Ze=I;var m={common:Ze,webpack:k,require:globalThis["<PRELOAD_KEY>"].require};var je=!1,g={get enabled(){return je},set enabled(e){if(!globalThis["<PRELOAD_KEY>"].isDevToolsOpen())throw new Error("Dev mode status can only be modified when DevTools is open!");je=e}};var K="https://raw.githubusercontent.com/AcordPlugin/i18n/main",q={cache:"no-store"},d={__cache__:{localeIds:[],localizations:{}},get locale(){return m.common.i18n._requestedLocale},get(e){return Oe(),d.__cache__.localizations[d.locale]?.[e]||d.__cache__.localizations.default?.[e]||m.common.i18n.Messages[e]||e},messages:new Proxy({},{get(e,t){return d.get(t)}}),localize(e){return typeof e=="string"?e:e?.[d.locale]||e?.default||Object.values(e)[0]},format(e,...t){return b.format(d.get(e),...t)}};async function Oe(){let e=d.locale;if(!d.__cache__.localeIds.length){try{d.__cache__.localeIds=await(await fetch(`${K}/locales.json`,q)).json()}catch{}try{d.__cache__.localizations.default=await(await fetch(`${K}/default.json`,q)).json()}catch{}}if(d.__cache__.localeIds.includes(e)&&!d.__cache__.localizations?.[e])try{d.__cache__.localizations[e]=await(await fetch(`${K}/${e}.json`,q)).json()}catch{}}Oe();var E=d;var j=pe(oe(),1);function ie(e){return new Promise((t,r)=>{e.oncomplete=e.onsuccess=()=>t(e.result),e.onabort=e.onerror=()=>r(e.error)})}function ct(e,t){let r=indexedDB.open(e);r.onupgradeneeded=()=>r.result.createObjectStore(t);let o=ie(r);return(n,i)=>o.then(l=>i(l.transaction(t,n).objectStore(t)))}var ne;function ke(){return ne||(ne=ct("keyval-store","keyval")),ne}function Te(e,t=ke()){return t("readonly",r=>ie(r.get(e)))}function se(e,t,r=ke()){return r("readwrite",o=>(o.put(t,e),ie(o.transaction)))}function ut(e,t){return t=typeof t=="number"?{deep:t}:t||{},t.deep=t.deep||10,ae([],[],e,t)}function ce(e,t){t=typeof t=="number"?{deep:t}:t||{},e=ut(e,t);try{return JSON.stringify(e,void 0,t.spacer)}catch(r){return r}}var Re=/^\[Date:((\d{4}-\d{2}-\d{2})[A-Z]+(\d{2}:\d{2}:\d{2}).([0-9+-:]+)Z)\]$/,De=/^\[Regexp:\/(.+)\/\]$/,Be=/^\[Error:([\W\w]+)\]$/,Ge=/^\[Function:(.+)\]$/;function Le(e,t){try{return JSON.parse(e,r)}catch(o){return o}function r(o,n){if(Re.test(n))return n=Re.exec(n),n=new Date(n[1]),new Date(n);if(De.test(n))return n=De.exec(n)[1],new RegExp(n);if(Be.test(n)){n=Be.exec(n)[1];var i=new Error(n.split(`
`)[0]);return i.stack&&(i.stack=n),i}else if(t&&Ge.test(n)){n=Ge.exec(n)[1];try{return new Function("return "+n+";")()}catch(l){return l}}else return n}}function ae(e,t,r,o){if(["undefined","number","boolean","string"].indexOf(typeof r)>=0||r===null)return r;if(typeof r=="object"&&r.constructor===Date)return o.dates!==!1?"[Date:"+r.toISOString()+"]":r;if(typeof r=="object"&&r.constructor===RegExp)return o.regexps!==!1?"[Regexp:"+r.toString()+"]":r;if(typeof r=="object"&&r.constructor&&typeof r.constructor.name=="string"&&r.constructor.name.slice(-5)==="Error"){var n=(r.stack||"").split(`
`).slice(1),i=r.message||r.toString(),l=i+`
`+n;return o.errors!==!1?"[Error:"+l+"]":r}else if(typeof r=="object")if(e.indexOf(r)>=0){var s=t.slice(0,e.indexOf(r)).join(".");return"[Circular"+(s?":"+s:"")+"]"}else{var a,c,u,p;if(r.constructor&&typeof r.constructor.name=="string"&&r.constructor.name.slice(-5)==="Array"){if(e.length>=o.deep)return"[Array:"+r.constructor.name+"]";for(a=[],c=0,p=r.length;c<p;c++)a[c]=ae(e.concat([r]),t.concat(c),r[c],o);return a}else{if(e.length>=o.deep)return"[Object:"+(r.constructor&&r.constructor.name?r.constructor.name:"Object")+"]";for(a={},c=0,u=Object.keys(r),p=u.length;c<p;c++)a[u[c]]=ae(e.concat([r]),t.concat([u[c]]),r[u[c]],o);return a}}else return typeof r=="function"?o.functions===!0?"[Function:"+r.toString()+"]":void 0:r.toString()}var O={async createPersistNest(e){let t=await Te(`AcordStore;${e}`);typeof t=="string"&&(t=Le(t));let r=j.make(t??{}),o=()=>{try{se(`AcordStore;${e}`,ce({...r.ghost}))}catch{se(`AcordStore;${e}`,ce({}))}};return r.on(j.Events.SET,o),r.on(j.Events.UPDATE,o),r.on(j.Events.DELETE,o),r}};async function Me(e){if(!e?.i18n)return null;let t={__cache__:{localeIds:[],localizations:{}},format(o,...n){return b.format(t.get(o),...n)},get(o){return typeof e.i18n=="string"&&r(),t.__cache__.localizations[t.locale]?.[o]||t.__cache__.localizations.default?.[o]||t.get(o)},messages:new Proxy({},{get(o,n){return t.get(n)}})};async function r(){let o=E.locale;if(typeof e.i18n=="string"){let n=e.i18n.endsWith("/")?e.i18n.slice(0,-1):e.i18n;if(!t.__cache__.localeIds.length){try{t.__cache__.localeIds=await(await fetch(`${n}/locales.json`,noStore)).json()}catch{}try{t.__cache__.localizations.default=await(await fetch(`${n}/default.json`,noStore)).json()}catch{}}if(t.__cache__.localeIds.includes(o)&&!t.__cache__.localizations?.[o])try{t.__cache__.localizations[o]=await(await fetch(`${n}/${o}.json`,noStore)).json()}catch{}}else t.__cache__.localeIds=Object.keys(e.i18n),t.__cache__.localizations=e.i18n}return await r(),t}var ze=pe(oe(),1);async function ft(e){let t=await O.createPersistNest(`Extension;Persist;${e.about.slug}`),r={modules:{__cache__:{common:{},node:{},custom:{},customLazy:{}},require(o){return g.enabled?m.require(o):typeof r.modules.__cache__.node[o]<"u"?r.modules.__cache__.node[o]:e?.modules?.node?.some?.(n=>n.name===o)?r.modules.__cache__.node[o]=m.require(o):null},common:new Proxy({},{get(o,n){return g.enabled?m.common[n]:typeof r.modules.__cache__.common[n]<"u"?r.modules.__cache__.common[n]:e?.modules?.common?.some?.(i=>i.name===n)?r.modules.__cache__.common[n]=m.common[n]:null}}),custom:new Proxy({},{get(o,n){if(typeof r.modules.__cache__.custom[n]<"u")return r.modules.__cache__.custom[n];let i=e?.modules?.custom?.some?.(l=>l.name===n);if(!i)return null;if(i.lazy){let l=new Promise(async(s,a)=>{let c=await m.webpack.lazyFindByFinder(i.finder);r.modules.__cache__.customLazy[n]=c,s(c)});r.modules.__cache__.custom[n]={get(){return l},get value(){return r.modules.__cache__.customLazy[n]}}}else{let l=m.webpack.findByFinder(i.finder);try{typeof l?.value<"u"?r.modules.__cache__.custom[n]=l?Object.assign(l,{value:l,get(){return l}}):null:r.modules.__cache__.custom[n]=l}catch{r.modules.__cache__.custom[n]=l?{value:l,get(){return l}}:null}}return r.modules.__cache__.custom[n]}})},i18n:E,extension:{config:JSON.parse(JSON.stringify(e)),persist:t,i18n:await Me(e),events:new P}};return r}var f={__cache__:{initialized:!1,loaded:ze.make({})},storage:{installed:{}},buildAPI:ft,async init(){f.__cache__.initialized||(f.__cache__.initialized=!0,f.storage.installed=await O.createPersistNest("Extensions;Installed"))},async install(e,t={}){if(f.__cache__.initialized||await f.init(),e.endsWith("/")&&(e=e.slice(0,-1)),f.storage.installed.ghost[e])throw new Error(`"${e}" extension is already installed.`);let r=await fetch(`${e}/metadata.json`);if(r.status!==200)throw new Error(`"${e}" extension metadata is not responded with 200 status code.`);let o=await r.json(),n=await fetch(`${e}/readme.md`),i=n.status===200?await n.text():null,l=await fetch(`${e}/source.js`);if(l.status!==200)throw new Error(`"${e}" extension source is not responded with 200 status code.`);let s=await l.text();f.storage.installed.store[e]={metadata:{current:o,last:o},source:s,readme:i,config:{autoUpdate:!0,enabled:!0,...t}}},async uninstall(e){if(f.__cache__.initialized||await f.init(),!f.storage.installed.ghost[e])throw new Error(`"${e}" extension is not installed.`);delete f.storage.installed.store[e];try{await f.unload(e)}catch{}},async load(e){if(f.__cache__.initialized||await f.init(),!f.storage.installed.ghost[e])throw new Error(`"${e}" extension is not installed.`);let t=f.storage.installed.ghost[e];if(f.__cache__.loaded.ghost[e])throw new Error(`"${e}" extension is already loaded.`);let r=await f.buildAPI(t.metadata),o=f.evaluate(t.source,r);await o?.load?.(),f.__cache__.loaded.store[e]={evaluated:o,api:r}},async unload(e){if(f.__cache__.initialized||await f.init(),!f.storage.installed.ghost[e])throw new Error(`"${e}" extension is not installed.`);if(!f.__cache__.loaded.ghost[e])throw new Error(`"${e}" extension is not loaded.`);let{evaluated:t}=f.__cache__.loaded.ghost[e];await t?.unload?.(),delete f.__cache__.loaded.store[e]},evaluate(source,api){let $acord=api;return eval(source)}},le=f;var ue={process:globalThis["<PRELOAD_KEY>"].process,isDevToolsOpen:globalThis["<PRELOAD_KEY>"].isDevToolsOpen};b.logger.debug("PRELOAD_KEY: <PRELOAD_KEY>");function D(e){return new Error(`The ${e} API can only be accessed when Dev mode is enabled!`)}var z={exposedAPI:{dev:g,utils:b,i18n:E,events:F,get patcher(){if(!g.enabled)throw D("Patcher");return C},get storage(){if(!g.enabled)throw D("Storage");return O},get modules(){if(!g.enabled)throw D("Modules");return m},get extensions(){if(!g.enabled)throw D("Extensions");return le},get internal(){if(!g.enabled)throw D("Internal");return ue}},unexposedAPI:{dev:g,modules:m,utils:b,extensions:le,i18n:E,storage:O,events:F,patcher:C,internal:ue}};J.show();Object.defineProperty(window,"acord",{get(){return z.exposedAPI}});window.global=window;{let e=function(){z.unexposedAPI.modules.common.FluxDispatcher.unsubscribe("CONNECTION_OPEN",e),J.hide()};z.unexposedAPI.modules.common.FluxDispatcher.subscribe("CONNECTION_OPEN",e)}
//# sourceMappingURL=data:application/json;base64,
