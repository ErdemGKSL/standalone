var et=Object.create;var me=Object.defineProperty;var tt=Object.getOwnPropertyDescriptor;var rt=Object.getOwnPropertyNames;var ot=Object.getPrototypeOf,nt=Object.prototype.hasOwnProperty;var B=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports);var it=(e,t,r,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of rt(t))!nt.call(e,n)&&n!==r&&me(e,n,{get:()=>t[n],enumerable:!(o=tt(t,n))||o.enumerable});return e};var ye=(e,t,r)=>(r=e!=null?et(ot(e)):{},it(t||!e||!e.__esModule?me(r,"default",{value:e,enumerable:!0}):r,e));var ie=B(ne=>{"use strict";Object.defineProperty(ne,"__esModule",{value:!0});ne.default=Object.freeze({GET:"GET",SET:"SET",DELETE:"DELETE",UPDATE:"UPDATE"})});var Re=B(M=>{"use strict";var ht=M&&M.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(M,"__esModule",{value:!0});var Me=ht(ie()),se=class{constructor(){this.listeners=Object.values(Me.default).reduce((t,r)=>(t[r]=new Set,t),{}),this.on=function(t,r){if(this.listeners[t].has(r))throw Error(`This listener on ${t} already exists.`);this.listeners[t].add(r)},this.once=function(t,r){let o=(n,i)=>{this.off(n,o),r(n,i)};this.on(t,o)},this.off=function(t,r){this.listeners[t].delete(r)},this.emit=function(t,r){for(let o of this.listeners[t])o(t,r)};for(let t of Object.values(Me.default))this[t.toLowerCase()]=r=>{this.emit(t,r)}}};M.default=se});var Fe=B(R=>{"use strict";var _t=R&&R.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(R,"__esModule",{value:!0});var mt=_t(Re());function yt(e={},{nestArrays:t=!0}={}){let r=new mt.default;function o(n,i,l){return new Proxy(n,{get(s,a){let c=[...l,a],u=s[a];return u!=null?(r.get({path:c,value:u}),!t&&Array.isArray(u)?u:typeof u=="object"?o(u,i,c):u):o(s[a]={},i,c)},set(s,a,c){return s[a]=c,r.set({path:[...l,a],value:c}),!0},deleteProperty(s,a){return delete s[a]?(r.delete({path:[...l,a]}),!0):!1},has(s,a){return typeof s[a]=="object"&&Object.keys(s[a]).length===0?!1:a in s}})}return Object.assign({store:o(e,e,[]),ghost:e},r)}R.default=yt});var ae=B(A=>{"use strict";var De=A&&A.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(A,"__esModule",{value:!0});A.make=A.Events=void 0;var xt=ie();Object.defineProperty(A,"Events",{enumerable:!0,get:function(){return De(xt).default}});var gt=Fe();Object.defineProperty(A,"make",{enumerable:!0,get:function(){return De(gt).default}})});var xe={common:{modals:{components:{__:!0,filter:{export:!1,in:"properties",by:[["Header","Footer"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},ModalRoot:{__:!0,filter:{export:!1,in:"strings",by:[["ENTERING"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},actions:{open:{__:!0,filter:{export:!1,in:"strings",by:[["onCloseCallback","Layer"]]},path:{before:["exports.Z","exports.ZP","exports.default","exports"],after:["open"]},map:{open:["onCloseCallback","Layer"]}}}},components:{Button:{__:!0,filter:{export:!1,in:"properties",by:[["BorderColors"]]},path:{before:["exports.Z","exports.ZP","exports.default","exports"],after:"Button"},map:{Button:[".FILLED",".onMouseLeave"]}},ConfirmationModal:{__:!0,filter:{export:!1,in:"strings",by:[[".confirmButtonColor"]]},path:{before:["exports.Z","exports.ZP","exports.default","exports"]}},Text:{__:!0,filter:"$?.Sizes?.SIZE_32 && $.Colors",path:{before:["exports.Z","exports.ZP","exports.default","exports"]}}},Markdown:{__:!0,filter:"$?.prototype?.render && $.rules"},FluxDispatcher:{__:!0,path:{after:["exports.Z","exports.ZP","exports.default","exports"]},filter:{export:!1,in:"properties",by:[["_currentDispatchActionType","dispatch"]]}},React:{__:!0,path:{after:["exports.Z","exports.ZP","exports.default","exports"]},filter:{export:!1,in:"properties",by:[["createElement","useState"]]}},Rest:{__:!0,path:{after:["exports.Z","exports.ZP","exports.default","exports"]},filter:{export:!1,in:"properties",by:[["get","post","getAPIBaseURL"]]}},Flux:{__:!0,path:{after:["exports.Z","exports.ZP","exports.default","exports"]},filter:{export:!1,in:"properties",by:[["connectStores","destroy"]]}},ActivityActions:{__:!0,path:{after:["exports.Z","exports.ZP","exports.default","exports"]},filter:{export:!1,in:"properties",by:[["sendActivityInvite","updateActivity"]]}},AckActions:{__:!0,filter:{in:"strings",by:[['type:"BULK_ACK"'],[]]},path:{export:!0,before:"exports"},map:{ack:['type:"CHANNEL_ACK"',"messageId","channelId"],bulkAck:['type:"BULK_ACK"']}},AnalyticsActions:{__:!0,filter:{export:!1,in:"properties",by:[["isThrottled","track"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},AnimationActions:{__:!0,export:!1,filter:{in:"properties",by:[["spring","decay"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},ConnectionActions:{__:!0,filter:{export:!1,in:"properties",by:[["setShowActivity","setVisibility"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},RTCConnectionActions:{__:!0,filter:{export:!1,in:"properties",by:[["getChannelId","getGuildId","getRTCConnectionId"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},EmojiActions:{__:!0,filter:{export:!1,in:"properties",by:[["translateInlineEmojiToSurrogates","translateSurrogatesToInlineEmoji"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},EmojiStateActions:{__:!0,filter:{export:!1,in:"properties",by:[["getURL","isEmojiDisabled"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},GuildNotificationsActions:{__:!0,filter:{export:!1,in:"properties",by:[["updateChannelOverrideSettings","updateGuildNotificationSettings"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},InternalReact:{__:!0,filter:{export:!1,in:"properties",by:[["jsx","jsxs","Fragment"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},LoginActions:{__:!0,filter:{export:!1,in:"properties",by:[["login","logout"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},QueryActions:{__:!0,filter:{export:!1,in:"properties",by:[["queryEmojiResults","queryFriends"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},MessageActions:{__:!0,filter:{export:!1,in:"properties",by:[["receiveMessage","sendMessage"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},PremiumActions:{__:!0,filter:{export:!1,in:"properties",by:[["isPremium","canUseEmojisEverywhere"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},VoiceActions:{__:!0,filter:{export:!1,in:"properties",by:[["selectVoiceChannel","disconnect"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},TypingActions:{__:!0,filter:{export:!1,in:"properties",by:[["startTyping","stopTyping"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},GuildActions:{__:!0,filter:{export:!1,in:"properties",by:[["setChannel","setServerMute"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},InviteActions:{__:!0,filter:{export:!1,in:"properties",by:[["acceptInvite","acceptInviteAndTransitionToInviteChannel"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},MediaEngineActions:{__:!0,filter:{export:!1,in:"properties",by:[["toggleSelfDeaf","toggleSelfMute"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},i18n:{__:!0,filter:{export:!1,in:"properties",by:[["_requestedLocale","getDefaultLocale"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},uuid:{__:!0,filter:{export:!1,in:"properties",by:[["v1","v4"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},hljs:{__:!0,filter:{export:!1,in:"properties",by:[["highlightAll","highlight"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}}}};function I(e,t,{walkable:r=null,ignore:o=[],limit:n=100}={}){let i=0;function l(s,a,{walkable:c=null,ignore:u=[]}={}){if(i+=1,!(i>n)){if(typeof a=="string"){if(s.hasOwnProperty(a))return s[a]}else if(a(s))return s;if(s){if(Array.isArray(s))for(let f of s){let d=l(f,a,{walkable:c,ignore:u});if(d)return d}else if(typeof s=="object"){for(let f of Object.keys(s))if(!(c!=null&&!c.includes(f))&&!u.includes(f))try{let d=l(s[f],a,{walkable:c,ignore:u});if(d)return d}catch{}}}}}return l(e,t,{walkable:r,ignore:o})}function Z(e="Acord",t,r){return(...o)=>console[t](`%c${e}%c`,`background-color: ${r}; color: white; border-radius: 4px; padding: 0px 6px 0px 6px; font-weight: bold`,"",...o)}var N={log:Z("Acord","log","#00fbb0"),debug:Z("Acord Debug","debug","#00fbb0"),info:Z("Acord Info","log","#82aaff"),warn:Z("Acord Warn","warn","#debf18"),error:Z("Acord Error","error","#ef5858"),build:Z};var ge={getInstance(e){return Object.entries(e).find(t=>t[0].startsWith("__reactFiber$"))?.[1]},getOwnerInstance(e){let t=this.getInstance(e);for(let r=t;r;r=r.return)if(r.stateNode?.forceUpdate)return r.stateNode},findInTree(e,t){return I(e,t,{walkable:["props","state","children","return"]})},getComponents(e){let t=this.getInstance(e),r=[],o=t;for(;o&&o.return&&typeof o.return.type!="string";)o.return.type&&r.push(o.return.type),o=o.return;return r},getStateNodes(e){let t=this.getInstance(e),r=[],o=t;for(;o&&o.return&&!(o.return.stateNode instanceof HTMLElement);)o.return.stateNode&&r.push(o.return.stateNode),o=o.return;return r},getProps(e,t=o=>o,r=1e4){let o=this.getInstance(e);if(!o?.return)return null;for(let n=o?.return,i=0;i>r||n!==null;n=n?.return,i++)if(n?.pendingProps&&t(n.pendingProps))return n.pendingProps;return null}};var b={logger:N,react:ge,findInTree:I,format(e,...t){return`${e}`.replaceAll(/{(\d+)}/g,(r,o)=>t[Number(o)])},interval(e,t){let r=setInterval(e,t);return()=>{clearInterval(r)}},timeout(e,t){let r=setTimeout(e,t);return()=>{clearTimeout(r)}},ifExists(e,t){e&&t(e)},copyText(e){if(window.DiscordNative){DiscordNative.clipboard.copy(e);return}navigator.clipboard.writeText(e).catch(()=>{let t=document.createElement("textarea");t.style.visibility="hidden",t.style.position="fixed",t.style.top="0",t.style.left="0",document.body.appendChild(t),t.focus(),t.select();try{document.execCommand("copy")}catch(r){console.error(r)}document.body.removeChild(t)})}};function g(e){return(...t)=>{try{return t[0]?.default?.remove&&t[0]?.default?.set&&t[0]?.default?.clear&&t[0]?.default?.get&&!t[0]?.default?.sort||t[0].remove&&t[0].set&&t[0].clear&&t[0].get&&!t[0].sort||t[0]?.default?.getToken||t[0]?.default?.getEmail||t[0]?.default?.showToken||t[0]?.getToken||t[0]?.getEmail||t[0]?.showToken?!1:e(...t)}catch(r){return N.warn("Module filter threw an exception.",e,r),!1}}}function U(e,t,r){let o=(n,i)=>r?n.toString().indexOf(i.toString())==-1:n.toString().indexOf(i.toString())>-1;return t.every(n=>o(e?.toString?.()||"",n)||o(e?.__original__?.toString?.()||"",n)||o(e?.type?.toString?.()||"",n)||o(e?.type?.__original__?.toString?.()||"",n)||Object.entries(["function","object"].includes(typeof e?.prototype)?typeof e?.prototype:{}).filter(i=>i[0]?.includes?.("render")).some(i=>o(i[1]?.toString?.()||"",n)))}function W(e,t,r){return t.every(o=>{let n=e[o]?.__original__||e[o];return r?n===void 0:n!==void 0&&!(typeof n=="string"&&!n)})}function G(e,t,r){return e.prototype&&t.every(o=>{let n=e.prototype[o];return r?n===void 0:n!==void 0&&!(typeof n=="string"&&!n)})}var q="webpackChunkdiscord_app",Y=new Set;{let t=function(r){let[,o]=r;for(let n in Object.keys(o||{})){let i=o[n];o[n]=(l,s,a)=>{try{i.call(null,l,s,a),Y.forEach(c=>{try{c(s)}catch(u){b.logger.error("Push listener threw an exception.",c,u)}})}catch(c){b.logger.error("Unable to patch pushed module.",c)}},Object.assign(o[n],i,{__original__:i,toString:()=>i.toString()})}return e.call(window[q],r)},e=window[q].push;Object.defineProperty(window[q],"push",{configurable:!0,get(){return t},set(r){e=r,Object.defineProperty(window[this.chunkName],"push",{value:this.handlePush,configurable:!0,writable:!0})}})}async function J(e,{signal:t=null,searchExports:r=!1}){return new Promise((o,n)=>{let i=()=>Y.delete(l),l=s=>{if(!s||s===window||s===document.documentElement)return;let a=null;if(typeof s=="object"&&r)for(let c in s){let u=s[c];if(u&&e(u)){a=u;break}}else a=["exports.Z","exports.ZP","exports.default","exports",""].map(u=>{let f=u?_.get(s,u):s;if(f&&e(f))return f}).find(u=>u);a&&(i(),o(a))};Y.add(l),t?.addEventListener("abort",()=>{i(),o(null)})})}function H(e,t,r={}){let o=typeof r.defaultExport!="boolean"?!1:r.defaultExport,n=typeof r.unloaded!="boolean"?!1:r.unloaded,i=typeof r.all!="boolean"?!1:r.all,l=[];if(!n){for(let s in e.c)if(e.c.hasOwnProperty(s)){let a=e.c[s].exports,c=null;if(a&&(typeof a=="object"||typeof a=="function")){if(c=t(a,s))if(i)l.push(o?c:e.c[s]);else return o?c:e.c[s];else for(let u of Object.keys(a))if(u.length<4&&a[u]&&(c=t(a[u],s)))if(i)l.push(o?c:e.c[s]);else return o?c:e.c[s]}if(a&&a.__esModule&&a.default&&(typeof a.default=="object"||typeof a.default=="function")){if(c=t(a.default,s))if(i)l.push(o?c:e.c[s]);else return o?c:e.c[s];else if(a.default.type&&(typeof a.default.type=="object"||typeof a.default.type=="function")&&(c=t(a.default.type,s)))if(i)l.push(o?c:e.c[s]);else return o?c:e.c[s]}}}for(let s in e.m)if(e.m.hasOwnProperty(s)){let a=e.m[s];if(a&&typeof a=="function"){if(e.c[s]&&!n&&t(a,s))if(i)l.push(o?e.c[s].exports:e.c[s]);else return o?e.c[s].exports:e.c[s];if(!e.c[s]&&n&&t(a,s)){let c={},u={};a(c,u,e);let f=u&&Object.getOwnPropertyNames(u||{}).length==0?c:u;if(i)l.push(o?f.exports:f);else return o?f.exports:f}}}if(i)return l}function at(e,t){return e.find(r=>{let o=typeof r[1]=="function"?r[1]?.__original__?.toString?.()||r[1]?.toString?.()||"":(()=>{try{return JSON.stringify(r[1])}catch{return r[1].toString()}})(),n=r[1]?.render?.__original__?.toString?.()||r[1]?.render?.toString?.()||"";return t.every(i=>o.indexOf(i)!=-1||n.indexOf(i)!=-1)})}function be(finder){let found=()=>!1;if(typeof finder?.filter=="string")found=g(eval(`(($)=>{ try { return (${finder.filter}); } catch { return false; } })`));else if(typeof finder?.filter=="function")found=g(finder.filter);else switch(finder.filter.in){case"properties":{finder.filter.by?.[1]?.length?found=g(e=>W(e,finder.filter.by?.[0]||[])&&W(e,finder.filter.by?.[1]||[],!0)):found=g(e=>W(e,finder.filter.by?.[0]||[]));break}case"prototypes":{finder.filter.by?.[1]?.length?found=g(e=>G(e,finder.filter.by?.[0]||[])&&G(e,finder.filter.by?.[1]||[],!0)):found=g(e=>G(e,finder.filter.by?.[0]||[]));break}case"strings":{finder.filter.by?.[1]?.length?found=g(e=>U(e,finder.filter.by?.[0]||[])&&U(e,finder.filter.by?.[1]||[],!0)):found=g(e=>U(e,finder.filter.by?.[0]||[]));break}}return found}function we(e,t){let r={},o={__original__:e,__mapped__:r,...e};return Object.entries(t).forEach(([n,i])=>{Object.defineProperty(o,n,{get(){if(r[n])return e[r[n]];let l=at(Object.entries(e||{}),t[n]||[]);if(l?.length)return r[n]=l[0],l[1]}})}),o}function Ee(e,t={}){let r=!!t?.filter?.export,o=H(e,be(t),{defaultExport:r});return!o||(t.path?.before&&(o=(Array.isArray(t.path.before)?t.path.before.map(n=>_.get(o,n)).find(n=>n):_.get(o,t.path.before))||o),t.assign&&(o=Object.assign({},o)),!o)?null:(t.map&&(o=we(o,t.map)),t.path?.after&&(o=(Array.isArray(t.path.after)?t.path.after.map(n=>_.get(o,n)).find(n=>n):_.get(o,t.path.after))||o),o)}async function Pe(e={}){let t=await J(be(e),{searchExports:!1});return!t||(e.path?.before&&(t=(Array.isArray(e.path.before)?e.path.before.map(r=>_.get(t,r)).find(r=>r):_.get(t,e.path.before))||t),e.assign&&(t=Object.assign({},t)),!t)?null:(e.map&&(t=we(t,e.map)),e.path?.after&&(t=(Array.isArray(e.path.after)?e.path.after.map(r=>_.get(t,r)).find(r=>r):_.get(t,e.path.after))||t),t)}var E={__cache__:{},get req(){if(this.__cache__.req)return this.__cache__.req;let e=`AcordWebpackModules${Date.now()}`,t=window.webpackChunkdiscord_app.push([[e],{},r=>r]);return delete t.m[e],delete t.c[e],window.webpackChunkdiscord_app.pop(),this.__cache__._req=t,t},find(e,t={}){return H(this.req,g(e),t)},lazyFind(e,t={}){return J(g(e),t)},lazyFindByFinder(e){return Pe(e)},filter(e,t={}){return H(this.req,g(e),{...t,all:!0})},findByFinder(e){return Ee(this.req,e)},findByProperties(...e){return this.findByFinder({filter:{export:!1,in:"properties",by:[e]},path:{before:["exports.Z","exports.ZP","exports.default","exports"]}})},findByPrototypes(...e){return this.findByFinder({filter:{export:!1,in:"properties",by:[e]},path:{before:["exports.Z","exports.ZP","exports.default","exports"]}})},findByStrings(...e){return this.findByFinder({filter:{export:!1,in:"properties",by:[e]},path:{before:["exports.Z","exports.ZP","exports.default","exports"]}})}};function ve(e,t){e?.__cache__||(e.__cache__={});for(let r in t)t?.[r]?.__===!0?Object.defineProperty(e,r,{get(){return e.__cache__[r]?e.__cache__[r]:e.__cache__[r]=E.findByFinder(t[r])}}):(e[r]={},ve(e[r],t[r]))}var j={__cache__:{}};ve(j,xe.common);{let e=["exports.Z","exports.ZP","exports.default","exports"];E.filter(t=>t?.getName?.()?.endsWith?.("Store"),{defaultExport:!1}).forEach(t=>{let r=e.map(n=>_.get(t,n)).find(n=>n);if(!r)return;let o=r?.getName?.();o&&(j[o]||Object.defineProperty(j,o,{get(){return j.__cache__[o]?j.__cache__[o]:j.__cache__[o]=r}}))})}var Ae=j;var h={common:Ae,webpack:E,require:globalThis["<PRELOAD_KEY>"].require};var Se=!1;function je(){return new Promise(e=>{if(Se)return e(!0);function t(){h.common.FluxDispatcher.unsubscribe("CONNECTION_OPEN",t),Se=!0,e(!0)}h.common.FluxDispatcher.subscribe("CONNECTION_OPEN",t)})}var $=class{constructor(){this.listeners=new Map}_prepareListenersMap(t){this.listeners.has(t)||this.listeners.set(t,new Map)}on(t,r){return this._prepareListenersMap(t),this.listeners.get(t).set(r,{once:!1}),()=>{this.listeners.get(t).delete(r)}}once(t,r){return this._prepareListenersMap(t),this.listeners.get(t)?.set(r,{once:!0}),()=>{this.listeners.get(t).delete(r)}}off(t,r){if(!t)return this.listeners=new Map;if(!r)return this.listeners?.delete(t);this.listeners.get(t)?.delete(r)}emit(t,...r){if(!this.listeners.has(t))return;let o=this.listeners.get(t);o.forEach(({once:n},i)=>{n&&o?.delete(i),i(...r)})}};var ct=new $,v=ct;var Oe=E.findByProperties("scrollbarGhostHairline","spinner"),ut={bold:/\*\*([^*]+)\*\*/g,italic:/\*([^*]+)\*/g,underline:/\_([^*]+)\_/g,strike:/\~\~([^*]+)\~\~/g,url:/(\b(https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/ig,inline:/\`([^*]+)\`/g,codeblockSingle:/\`\`\`([^*]+)\`\`\`/g,codeblockMulti:/\`\`\`(\w+)\n((?:(?!\`\`\`)[\s\S])*)\`\`\`/g},C={parse(e){let t=document.createElement("div");return t.innerHTML=e,t.firstElementChild},toCSSProp(e){let t=document.createElement("div");return Object.entries(e).forEach(r=>{t.style.hasOwnProperty(r[0])?t.style[r[0]]=r[1]:t.style.setProperty(r[0],r[1])}),t.getAttribute("style")},toHTMLProps(e){return Object.entries(e).map(t=>`${t[0].replace(/ +/,"-")}="${t[0]=="style"&&typeof t[1]!="string"?this.toCSSProp(t[1]):this.escapeHTML(t[1])}"`).join(" ")},escape(e){return new Option(e).innerHTML},parents(e,t){let r=[];if(typeof t=="number")for(let o=0;o<t;o++)e.parentElement&&(e=e.parentElement,r.push(e));else for(;e.parentElement&&e.parentElement.closest(t);)e=e.parentElement.closest(t),r.push(e);return r},patch:(e,t)=>(()=>{function r(n){n.nodeType!==Node.TEXT_NODE&&n.querySelectorAll(e).forEach(async i=>{if(i.acord||(i.acord={unmount:[],patched:new Set},i.classList.add("acord--patched")),i.acord.patched.has(t))return;i.acord.patched.add(t);let l=await t(i);typeof l=="function"&&i.acord.unmount.push(l)})}function o(n){n.nodeType!==Node.TEXT_NODE&&n.querySelectorAll(e).forEach(async i=>{i.acord&&i.acord.unmount.forEach(l=>l())})}return document.querySelectorAll(e).forEach(r),v.on("dom-mutation",n=>{n.type==="childList"&&(n.addedNodes.forEach(r),n.removedNodes.forEach(o))})})(),formatContent(e){if(!e)return"";let{bold:t,italic:r,underline:o,strike:n,codeblockMulti:i,codeblockSingle:l,inline:s,url:a}=ut,c=Object.fromEntries([...e.matchAll(i)||[],...e.matchAll(l)||[]].map(([f,d,m],P)=>(e=e.replace(f,`{{CODEBLOCK_${P}}}`),[`{{CODEBLOCK_${P}}}`,m?`<pre><code class="${Oe.scrollbarGhostHairline} hljs ${d}" style="position: relative;">${modules.common.hljs.highlight(d,m).value}</code></pre>`:`<pre><code class="${Oe.scrollbarGhostHairline} hljs" style="position: relative;">${d}</code></pre>`]))),u=Object.fromEntries([...e.matchAll(s)||[]].map(([f,d],m)=>(e=e.replace(f,`{{INLINE_${m}}}`),[`{{INLINE_${m}}}`,`<code class="inline">${d}</code>`])));e=e.replace(t,"<b>$1</b>").replace(r,"<i>$1</i>").replace(o,"<U>$1</U>").replace(n,"<s>$1</s>").replace(a,'<a href="$1">$1</a>');for(let[f,d]of Object.entries(c))e=e.replace(f,d);for(let[f,d]of Object.entries(u))e=e.replace(f,d);return e},resolve(e){return e instanceof Element?e:this.parse(e)}};new MutationObserver(t=>{t.forEach(r=>{v.emit("dom-mutation",r)})}).observe(document,{attributes:!0,childList:!0,subtree:!0});var V=["a","b","i"],x=new Map;function ke(e,t,r,o,n){let i=x.get(t)?.[e];if(!i)return n?Reflect.construct(t[e],r,o):t[e].apply(o,r);for(let a of i.b.values()){let c=a.call(o,r);Array.isArray(c)&&(r=c)}let l=(...a)=>n?Reflect.construct(i.o,a,o):i.o.apply(o,a);for(let a of i.i.values()){let c=l;l=(...u)=>a.call(o,u,c)}let s=l(...r);for(let a of i.a.values())s=a.call(o,r,s)??s;return s}function X(e,t,r,o){let n=x.get(e),i=n?.[t];return i?.[o].has(r)?(i[o].delete(r),V.every(l=>i[l].size===0)&&(Reflect.defineProperty(e,t,{value:i.o,writable:!0,configurable:!0})||(e[t]=i.o),delete n[t]),Object.keys(n).length==0&&x.delete(e),!0):!1}function Q(){for(let[e,t]of x.entries())for(let r in t)for(let o of V)for(let n of t[r]?.[o].keys()??[])X(e,r,n,o)}var K=e=>(t,r,o,n=!1)=>{if(typeof r[t]!="function")throw new Error(`${t} is not a function in ${r.constructor.name}`);x.has(r)||x.set(r,{});let i=x.get(r);if(!i[t]){let a=r[t];i[t]={o:a,b:new Map,i:new Map,a:new Map};let c=(d,m,P)=>{let Qe=ke(t,r,m,d,P);return n&&s(),Qe},u=new Proxy(a,{apply:(d,m,P)=>c(m,P,!1),construct:(d,m)=>c(a,m,!0),get:(d,m,P)=>m=="toString"?a.toString.bind(a):Reflect.get(d,m,P)});Reflect.defineProperty(r,t,{value:u,configurable:!0,writable:!0})||(r[t]=u),r[t].__original__=i[t].o}let l=Symbol(),s=()=>X(r,t,l,e);return i[t][e].set(l,o),s};var Ze=K("b"),$e=K("i"),Ce=K("a");var O={__cache__:{patched:x},before:Ze,after:Ce,instead:$e,unPatchAll:Q,injectCSS(e){let t=document.createElement("style");return t.className="acord--injected-css",t.textContent=e,document.head.appendChild(t),()=>{t?.remove()}},unPatchAllCSS(){document.querySelectorAll(".acord--injected-css").forEach(e=>{e.remove()})}};var Le=`
@keyframes acordLoadingFade{0%{opacity:.1}100%{opacity:.9}}.acord--startup-loading{animation:acordLoadingFade .5s alternate infinite linear;position:absolute;transition:all .5s linear;right:8px;bottom:8px;width:16px;height:16px;background-image:url("https://api.acord.app/logo.svg?fg=ffffff");background-position:center;background-repeat:no-repeat;background-size:contain;z-index:999999}.acord--startup-loading.hidden{opacity:0 !important}`;var ee;async function ft(){if(document.querySelector(".acord--startup-loading"))return;for(;!document.querySelector("#app-mount");)await new Promise(t=>setTimeout(t,100));ee=O.injectCSS(Le);let e=C.parse(`
    <div class="acord--startup-loading"></div>
  `);document.querySelector("#app-mount").appendChild(e)}function dt(){let e=document.querySelector(".acord--startup-loading");e&&(e.classList.add("hidden"),setTimeout(()=>{e.remove(),ee?.(),ee=null},500))}var te={show:ft,hide:dt};var Te=!1,w={get enabled(){return Te},set enabled(e){if(!globalThis["<PRELOAD_KEY>"].isDevToolsOpen())throw new Error("Dev mode status can only be modified when DevTools is open!");Te=e}};var re="https://raw.githubusercontent.com/AcordPlugin/i18n/main",oe={cache:"no-store"},y={__cache__:{localeIds:[],localizations:{}},get locale(){return h.common.i18n._requestedLocale},get(e){return Ie(),y.__cache__.localizations[y.locale]?.[e]||y.__cache__.localizations.default?.[e]||h.common.i18n.Messages[e]||e},messages:new Proxy({},{get(e,t){return y.get(t)}}),localize(e){return typeof e=="string"?e:e?.[y.locale]||e?.default||Object.values(e)[0]},format(e,...t){return b.format(y.get(e),...t)}};async function Ie(){let e=y.locale;if(!y.__cache__.localeIds.length){try{y.__cache__.localeIds=await(await fetch(`${re}/locales.json`,oe)).json()}catch{}try{y.__cache__.localizations.default=await(await fetch(`${re}/default.json`,oe)).json()}catch{}}if(y.__cache__.localeIds.includes(e)&&!y.__cache__.localizations?.[e])try{y.__cache__.localizations[e]=await(await fetch(`${re}/${e}.json`,oe)).json()}catch{}}Ie();var k=y;var L=ye(ae(),1);function ce(e){return new Promise((t,r)=>{e.oncomplete=e.onsuccess=()=>t(e.result),e.onabort=e.onerror=()=>r(e.error)})}function bt(e,t){let r=indexedDB.open(e);r.onupgradeneeded=()=>r.result.createObjectStore(t);let o=ce(r);return(n,i)=>o.then(l=>i(l.transaction(t,n).objectStore(t)))}var le;function ze(){return le||(le=bt("keyval-store","keyval")),le}function Be(e,t=ze()){return t("readonly",r=>ce(r.get(e)))}function ue(e,t,r=ze()){return r("readwrite",o=>(o.put(t,e),ce(o.transaction)))}function Et(e,t){return t=typeof t=="number"?{deep:t}:t||{},t.deep=t.deep||10,pe([],[],e,t)}function fe(e,t){t=typeof t=="number"?{deep:t}:t||{},e=Et(e,t);try{return JSON.stringify(e,void 0,t.spacer)}catch(r){return r}}var Ne=/^\[Date:((\d{4}-\d{2}-\d{2})[A-Z]+(\d{2}:\d{2}:\d{2}).([0-9+-:]+)Z)\]$/,He=/^\[Regexp:\/(.+)\/\]$/,Ke=/^\[Error:([\W\w]+)\]$/,Ue=/^\[Function:(.+)\]$/;function We(e,t){try{return JSON.parse(e,r)}catch(o){return o}function r(o,n){if(Ne.test(n))return n=Ne.exec(n),n=new Date(n[1]),new Date(n);if(He.test(n))return n=He.exec(n)[1],new RegExp(n);if(Ke.test(n)){n=Ke.exec(n)[1];var i=new Error(n.split(`
`)[0]);return i.stack&&(i.stack=n),i}else if(t&&Ue.test(n)){n=Ue.exec(n)[1];try{return new Function("return "+n+";")()}catch(l){return l}}else return n}}function pe(e,t,r,o){if(["undefined","number","boolean","string"].indexOf(typeof r)>=0||r===null)return r;if(typeof r=="object"&&r.constructor===Date)return o.dates!==!1?"[Date:"+r.toISOString()+"]":r;if(typeof r=="object"&&r.constructor===RegExp)return o.regexps!==!1?"[Regexp:"+r.toString()+"]":r;if(typeof r=="object"&&r.constructor&&typeof r.constructor.name=="string"&&r.constructor.name.slice(-5)==="Error"){var n=(r.stack||"").split(`
`).slice(1),i=r.message||r.toString(),l=i+`
`+n;return o.errors!==!1?"[Error:"+l+"]":r}else if(typeof r=="object")if(e.indexOf(r)>=0){var s=t.slice(0,e.indexOf(r)).join(".");return"[Circular"+(s?":"+s:"")+"]"}else{var a,c,u,f;if(r.constructor&&typeof r.constructor.name=="string"&&r.constructor.name.slice(-5)==="Array"){if(e.length>=o.deep)return"[Array:"+r.constructor.name+"]";for(a=[],c=0,f=r.length;c<f;c++)a[c]=pe(e.concat([r]),t.concat(c),r[c],o);return a}else{if(e.length>=o.deep)return"[Object:"+(r.constructor&&r.constructor.name?r.constructor.name:"Object")+"]";for(a={},c=0,u=Object.keys(r),f=u.length;c<f;c++)a[u[c]]=pe(e.concat([r]),t.concat([u[c]]),r[u[c]],o);return a}}else return typeof r=="function"?o.functions===!0?"[Function:"+r.toString()+"]":void 0:r.toString()}var T={async createPersistNest(e){let t=await Be(`AcordStore;${e}`);typeof t=="string"&&(t=We(t));let r=L.make(t??{}),o=()=>{try{ue(`AcordStore;${e}`,fe({...r.ghost}))}catch{ue(`AcordStore;${e}`,fe({}))}};return r.on(L.Events.SET,o),r.on(L.Events.UPDATE,o),r.on(L.Events.DELETE,o),r}};async function Ge(e){if(!e?.i18n)return null;let t={__cache__:{localeIds:[],localizations:{}},format(o,...n){return b.format(t.get(o),...n)},get(o){return typeof e.i18n=="string"&&r(),t.__cache__.localizations[t.locale]?.[o]||t.__cache__.localizations.default?.[o]||t.get(o)},messages:new Proxy({},{get(o,n){return t.get(n)}})};async function r(){let o=k.locale;if(typeof e.i18n=="string"){let n=e.i18n.endsWith("/")?e.i18n.slice(0,-1):e.i18n;if(!t.__cache__.localeIds.length){try{t.__cache__.localeIds=await(await fetch(`${n}/locales.json`,noStore)).json()}catch{}try{t.__cache__.localizations.default=await(await fetch(`${n}/default.json`,noStore)).json()}catch{}}if(t.__cache__.localeIds.includes(o)&&!t.__cache__.localizations?.[o])try{t.__cache__.localizations[o]=await(await fetch(`${n}/${o}.json`,noStore)).json()}catch{}}else t.__cache__.localeIds=Object.keys(e.i18n),t.__cache__.localizations=e.i18n}return await r(),t}var qe=ye(ae(),1);async function Pt(e){let t=await T.createPersistNest(`Extension;Persist;${e.about.slug}`),r={modules:{__cache__:{common:{},node:{},custom:{},customLazy:{}},require(o){return w.enabled?h.require(o):typeof r.modules.__cache__.node[o]<"u"?r.modules.__cache__.node[o]:e?.modules?.node?.some?.(n=>n.name===o)?r.modules.__cache__.node[o]=h.require(o):null},common:new Proxy({},{get(o,n){return w.enabled?h.common[n]:typeof r.modules.__cache__.common[n]<"u"?r.modules.__cache__.common[n]:e?.modules?.common?.some?.(i=>i.name===n)?r.modules.__cache__.common[n]=h.common[n]:null}}),custom:new Proxy({},{get(o,n){if(typeof r.modules.__cache__.custom[n]<"u")return r.modules.__cache__.custom[n];let i=e?.modules?.custom?.some?.(l=>l.name===n);if(!i)return null;if(i.lazy){let l=new Promise(async(s,a)=>{let c=await h.webpack.lazyFindByFinder(i.finder);r.modules.__cache__.customLazy[n]=c,s(c)});r.modules.__cache__.custom[n]={get(){return l},get value(){return r.modules.__cache__.customLazy[n]}}}else{let l=h.webpack.findByFinder(i.finder);try{typeof l?.value<"u"?r.modules.__cache__.custom[n]=l?Object.assign(l,{value:l,get(){return l}}):null:r.modules.__cache__.custom[n]=l}catch{r.modules.__cache__.custom[n]=l?{value:l,get(){return l}}:null}}return r.modules.__cache__.custom[n]}})},i18n:k,extension:{config:JSON.parse(JSON.stringify(e)),persist:t,i18n:await Ge(e),events:new $}};return r}var p={__cache__:{initialized:!1,loaded:qe.make({})},storage:{installed:{}},buildAPI:Pt,async init(){p.__cache__.initialized||(p.__cache__.initialized=!0,p.storage.installed=await T.createPersistNest("Extensions;Installed"))},async install(e,t={}){if(p.__cache__.initialized||await p.init(),e.endsWith("/")&&(e=e.slice(0,-1)),p.storage.installed.ghost[e])throw new Error(`"${e}" extension is already installed.`);let r=await fetch(`${e}/metadata.json`);if(r.status!==200)throw new Error(`"${e}" extension metadata is not responded with 200 status code.`);let o=await r.json(),n=await fetch(`${e}/readme.md`),i=n.status===200?await n.text():null,l=await fetch(`${e}/source.js`);if(l.status!==200)throw new Error(`"${e}" extension source is not responded with 200 status code.`);let s=await l.text();p.storage.installed.store[e]={metadata:{current:o,last:o},source:s,readme:i,config:{autoUpdate:!0,enabled:!0,...t}}},async uninstall(e){if(p.__cache__.initialized||await p.init(),!p.storage.installed.ghost[e])throw new Error(`"${e}" extension is not installed.`);delete p.storage.installed.store[e];try{await p.unload(e)}catch{}},async load(e){if(p.__cache__.initialized||await p.init(),!p.storage.installed.ghost[e])throw new Error(`"${e}" extension is not installed.`);let t=p.storage.installed.ghost[e];if(p.__cache__.loaded.ghost[e])throw new Error(`"${e}" extension is already loaded.`);let r=await p.buildAPI(t.metadata),o=p.evaluate(t.source,r);await o?.load?.(),p.__cache__.loaded.store[e]={evaluated:o,api:r}},async unload(e){if(p.__cache__.initialized||await p.init(),!p.storage.installed.ghost[e])throw new Error(`"${e}" extension is not installed.`);if(!p.__cache__.loaded.ghost[e])throw new Error(`"${e}" extension is not loaded.`);let{evaluated:t}=p.__cache__.loaded.ghost[e];await t?.unload?.(),delete p.__cache__.loaded.store[e]},evaluate(source,api){let $acord=api;return eval(source)},async loadAll(){return p.__cache__.initialized||await p.init(),Promise.all(Object.keys(p.storage.installed.ghost).map(e=>p.load(e)))}},de=p;var he={process:globalThis["<PRELOAD_KEY>"].process,isDevToolsOpen:globalThis["<PRELOAD_KEY>"].isDevToolsOpen};var S=E.findByProperties("tooltipContentAllowOverflow","tooltip"),F={top:S.tooltipTop,bottom:S.tooltipBottom,left:S.tooltipLeft,right:S.tooltipRight},D=class{constructor(t,r,o="auto"){this.layerElement=C.parse(`
      <div class="acord--tooltip-layer">
        <div class="${S.tooltip} ${S.tooltipPrimary} acord--tooltip">
          <div class="${S.tooltipPointer} acord--tooltip-pointer"></div>
          <div class="${S.tooltipContent} acord--tooltip-content"></div>
        </div>
      </div>
    `),this.tooltipElement=this.layerElement.querySelector(".acord--tooltip"),this.contentElement=this.layerElement.querySelector(".acord--tooltip-content"),this.content=r,this.target=t,this.position=o,this.visible=!1,this.disabled=!1,this.paused=!1;let n=()=>{this.disabled||this.paused||this.show()},i=()=>{this.paused||this.hide()};this.target.addEventListener("mouseenter",n),this.target.addEventListener("mouseleave",i);let l=v.on("dom-mutation",s=>{if(s.type==="attributes"&&s.target.isSameNode(this.target))switch(s.attributeName){case"acord--tooltip-disabled":{this.disabled=this.target.getAttribute("acord--tooltip-disabled")==="true";break}case"acord--tooltip-content":{this.content=this.target.getAttribute("acord--tooltip-content");break}case"acord--tooltip-position":{this.position=this.target.getAttribute("acord--tooltip-position");break}}});this.destroy=()=>{this.target.removeEventListener("mouseenter",n),this.target.removeEventListener("mouseleave",i),this.hide(),l()}}get content(){return this.contentElement.firstElementChild}set content(t){typeof t=="string"?this.contentElement.innerHTML=t:(this.contentElement.innerHTML="",this.contentElement.appendChild(t))}static getContainer(){let t=document.querySelector('[class*="notDevTools-"]'),r=t.querySelector(".acord--tooltip-container");return r||(r=C.parse('<div class="acord--layer-container acord--tooltip-container"></div>'),t.appendChild(r)),r.style.setProperty("--top-offset",`${t.getBoundingClientRect().top.toFixed(1)}px`),r}show(){if(this.visible)return;this.visible=!0;let t=D.getContainer();this.position==="auto"?this.calculatePosition(this.canShowAtTop?"top":this.canShowAtBottom?"bottom":this.canShowAtLeft?"left":this.canShowAtRight?"right":"top"):this.calculatePosition(this.position),t.appendChild(this.layerElement),this.layerElement.classList.add("visible")}calculatePosition(t){let r=this.target.getBoundingClientRect();switch(this.layerElement.classList.remove(...Object.values(F)),this.tooltipElement.classList.remove("vertical","horizontal"),t){case"top":{this.layerElement.style.top=`${r.top-this.target.offsetHeight-10}px`,this.layerElement.style.left=`${r.left}px`,this.layerElement.classList.add(F.top),this.tooltipElement.classList.add("vertical"),this.centerPosition("horizontal");break}case"bottom":{this.layerElement.style.top=`${r.top+this.target.offsetHeight+10}px`,this.layerElement.style.left=`${r.left}px`,this.layerElement.classList.add(F.bottom),this.tooltipElement.classList.add("vertical"),this.centerPosition("horizontal");break}case"left":{this.layerElement.style.top=`${r.top}px`,this.layerElement.style.left=`${r.left-this.target.offsetWidth-10}px`,this.layerElement.classList.add(F.left),this.tooltipElement.classList.add("horizontal"),this.centerPosition("vertical");break}case"right":{this.layerElement.style.top=`${r.top}px`,this.layerElement.style.left=`${r.left+this.target.offsetWidth+10}px`,this.layerElement.classList.add(F.right),this.tooltipElement.classList.add("horizontal"),this.centerPosition("vertical");break}}}centerPosition(t){switch(t){case"horizontal":{let r=this.target.getBoundingClientRect().left+this.target.offsetWidth/2;this.layerElement.style.setProperty("left",`${r-this.layerElement.offsetWidth/2}px`);break}case"vertical":{let r=this.target.getBoundingClientRect().top+this.target.offsetHeight/2;this.layerElement.style.setProperty("top",`${r-this.layerElement.offsetHeight/2}px`)}}}hide(){this.visible&&(this.visible=!1,this.layerElement.classList.remove("visible"),setTimeout(()=>{this.layerElement.remove()},50))}get canShowAtTop(){return this.target.getBoundingClientRect().top-this.layerElement.offsetHeight>=0}get canShowAtBottom(){return this.target.getBoundingClientRect().top+this.target.offsetHeight+this.layerElement.offsetHeight<=window.innerHeight}get canShowAtLeft(){return this.target.getBoundingClientRect().left-this.layerElement.offsetWidth>=0}get canShowAtRight(){return this.target.getBoundingClientRect().left+this.target.offsetWidth+this.layerElement.offsetWidth<=window.innerWidth}};function Ye(e,t,r="auto"){return new D(e,t,r)}C.patch("[acord--tooltip-content]",e=>{let t=Ye(e,e.getAttribute("acord--tooltip-content"),e.getAttribute("acord--tooltip-position"));t.disabled=e.getAttribute("acord--tooltip-disabled")==="true"});var Je={create:Ye};var Ve=`
.acord--layer-container{--top-offset: 0px;width:100vw;height:calc(100vh - var(--top-offset));z-index:9999999;pointer-events:none;position:absolute;top:var(--top-offset);left:0px}.acord--layer-container *{z-index:99999999999999}.acord--tooltip-layer{opacity:0;transition:50ms linear opacity;position:absolute;pointer-events:none}.acord--tooltip-layer.visible{opacity:1;pointer-events:all}.acord--tooltip.vertical{transform:translateX(-50%)}.acord--tooltip.horizontal{transform:translateY(-50%)}`;O.injectCSS(Ve);var _e={tooltips:Je};b.logger.debug("PRELOAD_KEY: <PRELOAD_KEY>");function z(e){return new Error(`The ${e} API can only be accessed when Dev mode is enabled!`)}var Xe={exposedAPI:{dev:w,utils:b,i18n:k,events:v,ui:_e,get patcher(){if(!w.enabled)throw z("Patcher");return O},get storage(){if(!w.enabled)throw z("Storage");return T},get modules(){if(!w.enabled)throw z("Modules");return h},get extensions(){if(!w.enabled)throw z("Extensions");return de},get internal(){if(!w.enabled)throw z("Internal");return he}},unexposedAPI:{dev:w,modules:h,utils:b,extensions:de,i18n:k,storage:T,events:v,patcher:O,internal:he,ui:_e}};Object.defineProperty(window,"acord",{get(){return Xe.exposedAPI}});window.global=window;(async()=>(te.show(),await je(),te.hide()))();
//# sourceMappingURL=data:application/json;base64,
