var ut=Object.create;var ee=Object.defineProperty;var pt=Object.getOwnPropertyDescriptor;var ht=Object.getOwnPropertyNames;var mt=Object.getPrototypeOf,yt=Object.prototype.hasOwnProperty;var _t=(e,t,r)=>t in e?ee(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r;var G=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports);var gt=(e,t,r,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of ht(t))!yt.call(e,n)&&n!==r&&ee(e,n,{get:()=>t[n],enumerable:!(o=pt(t,n))||o.enumerable});return e};var je=(e,t,r)=>(r=e!=null?ut(mt(e)):{},gt(t||!e||!e.__esModule?ee(r,"default",{value:e,enumerable:!0}):r,e));var X=(e,t,r)=>(_t(e,typeof t!="symbol"?t+"":t,r),r);var me=G(he=>{"use strict";Object.defineProperty(he,"__esModule",{value:!0});he.default=Object.freeze({GET:"GET",SET:"SET",DELETE:"DELETE",UPDATE:"UPDATE"})});var Ue=G(D=>{"use strict";var jt=D&&D.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(D,"__esModule",{value:!0});var Ke=jt(me()),ye=class{constructor(){this.listeners=Object.values(Ke.default).reduce((t,r)=>(t[r]=new Set,t),{}),this.on=function(t,r){if(this.listeners[t].has(r))throw Error(`This listener on ${t} already exists.`);this.listeners[t].add(r)},this.once=function(t,r){let o=(n,i)=>{this.off(n,o),r(n,i)};this.on(t,o)},this.off=function(t,r){this.listeners[t].delete(r)},this.emit=function(t,r){for(let o of this.listeners[t])o(t,r)};for(let t of Object.values(Ke.default))this[t.toLowerCase()]=r=>{this.emit(t,r)}}};D.default=ye});var qe=G(B=>{"use strict";var Ot=B&&B.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(B,"__esModule",{value:!0});var Ct=Ot(Ue());function kt(e={},{nestArrays:t=!0}={}){let r=new Ct.default;function o(n,i,c){return new Proxy(n,{get(s,a){let l=[...c,a],f=s[a];return f!=null?(r.get({path:l,value:f}),!t&&Array.isArray(f)?f:typeof f=="object"?o(f,i,l):f):o(s[a]={},i,l)},set(s,a,l){return s[a]=l,r.set({path:[...c,a],value:l}),!0},deleteProperty(s,a){return delete s[a]?(r.delete({path:[...c,a]}),!0):!1},has(s,a){return typeof s[a]=="object"&&Object.keys(s[a]).length===0?!1:a in s}})}return Object.assign({store:o(e,e,[]),ghost:e},r)}B.default=kt});var _e=G(C=>{"use strict";var We=C&&C.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(C,"__esModule",{value:!0});C.make=C.Events=void 0;var Tt=me();Object.defineProperty(C,"Events",{enumerable:!0,get:function(){return We(Tt).default}});var $t=qe();Object.defineProperty(C,"make",{enumerable:!0,get:function(){return We($t).default}})});var Oe={common:{modals:{components:{__:!0,filter:{export:!1,in:"properties",by:[["Header","Footer"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},ModalRoot:{__:!0,filter:{export:!1,in:"strings",by:[["ENTERING"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},actions:{open:{__:!0,filter:{export:!1,in:"strings",by:[["onCloseCallback","Layer"]]},path:{before:["exports.Z","exports.ZP","exports.default","exports"],after:["open"]},map:{open:["onCloseCallback","Layer"]}}}},components:{Button:{__:!0,filter:{export:!1,in:"properties",by:[["BorderColors"]]},path:{before:["exports.Z","exports.ZP","exports.default","exports"],after:"Button"},map:{Button:[".FILLED",".onMouseLeave"]}},ConfirmationModal:{__:!0,filter:{export:!1,in:"strings",by:[[".confirmButtonColor"]]},path:{before:["exports.Z","exports.ZP","exports.default","exports"]}},Text:{__:!0,filter:"$?.Sizes?.SIZE_32 && $.Colors",path:{before:["exports.Z","exports.ZP","exports.default","exports"]}}},Markdown:{__:!0,filter:"$?.prototype?.render && $.rules"},FluxDispatcher:{__:!0,path:{after:["exports.Z","exports.ZP","exports.default","exports"]},filter:{export:!1,in:"properties",by:[["_currentDispatchActionType","dispatch"]]}},React:{__:!0,path:{after:["exports.Z","exports.ZP","exports.default","exports"]},filter:{export:!1,in:"properties",by:[["createElement","useState"]]}},Rest:{__:!0,path:{after:["exports.Z","exports.ZP","exports.default","exports"]},filter:{export:!1,in:"properties",by:[["get","post","getAPIBaseURL"]]}},Flux:{__:!0,path:{after:["exports.Z","exports.ZP","exports.default","exports"]},filter:{export:!1,in:"properties",by:[["connectStores","destroy"]]}},ActivityActions:{__:!0,path:{after:["exports.Z","exports.ZP","exports.default","exports"]},filter:{export:!1,in:"properties",by:[["sendActivityInvite","updateActivity"]]}},AckActions:{__:!0,filter:{in:"strings",by:[['type:"BULK_ACK"'],[]]},path:{export:!0,before:"exports"},map:{ack:['type:"CHANNEL_ACK"',"messageId","channelId"],bulkAck:['type:"BULK_ACK"']}},AnalyticsActions:{__:!0,filter:{export:!1,in:"properties",by:[["isThrottled","track"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},AnimationActions:{__:!0,export:!1,filter:{in:"properties",by:[["spring","decay"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},ConnectionActions:{__:!0,filter:{export:!1,in:"properties",by:[["setShowActivity","setVisibility"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},RTCConnectionActions:{__:!0,filter:{export:!1,in:"properties",by:[["getChannelId","getGuildId","getRTCConnectionId"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},EmojiActions:{__:!0,filter:{export:!1,in:"properties",by:[["translateInlineEmojiToSurrogates","translateSurrogatesToInlineEmoji"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},EmojiStateActions:{__:!0,filter:{export:!1,in:"properties",by:[["getURL","isEmojiDisabled"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},GuildNotificationsActions:{__:!0,filter:{export:!1,in:"properties",by:[["updateChannelOverrideSettings","updateGuildNotificationSettings"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},InternalReact:{__:!0,filter:{export:!1,in:"properties",by:[["jsx","jsxs","Fragment"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},LoginActions:{__:!0,filter:{export:!1,in:"properties",by:[["login","logout"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},QueryActions:{__:!0,filter:{export:!1,in:"properties",by:[["queryEmojiResults","queryFriends"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},MessageActions:{__:!0,filter:{export:!1,in:"properties",by:[["receiveMessage","sendMessage"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},PremiumActions:{__:!0,filter:{export:!1,in:"properties",by:[["isPremium","canUseEmojisEverywhere"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},VoiceActions:{__:!0,filter:{export:!1,in:"properties",by:[["selectVoiceChannel","disconnect"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},TypingActions:{__:!0,filter:{export:!1,in:"properties",by:[["startTyping","stopTyping"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},GuildActions:{__:!0,filter:{export:!1,in:"properties",by:[["setChannel","setServerMute"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},InviteActions:{__:!0,filter:{export:!1,in:"properties",by:[["acceptInvite","acceptInviteAndTransitionToInviteChannel"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},MediaEngineActions:{__:!0,filter:{export:!1,in:"properties",by:[["toggleSelfDeaf","toggleSelfMute"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},i18n:{__:!0,filter:{export:!1,in:"properties",by:[["_requestedLocale","getDefaultLocale"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},uuid:{__:!0,filter:{export:!1,in:"properties",by:[["v1","v4"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},hljs:{__:!0,filter:{export:!1,in:"properties",by:[["highlightAll","highlight"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}}}};function F(e,t,{walkable:r=null,ignore:o=[],limit:n=100}={}){let i=0;function c(s,a,{walkable:l=null,ignore:f=[]}={}){if(i+=1,!(i>n)){if(typeof a=="string"){if(s.hasOwnProperty(a))return s[a]}else if(a(s))return s;if(s){if(Array.isArray(s))for(let d of s){let p=c(d,a,{walkable:l,ignore:f});if(p)return p}else if(typeof s=="object"){for(let d of Object.keys(s))if(!(l!=null&&!l.includes(d))&&!f.includes(d))try{let p=c(s[d],a,{walkable:l,ignore:f});if(p)return p}catch{}}}}}return c(e,t,{walkable:r,ignore:o})}function L(e="Acord",t,r){return(...o)=>console[t](`%c${e}%c`,`background-color: ${r}; color: white; border-radius: 4px; padding: 0px 6px 0px 6px; font-weight: bold`,"",...o)}var j={log:L("Acord","log","#00fbb0"),debug:L("Acord Debug","debug","#00fbb0"),info:L("Acord Info","log","#82aaff"),warn:L("Acord Warn","warn","#debf18"),error:L("Acord Error","error","#ef5858"),build:L};var Ce={getInstance(e){return Object.entries(e).find(t=>t[0].startsWith("__reactFiber$"))?.[1]},getOwnerInstance(e){let t=this.getInstance(e);for(let r=t;r;r=r.return)if(r.stateNode?.forceUpdate)return r.stateNode},findInTree(e,t){return F(e,t,{walkable:["props","state","children","return"]})},getComponents(e){let t=this.getInstance(e),r=[],o=t;for(;o&&o.return&&typeof o.return.type!="string";)o.return.type&&r.push(o.return.type),o=o.return;return r},getStateNodes(e){let t=this.getInstance(e),r=[],o=t;for(;o&&o.return&&!(o.return.stateNode instanceof HTMLElement);)o.return.stateNode&&r.push(o.return.stateNode),o=o.return;return r},getProps(e,t=o=>o,r=1e4){let o=this.getInstance(e);if(!o?.return)return null;for(let n=o?.return,i=0;i>r||n!==null;n=n?.return,i++)if(n?.pendingProps&&t(n.pendingProps))return n.pendingProps;return null}};var x={logger:j,react:Ce,findInTree:F,format(e,...t){return`${e}`.replaceAll(/{(\d+)}/g,(r,o)=>t[Number(o)])},interval(e,t){let r=setInterval(e,t);return()=>{clearInterval(r)}},timeout(e,t){let r=setTimeout(e,t);return()=>{clearTimeout(r)}},ifExists(e,t){e&&t(e)},copyText(e){if(window.DiscordNative){DiscordNative.clipboard.copy(e);return}navigator.clipboard.writeText(e).catch(()=>{let t=document.createElement("textarea");t.style.visibility="hidden",t.style.position="fixed",t.style.top="0",t.style.left="0",document.body.appendChild(t),t.focus(),t.select();try{document.execCommand("copy")}catch(r){console.error(r)}document.body.removeChild(t)})}};function w(e){return(...t)=>{try{return t[0]?.document&&t[0]?.window||t[0]?.default?.remove&&t[0]?.default?.set&&t[0]?.default?.clear&&t[0]?.default?.get&&!t[0]?.default?.sort||t[0].remove&&t[0].set&&t[0].clear&&t[0].get&&!t[0].sort||t[0]?.default?.getToken||t[0]?.default?.getEmail||t[0]?.default?.showToken||t[0]?.getToken||t[0]?.getEmail||t[0]?.showToken?!1:e(...t)}catch(r){return j.warn("Module filter threw an exception.",e,r),!1}}}function te(e,t,r){let o=(n,i)=>r?n.toString().indexOf(i.toString())==-1:n.toString().indexOf(i.toString())>-1;return t.every(n=>o(e?.toString?.()||"",n)||o(e?.__original__?.toString?.()||"",n)||o(e?.type?.toString?.()||"",n)||o(e?.type?.__original__?.toString?.()||"",n)||Object.entries(["function","object"].includes(typeof e?.prototype)?typeof e?.prototype:{}).filter(i=>i[0]?.includes?.("render")).some(i=>o(i[1]?.toString?.()||"",n)))}function re(e,t,r){return t.every(o=>{let n=e[o]?.__original__||e[o];return r?n===void 0:n!==void 0&&!(typeof n=="string"&&!n)})}function oe(e,t,r){return e.prototype&&t.every(o=>{let n=e.prototype[o];return r?n===void 0:n!==void 0&&!(typeof n=="string"&&!n)})}var ne="webpackChunkdiscord_app",ie=new Set;{let t=function(r){let[,o]=r;for(let n in Object.keys(o||{})){let i=o[n];o[n]=(c,s,a)=>{try{i.call(null,c,s,a),ie.forEach(l=>{try{l(s)}catch(f){x.logger.error("Push listener threw an exception.",l,f)}})}catch(l){x.logger.error("Unable to patch pushed module.",l)}},Object.assign(o[n],i,{__original__:i,toString:()=>i.toString()})}return e.call(window[ne],r)},e=window[ne].push;Object.defineProperty(window[ne],"push",{configurable:!0,get(){return t},set(r){e=r,Object.defineProperty(window[this.chunkName],"push",{value:this.handlePush,configurable:!0,writable:!0})}})}async function ae(e,{signal:t=null,searchExports:r=!1}){return new Promise((o,n)=>{let i=()=>ie.delete(c),c=s=>{if(!s||s===window||s===document.documentElement)return;let a=null;if(typeof s=="object"&&r)for(let l in s){let f=s[l];if(f&&e(f)){a=f;break}}else a=["exports.Z","exports.ZP","exports.default","exports",""].map(f=>{let d=f?_.get(s,f):s;if(d&&e(d))return d}).find(f=>f);a&&(i(),o(a))};ie.add(c),t?.addEventListener("abort",()=>{i(),o(null)})})}function Y(e,t,r={}){let o=typeof r.defaultExport!="boolean"?!1:r.defaultExport,n=typeof r.unloaded!="boolean"?!1:r.unloaded,i=typeof r.all!="boolean"?!1:r.all,c=[];if(!n){for(let s in e.c)if(e.c.hasOwnProperty(s)){let a=e.c[s].exports,l=null;if(a&&(typeof a=="object"||typeof a=="function")){if(l=t(a,s))if(i)c.push(o?l:e.c[s]);else return o?l:e.c[s];else for(let f of Object.keys(a))if(f.length<4&&a[f]&&(l=t(a[f],s)))if(i)c.push(o?l:e.c[s]);else return o?l:e.c[s]}if(a&&a.__esModule&&a.default&&(typeof a.default=="object"||typeof a.default=="function")){if(l=t(a.default,s))if(i)c.push(o?l:e.c[s]);else return o?l:e.c[s];else if(a.default.type&&(typeof a.default.type=="object"||typeof a.default.type=="function")&&(l=t(a.default.type,s)))if(i)c.push(o?l:e.c[s]);else return o?l:e.c[s]}}}for(let s in e.m)if(e.m.hasOwnProperty(s)){let a=e.m[s];if(a&&typeof a=="function"){if(e.c[s]&&!n&&t(a,s))if(i)c.push(o?e.c[s].exports:e.c[s]);else return o?e.c[s].exports:e.c[s];if(!e.c[s]&&n&&t(a,s)){let l={},f={};a(l,f,e);let d=f&&Object.getOwnPropertyNames(f||{}).length==0?l:f;if(i)c.push(o?d.exports:d);else return o?d.exports:d}}}if(i)return c}function bt(e,t){return e.find(r=>{let o=typeof r[1]=="function"?r[1]?.__original__?.toString?.()||r[1]?.toString?.()||"":(()=>{try{return JSON.stringify(r[1])}catch{return r[1].toString()}})(),n=r[1]?.render?.__original__?.toString?.()||r[1]?.render?.toString?.()||"";return t.every(i=>o.indexOf(i)!=-1||n.indexOf(i)!=-1)})}function ke(finder){let found=()=>!1;if(typeof finder?.filter=="string")found=w(eval(`(($)=>{ try { return (${finder.filter}); } catch { return false; } })`));else if(typeof finder?.filter=="function")found=w(finder.filter);else switch(finder.filter.in){case"properties":{finder.filter.by?.[1]?.length?found=w(e=>re(e,finder.filter.by?.[0]||[])&&re(e,finder.filter.by?.[1]||[],!0)):found=w(e=>re(e,finder.filter.by?.[0]||[]));break}case"prototypes":{finder.filter.by?.[1]?.length?found=w(e=>oe(e,finder.filter.by?.[0]||[])&&oe(e,finder.filter.by?.[1]||[],!0)):found=w(e=>oe(e,finder.filter.by?.[0]||[]));break}case"strings":{finder.filter.by?.[1]?.length?found=w(e=>te(e,finder.filter.by?.[0]||[])&&te(e,finder.filter.by?.[1]||[],!0)):found=w(e=>te(e,finder.filter.by?.[0]||[]));break}}return found}function J(e,t){let r={},o={__original__:e,__mapped__:r,...e};return Object.entries(t).forEach(([n,i])=>{Object.defineProperty(o,n,{get(){if(r[n])return e[r[n]];let c=bt(Object.entries(e||{}),t[n]||[]);if(c?.length)return r[n]=c[0],c[1]}})}),o}function Te(e,t={}){let r=!!t?.filter?.export,o=Y(e,ke(t),{defaultExport:r,all:!0}).find(n=>n!==globalThis.window||n?.exports!==globalThis.window);return!o||(t.path?.before&&(o=(Array.isArray(t.path.before)?t.path.before.map(n=>_.get(o,n)).find(n=>n):_.get(o,t.path.before))||o),t.assign&&(o=Object.assign({},o)),!o)?null:(t.map&&(o=J(o,t.map)),t.path?.after&&(o=(Array.isArray(t.path.after)?t.path.after.map(n=>_.get(o,n)).find(n=>n):_.get(o,t.path.after))||o),o)}async function $e(e={}){let t=await ae(ke(e),{searchExports:!1});return!t||(e.path?.before&&(t=(Array.isArray(e.path.before)?e.path.before.map(r=>_.get(t,r)).find(r=>r):_.get(t,e.path.before))||t),e.assign&&(t=Object.assign({},t)),!t)?null:(e.map&&(t=J(t,e.map)),e.path?.after&&(t=(Array.isArray(e.path.after)?e.path.after.map(r=>_.get(t,r)).find(r=>r):_.get(t,e.path.after))||t),t)}var m={__cache__:{},get require(){if(this.__cache__.require)return this.__cache__.require;let e=`AcordWebpackModules${Date.now()}`,t=window.webpackChunkdiscord_app.push([[e],{},r=>r]);return delete t.m[e],delete t.c[e],window.webpackChunkdiscord_app.pop(),this.__cache__.require=t,t},find(e,t={}){return Y(this.require,w(e),t)},lazyFind(e,t={}){return ae(w(e),t)},lazyFindByFinder(e){return $e(e)},filter(e,t={}){return Y(this.require,w(e),{...t,all:!0})},findByFinder(e){return Te(this.require,e)},findByProperties(...e){return this.findByFinder({filter:{export:!1,in:"properties",by:[e]},path:{before:["exports.Z","exports.ZP","exports.default","exports"]}})},findByPrototypes(...e){return this.findByFinder({filter:{export:!1,in:"properties",by:[e]},path:{before:["exports.Z","exports.ZP","exports.default","exports"]}})},findByStrings(...e){return this.findByFinder({filter:{export:!1,in:"properties",by:[e]},path:{before:["exports.Z","exports.ZP","exports.default","exports"]}})}};function Le(e,t){e?.__cache__||(e.__cache__={});for(let r in t)t?.[r]?.__===!0?Object.defineProperty(e,r,{get(){return e.__cache__[r]?e.__cache__[r]:e.__cache__[r]=m.findByFinder(t[r])}}):(e[r]={},Le(e[r],t[r]))}var T={__cache__:{}};Le(T,Oe.common);{let e=["exports.Z","exports.ZP","exports.default","exports"];m.filter(t=>t?.getName?.()?.endsWith?.("Store"),{defaultExport:!1}).forEach(t=>{let r=e.map(n=>_.get(t,n)).find(n=>n);if(!r)return;let o=r?.getName?.();o&&(T[o]||Object.defineProperty(T,o,{get(){return T.__cache__[o]?T.__cache__[o]:T.__cache__[o]=r}}))})}var V=T;var h={common:V,webpack:m,require:globalThis["<PRELOAD_KEY>"].require};var Ie=!1;function Ze(){return new Promise(e=>{if(Ie)return e(!0);function t(){h.common.FluxDispatcher.unsubscribe("CONNECTION_OPEN",t),Ie=!0,e(!0)}h.common.FluxDispatcher.subscribe("CONNECTION_OPEN",t)})}var I=class{constructor(){this.listeners=new Map}_prepareListenersMap(t){this.listeners.has(t)||this.listeners.set(t,new Map)}on(t,r){return this._prepareListenersMap(t),this.listeners.get(t).set(r,{once:!1}),()=>{this.listeners.get(t).delete(r)}}once(t,r){return this._prepareListenersMap(t),this.listeners.get(t)?.set(r,{once:!0}),()=>{this.listeners.get(t).delete(r)}}off(t,r){if(!t)return this.listeners=new Map;if(!r)return this.listeners?.delete(t);this.listeners.get(t)?.delete(r)}emit(t,...r){if(!this.listeners.has(t))return;let o=this.listeners.get(t);o.forEach(({once:n},i)=>{n&&o?.delete(i),i(...r)})}};var Et=new I,O=Et;var Me=m.findByProperties("scrollbarGhostHairline","spinner"),vt={bold:/\*\*([^*]+)\*\*/g,italic:/\*([^*]+)\*/g,underline:/\_([^*]+)\_/g,strike:/\~\~([^*]+)\~\~/g,url:/(\b(https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/ig,inline:/\`([^*]+)\`/g,codeblockSingle:/\`\`\`([^*]+)\`\`\`/g,codeblockMulti:/\`\`\`(\w+)\n((?:(?!\`\`\`)[\s\S])*)\`\`\`/g},P={parse(e){let t=document.createElement("div");return t.innerHTML=e,t.firstElementChild},toCSSProp(e){let t=document.createElement("div");return Object.entries(e).forEach(r=>{t.style.hasOwnProperty(r[0])?t.style[r[0]]=r[1]:t.style.setProperty(r[0],r[1])}),t.getAttribute("style")},toHTMLProps(e){return Object.entries(e).map(t=>`${t[0].replace(/ +/,"-")}="${t[0]=="style"&&typeof t[1]!="string"?this.toCSSProp(t[1]):this.escapeHTML(t[1])}"`).join(" ")},escape(e){return new Option(e).innerHTML},parents(e,t){let r=[];if(typeof t=="number")for(let o=0;o<t;o++)e.parentElement&&(e=e.parentElement,r.push(e));else for(;e.parentElement&&e.parentElement.closest(t);)e=e.parentElement.closest(t),r.push(e);return r},patch:(e,t)=>(()=>{function r(n){n.nodeType!==Node.TEXT_NODE&&n.querySelectorAll(e).forEach(async i=>{if(i.acord||(i.acord={unmount:[],patched:new Set},i.classList.add("acord--patched")),i.acord.patched.has(t))return;i.acord.patched.add(t);let c=await t(i);typeof c=="function"&&i.acord.unmount.push(c)})}function o(n){n.nodeType!==Node.TEXT_NODE&&n.querySelectorAll(e).forEach(async i=>{i.acord&&i.acord.unmount.forEach(c=>c())})}return document.querySelectorAll(e).forEach(r),O.on("dom-mutation",n=>{n.type==="childList"&&(n.addedNodes.forEach(r),n.removedNodes.forEach(o))})})(),formatContent(e){if(!e)return"";let{bold:t,italic:r,underline:o,strike:n,codeblockMulti:i,codeblockSingle:c,inline:s,url:a}=vt,l=Object.fromEntries([...e.matchAll(i)||[],...e.matchAll(c)||[]].map(([d,p,y],A)=>(e=e.replace(d,`{{CODEBLOCK_${A}}}`),[`{{CODEBLOCK_${A}}}`,y?`<pre><code class="${Me.scrollbarGhostHairline} hljs ${p}" style="position: relative;">${modules.common.hljs.highlight(p,y).value}</code></pre>`:`<pre><code class="${Me.scrollbarGhostHairline} hljs" style="position: relative;">${p}</code></pre>`]))),f=Object.fromEntries([...e.matchAll(s)||[]].map(([d,p],y)=>(e=e.replace(d,`{{INLINE_${y}}}`),[`{{INLINE_${y}}}`,`<code class="inline">${p}</code>`])));e=e.replace(t,"<b>$1</b>").replace(r,"<i>$1</i>").replace(o,"<U>$1</U>").replace(n,"<s>$1</s>").replace(a,'<a href="$1">$1</a>');for(let[d,p]of Object.entries(l))e=e.replace(d,p);for(let[d,p]of Object.entries(f))e=e.replace(d,p);return e},resolve(e){return e instanceof Element?e:this.parse(e)}};new MutationObserver(t=>{t.forEach(r=>{O.emit("dom-mutation",r)})}).observe(document,{attributes:!0,childList:!0,subtree:!0});var se=["a","b","i"],b=new Map;function ze(e,t,r,o,n){let i=b.get(t)?.[e];if(!i)return n?Reflect.construct(t[e],r,o):t[e].apply(o,r);for(let a of i.b.values()){let l=a.call(o,r);Array.isArray(l)&&(r=l)}let c=(...a)=>n?Reflect.construct(i.o,a,o):i.o.apply(o,a);for(let a of i.i.values()){let l=c;c=(...f)=>a.call(o,f,l)}let s=c(...r);for(let a of i.a.values())s=a.call(o,r,s)??s;return s}function ce(e,t,r,o){let n=b.get(e),i=n?.[t];return i?.[o].has(r)?(i[o].delete(r),se.every(c=>i[c].size===0)&&(Reflect.defineProperty(e,t,{value:i.o,writable:!0,configurable:!0})||(e[t]=i.o),delete n[t]),Object.keys(n).length==0&&b.delete(e),!0):!1}function le(){for(let[e,t]of b.entries())for(let r in t)for(let o of se)for(let n of t[r]?.[o].keys()??[])ce(e,r,n,o)}var Q=e=>(t,r,o,n=!1)=>{if(typeof r[t]!="function")throw new Error(`${t} is not a function in ${r.constructor.name}`);b.has(r)||b.set(r,{});let i=b.get(r);if(!i[t]){let a=r[t];i[t]={o:a,b:new Map,i:new Map,a:new Map};let l=(p,y,A)=>{let dt=ze(t,r,y,p,A);return n&&s(),dt},f=new Proxy(a,{apply:(p,y,A)=>l(y,A,!1),construct:(p,y)=>l(a,y,!0),get:(p,y,A)=>y=="toString"?a.toString.bind(a):Reflect.get(p,y,A)});Reflect.defineProperty(r,t,{value:f,configurable:!0,writable:!0})||(r[t]=f),r[t].__original__=i[t].o}let c=Symbol(),s=()=>ce(r,t,c,e);return i[t][e].set(c,o),s};var Re=Q("b"),Fe=Q("i"),De=Q("a");var S={__cache__:{patched:b},before:Re,after:De,instead:Fe,unPatchAll:le,injectCSS(e){let t=document.createElement("style");return t.className="acord--injected-css",t.textContent=e,document.head.appendChild(t),()=>{t?.remove()}},unPatchAllCSS(){document.querySelectorAll(".acord--injected-css").forEach(e=>{e.remove()})}};var Be=`
@keyframes acordLoadingFade{0%{opacity:.1}100%{opacity:.9}}.acord--startup-loading{animation:acordLoadingFade .5s alternate infinite linear;position:absolute;transition:all .5s linear;right:8px;bottom:8px;width:16px;height:16px;background-image:url("https://api.acord.app/logo.svg?fg=ffffff");background-position:center;background-repeat:no-repeat;background-size:contain;z-index:999999}.acord--startup-loading.hidden{opacity:0 !important}`;var fe;async function St(){if(document.querySelector(".acord--startup-loading"))return;for(;!document.querySelector("#app-mount");)await new Promise(t=>setTimeout(t,100));fe=S.injectCSS(Be);let e=P.parse(`
    <div class="acord--startup-loading"></div>
  `);document.querySelector("#app-mount").appendChild(e)}function At(){let e=document.querySelector(".acord--startup-loading");e&&(e.classList.add("hidden"),setTimeout(()=>{e.remove(),fe?.(),fe=null},500))}var de={show:St,hide:At};var Ne=!1,v={get enabled(){return Ne},set enabled(e){if(!globalThis["<PRELOAD_KEY>"].isDevToolsOpen())throw new Error("Dev mode status can only be modified when DevTools is open!");Ne=e}};var ue="https://raw.githubusercontent.com/AcordPlugin/i18n/main",pe={cache:"no-store"},g={__cache__:{localeIds:[],localizations:{}},get locale(){return h.common.i18n._requestedLocale},get(e){return He(),g.__cache__.localizations[g.locale]?.[e]||g.__cache__.localizations.default?.[e]||h.common.i18n.Messages[e]||e},messages:new Proxy({},{get(e,t){return g.get(t)}}),localize(e){return typeof e=="string"?e:e?.[g.locale]||e?.default||Object.values(e)[0]},format(e,...t){return x.format(g.get(e),...t)}};async function He(){let e=g.locale;if(!g.__cache__.localeIds.length){try{g.__cache__.localeIds=await(await fetch(`${ue}/locales.json`,pe)).json()}catch{}try{g.__cache__.localizations.default=await(await fetch(`${ue}/default.json`,pe)).json()}catch{}}if(g.__cache__.localeIds.includes(e)&&!g.__cache__.localizations?.[e])try{g.__cache__.localizations[e]=await(await fetch(`${ue}/${e}.json`,pe)).json()}catch{}}He();var $=g;var Z=je(_e(),1);function xe(e){return new Promise((t,r)=>{e.oncomplete=e.onsuccess=()=>t(e.result),e.onabort=e.onerror=()=>r(e.error)})}function Lt(e,t){let r=indexedDB.open(e);r.onupgradeneeded=()=>r.result.createObjectStore(t);let o=xe(r);return(n,i)=>o.then(c=>i(c.transaction(t,n).objectStore(t)))}var ge;function Ge(){return ge||(ge=Lt("keyval-store","keyval")),ge}function Xe(e,t=Ge()){return t("readonly",r=>xe(r.get(e)))}function be(e,t,r=Ge()){return r("readwrite",o=>(o.put(t,e),xe(o.transaction)))}function Zt(e,t){return t=typeof t=="number"?{deep:t}:t||{},t.deep=t.deep||10,we([],[],e,t)}function Ee(e,t){t=typeof t=="number"?{deep:t}:t||{},e=Zt(e,t);try{return JSON.stringify(e,void 0,t.spacer)}catch(r){return r}}var Ye=/^\[Date:((\d{4}-\d{2}-\d{2})[A-Z]+(\d{2}:\d{2}:\d{2}).([0-9+-:]+)Z)\]$/,Je=/^\[Regexp:\/(.+)\/\]$/,Ve=/^\[Error:([\W\w]+)\]$/,Qe=/^\[Function:(.+)\]$/;function et(e,t){try{return JSON.parse(e,r)}catch(o){return o}function r(o,n){if(Ye.test(n))return n=Ye.exec(n),n=new Date(n[1]),new Date(n);if(Je.test(n))return n=Je.exec(n)[1],new RegExp(n);if(Ve.test(n)){n=Ve.exec(n)[1];var i=new Error(n.split(`
`)[0]);return i.stack&&(i.stack=n),i}else if(t&&Qe.test(n)){n=Qe.exec(n)[1];try{return new Function("return "+n+";")()}catch(c){return c}}else return n}}function we(e,t,r,o){if(["undefined","number","boolean","string"].indexOf(typeof r)>=0||r===null)return r;if(typeof r=="object"&&r.constructor===Date)return o.dates!==!1?"[Date:"+r.toISOString()+"]":r;if(typeof r=="object"&&r.constructor===RegExp)return o.regexps!==!1?"[Regexp:"+r.toString()+"]":r;if(typeof r=="object"&&r.constructor&&typeof r.constructor.name=="string"&&r.constructor.name.slice(-5)==="Error"){var n=(r.stack||"").split(`
`).slice(1),i=r.message||r.toString(),c=i+`
`+n;return o.errors!==!1?"[Error:"+c+"]":r}else if(typeof r=="object")if(e.indexOf(r)>=0){var s=t.slice(0,e.indexOf(r)).join(".");return"[Circular"+(s?":"+s:"")+"]"}else{var a,l,f,d;if(r.constructor&&typeof r.constructor.name=="string"&&r.constructor.name.slice(-5)==="Array"){if(e.length>=o.deep)return"[Array:"+r.constructor.name+"]";for(a=[],l=0,d=r.length;l<d;l++)a[l]=we(e.concat([r]),t.concat(l),r[l],o);return a}else{if(e.length>=o.deep)return"[Object:"+(r.constructor&&r.constructor.name?r.constructor.name:"Object")+"]";for(a={},l=0,f=Object.keys(r),d=f.length;l<d;l++)a[f[l]]=we(e.concat([r]),t.concat([f[l]]),r[f[l]],o);return a}}else return typeof r=="function"?o.functions===!0?"[Function:"+r.toString()+"]":void 0:r.toString()}var M={async createPersistNest(e){let t=await Xe(`AcordStore;${e}`);typeof t=="string"&&(t=et(t));let r=Z.make(t??{}),o=()=>{try{be(`AcordStore;${e}`,Ee({...r.ghost}))}catch{be(`AcordStore;${e}`,Ee({}))}};return r.on(Z.Events.SET,o),r.on(Z.Events.UPDATE,o),r.on(Z.Events.DELETE,o),r}};async function tt(e){if(!e?.i18n)return null;let t={__cache__:{localeIds:[],localizations:{}},format(o,...n){return x.format(t.get(o),...n)},get(o){return typeof e.i18n=="string"&&r(),t.__cache__.localizations[t.locale]?.[o]||t.__cache__.localizations.default?.[o]||t.get(o)},messages:new Proxy({},{get(o,n){return t.get(n)}})};async function r(){let o=$.locale;if(typeof e.i18n=="string"){let n=e.i18n.endsWith("/")?e.i18n.slice(0,-1):e.i18n;if(!t.__cache__.localeIds.length){try{t.__cache__.localeIds=await(await fetch(`${n}/locales.json`,noStore)).json()}catch{}try{t.__cache__.localizations.default=await(await fetch(`${n}/default.json`,noStore)).json()}catch{}}if(t.__cache__.localeIds.includes(o)&&!t.__cache__.localizations?.[o])try{t.__cache__.localizations[o]=await(await fetch(`${n}/${o}.json`,noStore)).json()}catch{}}else t.__cache__.localeIds=Object.keys(e.i18n),t.__cache__.localizations=e.i18n}return await r(),t}var rt=je(_e(),1);async function Mt(e){let t=await M.createPersistNest(`Extension;Persist;${e.about.slug}`),r={modules:{__cache__:{common:{},node:{},custom:{},customLazy:{}},require(o){return v.enabled?h.require(o):typeof r.modules.__cache__.node[o]<"u"?r.modules.__cache__.node[o]:e?.modules?.node?.some?.(n=>n.name===o)?r.modules.__cache__.node[o]=h.require(o):null},common:new Proxy({},{get(o,n){return v.enabled?h.common[n]:typeof r.modules.__cache__.common[n]<"u"?r.modules.__cache__.common[n]:e?.modules?.common?.some?.(i=>i.name===n)?r.modules.__cache__.common[n]=h.common[n]:null}}),custom:new Proxy({},{get(o,n){if(typeof r.modules.__cache__.custom[n]<"u")return r.modules.__cache__.custom[n];let i=e?.modules?.custom?.some?.(c=>c.name===n);if(!i)return null;if(i.lazy){let c=new Promise(async(s,a)=>{let l=await h.webpack.lazyFindByFinder(i.finder);r.modules.__cache__.customLazy[n]=l,s(l)});r.modules.__cache__.custom[n]={get(){return c},get value(){return r.modules.__cache__.customLazy[n]}}}else{let c=h.webpack.findByFinder(i.finder);try{typeof c?.value<"u"?r.modules.__cache__.custom[n]=c?Object.assign(c,{value:c,get(){return c}}):null:r.modules.__cache__.custom[n]=c}catch{r.modules.__cache__.custom[n]=c?{value:c,get(){return c}}:null}}return r.modules.__cache__.custom[n]}})},i18n:$,extension:{config:JSON.parse(JSON.stringify(e)),persist:t,i18n:await tt(e),events:new I}};return r}var u={__cache__:{initialized:!1,loaded:rt.make({})},storage:{installed:{}},buildAPI:Mt,async init(){u.__cache__.initialized||(u.__cache__.initialized=!0,u.storage.installed=await M.createPersistNest("Extensions;Installed"))},async install(e,t={}){if(u.__cache__.initialized||await u.init(),e.endsWith("/")&&(e=e.slice(0,-1)),u.storage.installed.ghost[e])throw new Error(`"${e}" extension is already installed.`);let r=await fetch(`${e}/metadata.json`);if(r.status!==200)throw new Error(`"${e}" extension metadata is not responded with 200 status code.`);let o=await r.json(),n=await fetch(`${e}/readme.md`),i=n.status===200?await n.text():null,c=await fetch(`${e}/source.js`);if(c.status!==200)throw new Error(`"${e}" extension source is not responded with 200 status code.`);let s=await c.text();u.storage.installed.store[e]={metadata:{current:o,last:o},source:s,readme:i,config:{autoUpdate:!0,enabled:!0,...t}}},async uninstall(e){if(u.__cache__.initialized||await u.init(),!u.storage.installed.ghost[e])throw new Error(`"${e}" extension is not installed.`);delete u.storage.installed.store[e];try{await u.unload(e)}catch{}},async load(e){if(u.__cache__.initialized||await u.init(),!u.storage.installed.ghost[e])throw new Error(`"${e}" extension is not installed.`);let t=u.storage.installed.ghost[e];if(u.__cache__.loaded.ghost[e])throw new Error(`"${e}" extension is already loaded.`);let r=await u.buildAPI(t.metadata),o=u.evaluate(t.source,r);await o?.load?.(),u.__cache__.loaded.store[e]={evaluated:o,api:r}},async unload(e){if(u.__cache__.initialized||await u.init(),!u.storage.installed.ghost[e])throw new Error(`"${e}" extension is not installed.`);if(!u.__cache__.loaded.ghost[e])throw new Error(`"${e}" extension is not loaded.`);let{evaluated:t}=u.__cache__.loaded.ghost[e];await t?.unload?.(),delete u.__cache__.loaded.store[e]},evaluate(source,api){let $acord=api;return eval(source)},async loadAll(){return u.__cache__.initialized||await u.init(),Promise.all(Object.keys(u.storage.installed.ghost).map(e=>u.load(e)))}},ve=u;var Pe={process:globalThis["<PRELOAD_KEY>"].process,isDevToolsOpen:globalThis["<PRELOAD_KEY>"].isDevToolsOpen};var k=m.findByProperties("tooltipContentAllowOverflow","tooltip"),N={top:k.tooltipTop,bottom:k.tooltipBottom,left:k.tooltipLeft,right:k.tooltipRight},H=class{constructor(t,r,o="auto"){this.layerElement=P.parse(`
      <div class="acord--tooltip-layer">
        <div class="${k.tooltip} ${k.tooltipPrimary} acord--tooltip">
          <div class="${k.tooltipPointer} acord--tooltip-pointer"></div>
          <div class="${k.tooltipContent} acord--tooltip-content"></div>
        </div>
      </div>
    `),this.tooltipElement=this.layerElement.querySelector(".acord--tooltip"),this.contentElement=this.layerElement.querySelector(".acord--tooltip-content"),this.content=r,this.target=t,this.position=o,this.visible=!1,this.disabled=!1,this.paused=!1;let n=()=>{this.disabled||this.paused||this.show()},i=()=>{this.paused||this.hide()};this.target.addEventListener("mouseenter",n),this.target.addEventListener("mouseleave",i);let c=O.on("dom-mutation",s=>{if(s.type==="attributes"&&s.target.isSameNode(this.target))switch(s.attributeName){case"acord--tooltip-disabled":{this.disabled=this.target.getAttribute("acord--tooltip-disabled")==="true";break}case"acord--tooltip-content":{this.content=this.target.getAttribute("acord--tooltip-content");break}case"acord--tooltip-position":{this.position=this.target.getAttribute("acord--tooltip-position");break}}});this.destroy=()=>{this.target.removeEventListener("mouseenter",n),this.target.removeEventListener("mouseleave",i),this.hide(),c()}}get content(){return this.contentElement.firstElementChild}set content(t){typeof t=="string"?this.contentElement.innerHTML=t:(this.contentElement.innerHTML="",this.contentElement.appendChild(t))}static getContainer(){let t=document.querySelector('[class*="notDevTools-"]'),r=t.querySelector(".acord--tooltip-container");return r||(r=P.parse('<div class="acord--layer-container acord--tooltip-container"></div>'),t.appendChild(r)),r.style.setProperty("--top-offset",`${t.getBoundingClientRect().top.toFixed(1)}px`),r}show(){if(this.visible)return;this.visible=!0;let t=H.getContainer();this.position==="auto"?this.calculatePosition(this.canShowAtTop?"top":this.canShowAtBottom?"bottom":this.canShowAtLeft?"left":this.canShowAtRight?"right":"top"):this.calculatePosition(this.position),t.appendChild(this.layerElement),this.layerElement.classList.add("visible")}calculatePosition(t){let r=this.target.getBoundingClientRect();switch(this.layerElement.classList.remove(...Object.values(N)),this.tooltipElement.classList.remove("vertical","horizontal"),t){case"top":{this.layerElement.style.top=`${r.top-this.target.offsetHeight-10}px`,this.layerElement.style.left=`${r.left}px`,this.layerElement.classList.add(N.top),this.tooltipElement.classList.add("vertical"),this.centerPosition("horizontal");break}case"bottom":{this.layerElement.style.top=`${r.top+this.target.offsetHeight+10}px`,this.layerElement.style.left=`${r.left}px`,this.layerElement.classList.add(N.bottom),this.tooltipElement.classList.add("vertical"),this.centerPosition("horizontal");break}case"left":{this.layerElement.style.top=`${r.top}px`,this.layerElement.style.left=`${r.left-this.target.offsetWidth-10}px`,this.layerElement.classList.add(N.left),this.tooltipElement.classList.add("horizontal"),this.centerPosition("vertical");break}case"right":{this.layerElement.style.top=`${r.top}px`,this.layerElement.style.left=`${r.left+this.target.offsetWidth+10}px`,this.layerElement.classList.add(N.right),this.tooltipElement.classList.add("horizontal"),this.centerPosition("vertical");break}}}centerPosition(t){switch(t){case"horizontal":{let r=this.target.getBoundingClientRect().left+this.target.offsetWidth/2;this.layerElement.style.setProperty("left",`${r-this.layerElement.offsetWidth/2}px`);break}case"vertical":{let r=this.target.getBoundingClientRect().top+this.target.offsetHeight/2;this.layerElement.style.setProperty("top",`${r-this.layerElement.offsetHeight/2}px`)}}}hide(){this.visible&&(this.visible=!1,this.layerElement.classList.remove("visible"),setTimeout(()=>{this.layerElement.remove()},50))}get canShowAtTop(){return this.target.getBoundingClientRect().top-this.layerElement.offsetHeight>=0}get canShowAtBottom(){return this.target.getBoundingClientRect().top+this.target.offsetHeight+this.layerElement.offsetHeight<=window.innerHeight}get canShowAtLeft(){return this.target.getBoundingClientRect().left-this.layerElement.offsetWidth>=0}get canShowAtRight(){return this.target.getBoundingClientRect().left+this.target.offsetWidth+this.layerElement.offsetWidth<=window.innerWidth}};function ot(e,t,r="auto"){return new H(e,t,r)}P.patch("[acord--tooltip-content]",e=>{let t=ot(e,e.getAttribute("acord--tooltip-content"),e.getAttribute("acord--tooltip-position"));return t.disabled=e.getAttribute("acord--tooltip-disabled")==="true",()=>{t.destroy()}});var nt={create:ot};var it=`
.acord--layer-container{--top-offset: 0px;width:100vw;height:calc(100vh - var(--top-offset));z-index:9999999;pointer-events:none;position:absolute;top:var(--top-offset);left:0px}.acord--layer-container *{z-index:99999999999999}.acord--tooltip-layer{opacity:0;transition:50ms linear opacity;position:absolute;pointer-events:none}.acord--tooltip-layer.visible{opacity:1;pointer-events:all}.acord--tooltip.vertical{transform:translateX(-50%)}.acord--tooltip.horizontal{transform:translateY(-50%)}.acord--notification-layer{width:100vw;height:calc(100vh - var(--top-offset));display:flex;position:absolute;top:0;left:0;pointer-events:none}.acord--notification-layer .acord--notification{display:flex;flex-direction:column;pointer-events:all;transition:transform 250ms ease-in-out,opacity 250ms ease-in-out;margin-top:8px;margin-right:8px;backdrop-filter:blur(16px) brightness(0.75);-webkit-app-region:no-drag;--animation-size: 50px}.acord--notification-layer .acord--notification.hidden,.acord--notification-layer .acord--notification.closing{opacity:0}.acord--notification-layer .acord--notification>.container{display:flex;align-items:center;justify-content:space-between;padding:8px;color:#fff;min-width:250px}.acord--notification-layer .acord--notification>.container>.close{width:24px;height:24px;color:#fff;opacity:.5;cursor:pointer;margin-left:8px;z-index:999999999}.acord--notification-layer .acord--notification>.container>.close.hidden{display:none}.acord--notification-layer .acord--notification>.progress-container{width:100%;height:5px}.acord--notification-layer .acord--notification>.progress-container>.progress{width:0%;height:5px;transition:width var(--duration) linear;background-color:var(--bar-color)}.acord--notification-layer .acord--notification>.progress-container>.progress.progressing{width:100%}.acord--notification-layer .acord--notification.style-info{--bar-color: #4a8fe1}.acord--notification-layer .acord--notification.style-warning{--bar-color: #faa81a}.acord--notification-layer .acord--notification.style-error{--bar-color: #ed4245}.acord--notification-layer .acord--notification.style-success{--bar-color: #3ba55d}.acord--notification-layer .acord--notification.style-default{--bar-color: whitesmoke}.acord--notification-layer.top-right{justify-content:flex-end;align-items:flex-start}.acord--notification-layer.top-right .acord--notification.hidden{transform:translate(0, calc(var(--animation-size) * -1))}.acord--notification-layer.top-right .acord--notification.closing{transform:translate(0, var(--animation-size))}.acord--notification-layer.top-left{justify-content:flex-start;align-items:flex-start}.acord--notification-layer.top-left .acord--notification.hidden{transform:translate(0, calc(var(--animation-size) * -1))}.acord--notification-layer.top-left .acord--notification.closing{transform:translate(0, var(--animation-size))}.acord--notification-layer.bottom-right{justify-content:flex-end;align-items:flex-end}.acord--notification-layer.bottom-right .acord--notification.hidden{transform:translate(0, var(--animation-size))}.acord--notification-layer.bottom-right .acord--notification.closing{transform:translate(0, calc(var(--animation-size) * -1))}.acord--notification-layer.bottom-left{justify-content:flex-start;align-items:flex-end}.acord--notification-layer.bottom-left .acord--notification.hidden{transform:translate(0, var(--animation-size))}.acord--notification-layer.bottom-left .acord--notification.closing{transform:translate(0, calc(var(--animation-size) * -1))}.acord--notification-layer.top-center{justify-content:center;align-items:flex-start}.acord--notification-layer.top-center .acord--notification.hidden{transform:translate(0, calc(var(--animation-size) * -1))}.acord--notification-layer.top-center .acord--notification.closing{transform:translate(0, var(--animation-size))}.acord--notification-layer.bottom-center{justify-content:center;align-items:flex-end}.acord--notification-layer.bottom-center .acord--notification.hidden{transform:translate(0, var(--animation-size))}.acord--notification-layer.bottom-center .acord--notification.closing{transform:translate(0, calc(var(--animation-size) * -1))}.acord--notification-layer.center{justify-content:center;align-items:center}.acord--notification-layer.center .acord--notification.hidden{transform:scale(0.5)}.acord--notification-layer.center .acord--notification.closing{transform:scale(0.5)}.acord--notification-layer.left-center{justify-content:flex-start;align-items:center}.acord--notification-layer.left-center .acord--notification.hidden{transform:translate(calc(var(--animation-size) * -1), 0)}.acord--notification-layer.left-center .acord--notification.closing{transform:translate(var(--animation-size), 0)}.acord--notification-layer.right-center{justify-content:flex-end;align-items:center}.acord--notification-layer.right-center .acord--notification.hidden{transform:translate(var(--animation-size), 0)}.acord--notification-layer.right-center .acord--notification.closing{transform:translate(calc(var(--animation-size) * -1), 0)}`;var at=["top-right","top-left","bottom-right","bottom-left","top-center","bottom-center","center","left-center","right-center"];function zt(e){if(!at.includes(e))throw new Error(`Invalid position "${e}". Valid positions are: ${at.join(", ")}`);let t=document.querySelector('[class*="notDevTools-"]'),r=t.querySelector(".acord--notification-layer-container");r||(r=P.parse('<div class="acord--layer-container acord--notification-layer-container"></div>'),t.appendChild(r)),r.style.setProperty("--top-offset",`${t.getBoundingClientRect().top.toFixed(1)}px`);let o=r.querySelector(`.acord--notification-layer.${e}`);return o||(o=P.parse(`<div class="acord--notification-layer ${e}"></div>`),r.appendChild(o)),o}function K(e,{style:t="default",timeout:r=1e4,position:o="top-right",closable:n=!0,onClick:i=null,onClose:c=null}={}){let s=zt(o),a=P.parse(`
    <div class="acord--notification style-${t} hidden">
        <div class="container">
            <div class="content"></div>
            <svg class="close ${n?"":"hidden"}" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24">
                <path fill="currentColor" d="M12 10.586l4.95-4.95 1.414 1.414-4.95 4.95 4.95 4.95-1.414 1.414-4.95-4.95-4.95 4.95-1.414-1.414 4.95-4.95-4.95-4.95L7.05 5.636z"/>
            </svg>
        </div>
        <div class="progress-container" style="--duration: ${r}ms;">
            <div class="progress"></div>
        </div>
    </div>
  `);a.querySelector(".content").innerHTML=e;let l=!1;function f(d){l||(l=!0,a.classList.add("closing"),setTimeout(()=>{a.remove()},275),c?.(d))}return typeof i=="function"&&(a.classList.add("clickable"),a.onclick=()=>{i(f)}),x.ifExists(a.querySelector(".close"),d=>{d.onclick=()=>{f("user")}}),s.prepend(a),requestAnimationFrame(()=>{a.classList.remove("hidden"),a.querySelector(".progress").classList.add("progressing")}),setTimeout(()=>{f("timeout")},r),()=>{f("force")}}var st={show:Object.assign(K,{info:(e,t={})=>K(e,{...t,style:"info"}),error:(e,t={})=>K(e,{...t,style:"error"}),warning:(e,t={})=>K(e,{...t,style:"warning"}),success:(e,t={})=>K(e,{...t,style:"success"})})};var{React:R}=V,q=!1,U=(()=>{let e={},t={separator:"Separator",checkbox:"CheckboxItem",radio:"RadioItem",control:"ControlItem",groupstart:"Group",customitem:"Item"};try{let r=Object.entries(m.require.m).find(([,i])=>i?.toString().includes("menuitemcheckbox"))[0],o=m.find((i,c)=>c==r).exports,n=m.require.m[r].toString().matchAll(/if\(\w+\.type===\w+\.(\w+)\).+?type:"(.+?)"/g);e.Menu=Object.values(o).find(i=>i.toString().includes(".isUsingKeyboardNavigation")),[...n].forEach(([,i,c])=>{e[t[c]]=o[i]}),q=Object.values(t).every(i=>e[i])&&!!e.Menu}catch(r){q=!1,j.error("Failed to load context menu components",r)}return e})(),Se=(()=>{let e=m.filter(r=>Object.values(r).some(o=>typeof o=="function"&&o.toString().includes("CONTEXT_MENU_CLOSE"))).find(r=>r.exports!==window).exports,t=J(e,{close:["CONTEXT_MENU_CLOSE"],open:["renderLazy"]});return q=q&&!!t.close&&!!t.open,t})(),z=class{static initialize(){if(!q)return j.warn("Unable to load context menu.");let t=m.filter(o=>Object.values(o).some(n=>typeof n=="function"&&n.toString().includes("CONTEXT_MENU_CLOSE"))).find(o=>o.exports!==window).exports,r=Object.keys(t).find(o=>t[o]?.length===3);console.log(t,r),S.before(r,t,function(o){let n=o[1];return o[1]=async function(...i){let c=await n.call(this,...i);return s=>{let a=c(s);return a?.props.navId?z.executePatches(a.props.navId,a,s):typeof a?.type=="function"&&z.patchRecursive(a,"type"),a}},o})}static patchRecursive(t,r,o=0){if(o>=this.MAX_PATCH_ITERATIONS)return;let n=this.subPatches.get(t[r])??(()=>{let i=t[r],c=++o;function s(...a){let l=i.call(this,...a);if(!l)return l;let f=l.props?.navId??l.props?.children?.props?.navId;if(f)z.executePatches(f,l,a[0]);else{let d=l.props.children?l.props.children:l;typeof d?.type=="function"&&z.patchRecursive(d,"type",c)}return l}return s.__original__=i,Object.assign(s,i),this.subPatches.set(i,s),s})();t[r]=n}static executePatches(t,r,o){this.patches.has(t)&&this.patches.get(t).forEach(n=>{try{n(r,o)}catch(i){j.error("Failed to patch context menu",n,i)}})}},E=z;X(E,"MAX_PATCH_ITERATIONS",16),X(E,"patches",new Map),X(E,"subPatches",new WeakMap);E.initialize();function Rt(e){let{type:t}=e;if(t==="separator")return R.createElement(U.Separator);let r=U.Item;if(t==="submenu"?e.children||(e.children=ct(e.render||e.items)):t==="toggle"||t==="radio"?(r=t==="toggle"?U.CheckboxItem:U.RadioItem,e.active&&(e.checked=e.active)):t==="control"&&(r=U.ControlItem),e.id||(e.id=`${e.label.replace(/^[^a-z]+|[^\w-]+/gi,"-")}`),e.danger&&(e.color="colorDanger"),e.extended=!0,t==="toggle"){let[o,n]=R.useState(e.checked||!1),i=e.action;e.checked=o,e.action=function(c){i(c),n(!o)}}return R.createElement(r,e)}function ct(e){let t=o=>o.type==="group"?r(o):Rt(o),r=function(o){let n=o.items.map(t).filter(i=>i);return R.createElement(MenuComponents.Group,null,n)};return e.map(t).filter(o=>o)}var lt={__cache__:{patches:E.patches,subPatches:E.subPatches},patch(e,t){return E.patches.has(e)||E.patches.set(e,new Set),E.patches.get(e).add(t),()=>{E.patches.get(e).delete(t)}},open(e,t,r){return Se.open(e,function(o){return R.createElement(t,Object.assign({},o,{onClose:Se.close}))},r)},close(){return Se.close()},build:{item(e){return ct(e)},menu(e){return t=>R.createElement(MenuComponents.Menu,t,this.buildMenuChildren(e))}}};S.injectCSS(it);var Ae={tooltips:nt,notifications:st,contextMenus:lt};x.logger.debug("PRELOAD_KEY: <PRELOAD_KEY>");function W(e){return new Error(`The ${e} API can only be accessed when Dev mode is enabled!`)}var ft={exposedAPI:{dev:v,utils:x,i18n:$,events:O,ui:Ae,get patcher(){if(!v.enabled)throw W("Patcher");return S},get storage(){if(!v.enabled)throw W("Storage");return M},get modules(){if(!v.enabled)throw W("Modules");return h},get extensions(){if(!v.enabled)throw W("Extensions");return ve},get internal(){if(!v.enabled)throw W("Internal");return Pe}},unexposedAPI:{dev:v,modules:h,utils:x,extensions:ve,i18n:$,storage:M,events:O,patcher:S,internal:Pe,ui:Ae}};Object.defineProperty(window,"acord",{get(){return ft.exposedAPI}});window.global=window;(async()=>(de.show(),await Ze(),de.hide()))();
//# sourceMappingURL=data:application/json;base64,
