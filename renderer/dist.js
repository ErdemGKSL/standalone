var Le=Object.create;var le=Object.defineProperty;var ze=Object.getOwnPropertyDescriptor;var Be=Object.getOwnPropertyNames;var Ke=Object.getPrototypeOf,Ue=Object.prototype.hasOwnProperty;var M=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports);var Ge=(e,t,r,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of Be(t))!Ue.call(e,n)&&n!==r&&le(e,n,{get:()=>t[n],enumerable:!(o=ze(t,n))||o.enumerable});return e};var ce=(e,t,r)=>(r=e!=null?Le(Ke(e)):{},Ge(t||!e||!e.__esModule?le(r,"default",{value:e,enumerable:!0}):r,e));var J=M(N=>{"use strict";Object.defineProperty(N,"__esModule",{value:!0});N.default=Object.freeze({GET:"GET",SET:"SET",DELETE:"DELETE",UPDATE:"UPDATE"})});var we=M(T=>{"use strict";var Je=T&&T.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(T,"__esModule",{value:!0});var ge=Je(J()),H=class{constructor(){this.listeners=Object.values(ge.default).reduce((t,r)=>(t[r]=new Set,t),{}),this.on=function(t,r){if(this.listeners[t].has(r))throw Error(`This listener on ${t} already exists.`);this.listeners[t].add(r)},this.once=function(t,r){let o=(n,s)=>{this.off(n,o),r(n,s)};this.on(t,o)},this.off=function(t,r){this.listeners[t].delete(r)},this.emit=function(t,r){for(let o of this.listeners[t])o(t,r)};for(let t of Object.values(ge.default))this[t.toLowerCase()]=r=>{this.emit(t,r)}}};T.default=H});var Ee=M(F=>{"use strict";var He=F&&F.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(F,"__esModule",{value:!0});var Ve=He(we());function Qe(e={},{nestArrays:t=!0}={}){let r=new Ve.default;function o(n,s,c){return new Proxy(n,{get(i,a){let l=[...c,a],u=i[a];return u!=null?(r.get({path:l,value:u}),!t&&Array.isArray(u)?u:typeof u=="object"?o(u,s,l):u):o(i[a]={},s,l)},set(i,a,l){return i[a]=l,r.set({path:[...c,a],value:l}),!0},deleteProperty(i,a){return delete i[a]?(r.delete({path:[...c,a]}),!0):!1},has(i,a){return typeof i[a]=="object"&&Object.keys(i[a]).length===0?!1:a in i}})}return Object.assign({store:o(e,e,[]),ghost:e},r)}F.default=Qe});var V=M(E=>{"use strict";var Pe=E&&E.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(E,"__esModule",{value:!0});E.make=E.Events=void 0;var qe=J();Object.defineProperty(E,"Events",{enumerable:!0,get:function(){return Pe(qe).default}});var Xe=Ee();Object.defineProperty(E,"make",{enumerable:!0,get:function(){return Pe(Xe).default}})});var ue={common:{modals:{components:{__:!0,filter:{export:!1,in:"properties",by:[["Header","Footer"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},ModalRoot:{__:!0,filter:{export:!1,in:"strings",by:[["ENTERING"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},actions:{open:{__:!0,filter:{export:!1,in:"strings",by:[["onCloseCallback","Layer"]]},path:{before:["exports.Z","exports.ZP","exports.default","exports"],after:["open"]},map:{open:["onCloseCallback","Layer"]}}}},components:{Button:{__:!0,filter:{export:!1,in:"properties",by:[["BorderColors"]]},path:{before:["exports.Z","exports.ZP","exports.default","exports"],after:"Button"},map:{Button:[".FILLED",".onMouseLeave"]}},ConfirmationModal:{__:!0,filter:{export:!1,in:"strings",by:[[".confirmButtonColor"]]},path:{before:["exports.Z","exports.ZP","exports.default","exports"]}},Text:{__:!0,filter:"$?.Sizes?.SIZE_32 && $.Colors",path:{before:["exports.Z","exports.ZP","exports.default","exports"]}}},Markdown:{__:!0,filter:"$?.prototype?.render && $.rules"},FluxDispatcher:{__:!0,path:{after:["exports.Z","exports.ZP","exports.default","exports"]},filter:{export:!1,in:"properties",by:[["_currentDispatchActionType","dispatch"]]}},React:{__:!0,path:{after:["exports.Z","exports.ZP","exports.default","exports"]},filter:{export:!1,in:"properties",by:[["createElement","useState"]]}},Rest:{__:!0,path:{after:["exports.Z","exports.ZP","exports.default","exports"]},filter:{export:!1,in:"properties",by:[["get","post","getAPIBaseURL"]]}},Flux:{__:!0,path:{after:["exports.Z","exports.ZP","exports.default","exports"]},filter:{export:!1,in:"properties",by:[["connectStores","destroy"]]}},ActivityActions:{__:!0,path:{after:["exports.Z","exports.ZP","exports.default","exports"]},filter:{export:!1,in:"properties",by:[["sendActivityInvite","updateActivity"]]}},AckActions:{__:!0,filter:{in:"strings",by:[['type:"BULK_ACK"'],[]]},path:{export:!0,before:"exports"},map:{ack:['type:"CHANNEL_ACK"',"messageId","channelId"],bulkAck:['type:"BULK_ACK"']}},AnalyticsActions:{__:!0,filter:{export:!1,in:"properties",by:[["isThrottled","track"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},AnimationActions:{__:!0,export:!1,filter:{in:"properties",by:[["spring","decay"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},ConnectionActions:{__:!0,filter:{export:!1,in:"properties",by:[["setShowActivity","setVisibility"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},RTCConnectionActions:{__:!0,filter:{export:!1,in:"properties",by:[["getChannelId","getGuildId","getRTCConnectionId"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},EmojiActions:{__:!0,filter:{export:!1,in:"properties",by:[["translateInlineEmojiToSurrogates","translateSurrogatesToInlineEmoji"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},EmojiStateActions:{__:!0,filter:{export:!1,in:"properties",by:[["getURL","isEmojiDisabled"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},GuildNotificationsActions:{__:!0,filter:{export:!1,in:"properties",by:[["updateChannelOverrideSettings","updateGuildNotificationSettings"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},InternalReact:{__:!0,filter:{export:!1,in:"properties",by:[["jsx","jsxs","Fragment"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},LoginActions:{__:!0,filter:{export:!1,in:"properties",by:[["login","logout"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},QueryActions:{__:!0,filter:{export:!1,in:"properties",by:[["queryEmojiResults","queryFriends"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},MessageActions:{__:!0,filter:{export:!1,in:"properties",by:[["receiveMessage","sendMessage"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},PremiumActions:{__:!0,filter:{export:!1,in:"properties",by:[["isPremium","canUseEmojisEverywhere"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},VoiceActions:{__:!0,filter:{export:!1,in:"properties",by:[["selectVoiceChannel","disconnect"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},TypingActions:{__:!0,filter:{export:!1,in:"properties",by:[["startTyping","stopTyping"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},GuildActions:{__:!0,filter:{export:!1,in:"properties",by:[["setChannel","setServerMute"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},InviteActions:{__:!0,filter:{export:!1,in:"properties",by:[["acceptInvite","acceptInviteAndTransitionToInviteChannel"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},MediaEngineActions:{__:!0,filter:{export:!1,in:"properties",by:[["toggleSelfDeaf","toggleSelfMute"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},i18n:{__:!0,filter:{export:!1,in:"properties",by:[["_requestedLocale","getDefaultLocale"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},uuid:{__:!0,filter:{export:!1,in:"properties",by:[["v1","v4"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}},hljs:{__:!0,filter:{export:!1,in:"properties",by:[["highlightAll","highlight"]]},path:{after:["exports.Z","exports.ZP","exports.default","exports"]}}}};function I(e,t,{walkable:r=null,ignore:o=[],limit:n=100}={}){let s=0;function c(i,a,{walkable:l=null,ignore:u=[]}={}){if(s+=1,!(s>n)){if(typeof a=="string"){if(i.hasOwnProperty(a))return i[a]}else if(a(i))return i;if(i){if(Array.isArray(i))for(let p of i){let m=c(p,a,{walkable:l,ignore:u});if(m)return m}else if(typeof i=="object"){for(let p of Object.keys(i))if(!(l!=null&&!l.includes(p))&&!u.includes(p))try{let m=c(i[p],a,{walkable:l,ignore:u});if(m)return m}catch{}}}}}return c(e,t,{walkable:r,ignore:o})}function j(e="Acord",t,r){return(...o)=>console[t](`%c${e}%c`,`background-color: ${r}; color: white; border-radius: 4px; padding: 0px 6px 0px 6px; font-weight: bold`,"",...o)}var $={log:j("Acord","log","#00fbb0"),debug:j("Acord Debug","debug","#00fbb0"),info:j("Acord Info","log","#82aaff"),warn:j("Acord Warn","warn","#debf18"),error:j("Acord Error","error","#ef5858"),build:j};var fe={getInstance(e){return Object.entries(e).find(t=>t[0].startsWith("__reactFiber$"))?.[1]},getOwnerInstance(e){let t=this.getInstance(e);for(let r=t;r;r=r.return)if(r.stateNode?.forceUpdate)return r.stateNode},findInTree(e,t){return I(e,t,{walkable:["props","state","children","return"]})},getComponents(e){let t=this.getInstance(e),r=[],o=t;for(;o&&o.return&&typeof o.return.type!="string";)o.return.type&&r.push(o.return.type),o=o.return;return r},getStateNodes(e){let t=this.getInstance(e),r=[],o=t;for(;o&&o.return&&!(o.return.stateNode instanceof HTMLElement);)o.return.stateNode&&r.push(o.return.stateNode),o=o.return;return r},getProps(e,t=o=>o,r=1e4){let o=this.getInstance(e);if(!o?.return)return null;for(let n=o?.return,s=0;s>r||n!==null;n=n?.return,s++)if(n?.pendingProps&&t(n.pendingProps))return n.pendingProps;return null}};var b={logger:$,react:fe,findInTree:I,format(e,...t){return`${e}`.replaceAll(/{(\d+)}/g,(r,o)=>t[Number(o)])},interval(e,t){let r=setInterval(e,t);return()=>{clearInterval(r)}},timeout(e,t){let r=setTimeout(e,t);return()=>{clearTimeout(r)}},ifExists(e,t){e&&t(e)},copyText(e){if(window.DiscordNative){DiscordNative.clipboard.copy(e);return}navigator.clipboard.writeText(e).catch(()=>{let t=document.createElement("textarea");t.style.visibility="hidden",t.style.position="fixed",t.style.top="0",t.style.left="0",document.body.appendChild(t),t.focus(),t.select();try{document.execCommand("copy")}catch(r){console.error(r)}document.body.removeChild(t)})}};function x(e){return(...t)=>{try{return t[0]?.default?.remove&&t[0]?.default?.set&&t[0]?.default?.clear&&t[0]?.default?.get&&!t[0]?.default?.sort||t[0].remove&&t[0].set&&t[0].clear&&t[0].get&&!t[0].sort||t[0]?.default?.getToken||t[0]?.default?.getEmail||t[0]?.default?.showToken||t[0]?.getToken||t[0]?.getEmail||t[0]?.showToken?!1:e(...t)}catch(r){return $.warn("Module filter threw an exception.",e,r),!1}}}function L(e,t,r){let o=(n,s)=>r?n.toString().indexOf(s.toString())==-1:n.toString().indexOf(s.toString())>-1;return t.every(n=>o(e?.toString?.()||"",n)||o(e?.__original__?.toString?.()||"",n)||o(e?.type?.toString?.()||"",n)||o(e?.type?.__original__?.toString?.()||"",n)||Object.entries(["function","object"].includes(typeof e?.prototype)?typeof e?.prototype:{}).filter(s=>s[0]?.includes?.("render")).some(s=>o(s[1]?.toString?.()||"",n)))}function z(e,t,r){return t.every(o=>{let n=e[o]?.__original__||e[o];return r?n===void 0:n!==void 0&&!(typeof n=="string"&&!n)})}function B(e,t,r){return e.prototype&&t.every(o=>{let n=e.prototype[o];return r?n===void 0:n!==void 0&&!(typeof n=="string"&&!n)})}var K="webpackChunkdiscord_app",U=new Set;{let t=function(r){let[,o]=r;for(let n in Object.keys(o||{})){let s=o[n];o[n]=(c,i,a)=>{try{s.call(null,c,i,a),U.forEach(l=>{try{l(i)}catch(u){b.logger.error("Push listener threw an exception.",l,u)}})}catch(l){b.logger.error("Unable to patch pushed module.",l)}},Object.assign(o[n],s,{__original__:s,toString:()=>s.toString()})}return e.call(window[K],r)},e=window[K].push;Object.defineProperty(window[K],"push",{configurable:!0,get(){return t},set(r){e=r,Object.defineProperty(window[this.chunkName],"push",{value:this.handlePush,configurable:!0,writable:!0})}})}async function G(e,{signal:t=null,searchExports:r=!1}){return new Promise((o,n)=>{let s=()=>U.delete(c),c=i=>{if(!i||i===window||i===document.documentElement)return;let a=null;if(typeof i=="object"&&r)for(let l in i){let u=i[l];if(u&&e(u)){a=u;break}}else a=["exports.Z","exports.ZP","exports.default","exports",""].map(u=>{let p=u?_.get(i,u):i;if(p&&e(p))return p}).find(u=>u);a&&(s(),o(a))};U.add(c),t?.addEventListener("abort",()=>{s(),o(null)})})}function R(e,t,r={}){let o=typeof r.defaultExport!="boolean"?!1:r.defaultExport,n=typeof r.unloaded!="boolean"?!1:r.unloaded,s=typeof r.all!="boolean"?!1:r.all,c=[];if(!n){for(let i in e.c)if(e.c.hasOwnProperty(i)){let a=e.c[i].exports,l=null;if(a&&(typeof a=="object"||typeof a=="function")){if(l=t(a,i))if(s)c.push(o?l:e.c[i]);else return o?l:e.c[i];else for(let u of Object.keys(a))if(u.length<4&&a[u]&&(l=t(a[u],i)))if(s)c.push(o?l:e.c[i]);else return o?l:e.c[i]}if(a&&a.__esModule&&a.default&&(typeof a.default=="object"||typeof a.default=="function")){if(l=t(a.default,i))if(s)c.push(o?l:e.c[i]);else return o?l:e.c[i];else if(a.default.type&&(typeof a.default.type=="object"||typeof a.default.type=="function")&&(l=t(a.default.type,i)))if(s)c.push(o?l:e.c[i]);else return o?l:e.c[i]}}}for(let i in e.m)if(e.m.hasOwnProperty(i)){let a=e.m[i];if(a&&typeof a=="function"){if(e.c[i]&&!n&&t(a,i))if(s)c.push(o?e.c[i].exports:e.c[i]);else return o?e.c[i].exports:e.c[i];if(!e.c[i]&&n&&t(a,i)){let l={},u={};a(l,u,e);let p=u&&Object.getOwnPropertyNames(u||{}).length==0?l:u;if(s)c.push(o?p.exports:p);else return o?p.exports:p}}}if(s)return c}function Ye(e,t){return e.find(r=>{let o=typeof r[1]=="function"?r[1]?.__original__?.toString?.()||r[1]?.toString?.()||"":(()=>{try{return JSON.stringify(r[1])}catch{return r[1].toString()}})(),n=r[1]?.render?.__original__?.toString?.()||r[1]?.render?.toString?.()||"";return t.every(s=>o.indexOf(s)!=-1||n.indexOf(s)!=-1)})}function pe(finder){let found=()=>!1;if(typeof finder?.filter=="string")found=x(eval(`(($)=>{ try { return (${finder.filter}); } catch { return false; } })`));else if(typeof finder?.filter=="function")found=x(finder.filter);else switch(finder.filter.in){case"properties":{finder.filter.by?.[1]?.length?found=x(e=>z(e,finder.filter.by?.[0]||[])&&z(e,finder.filter.by?.[1]||[],!0)):found=x(e=>z(e,finder.filter.by?.[0]||[]));break}case"prototypes":{finder.filter.by?.[1]?.length?found=x(e=>B(e,finder.filter.by?.[0]||[])&&B(e,finder.filter.by?.[1]||[],!0)):found=x(e=>B(e,finder.filter.by?.[0]||[]));break}case"strings":{finder.filter.by?.[1]?.length?found=x(e=>L(e,finder.filter.by?.[0]||[])&&L(e,finder.filter.by?.[1]||[],!0)):found=x(e=>L(e,finder.filter.by?.[0]||[]));break}}return found}function de(e,t){let r={},o={__original__:e,__mapped__:r,...e};return Object.entries(t).forEach(([n,s])=>{Object.defineProperty(o,n,{get(){if(r[n])return e[r[n]];let c=Ye(Object.entries(e||{}),t[n]||[]);if(c?.length)return r[n]=c[0],c[1]}})}),o}function _e(e,t={}){let r=!!t?.filter?.export,o=R(e,pe(t),{defaultExport:r});return!o||(t.path?.before&&(o=(Array.isArray(t.path.before)?t.path.before.map(n=>_.get(o,n)).find(n=>n):_.get(o,t.path.before))||o),t.assign&&(o=Object.assign({},o)),!o)?null:(t.map&&(o=de(o,t.map)),t.path?.after&&(o=(Array.isArray(t.path.after)?t.path.after.map(n=>_.get(o,n)).find(n=>n):_.get(o,t.path.after))||o),o)}async function he(e={}){let t=await G(pe(e),{searchExports:!1});return!t||(e.path?.before&&(t=(Array.isArray(e.path.before)?e.path.before.map(r=>_.get(t,r)).find(r=>r):_.get(t,e.path.before))||t),e.assign&&(t=Object.assign({},t)),!t)?null:(e.map&&(t=de(t,e.map)),e.path?.after&&(t=(Array.isArray(e.path.after)?e.path.after.map(r=>_.get(t,r)).find(r=>r):_.get(t,e.path.after))||t),t)}var v={__cache__:{},get req(){if(this.__cache__.req)return this.__cache__.req;let e=`AcordWebpackModules${Date.now()}`,t=window.webpackChunkdiscord_app.push([[e],{},r=>r]);return delete t.m[e],delete t.c[e],window.webpackChunkdiscord_app.pop(),this.__cache__._req=t,t},find(e,t={}){return R(this.req,x(e),t)},lazyFind(e,t={}){return G(x(e),t)},lazyFindByFinder(e){return he(e)},filter(e,t={}){return R(this.req,x(e),{...t,all:!0})},findByFinder(e){return _e(this.req,e)},findByProperties(...e){return this.findByFinder({filter:{export:!1,in:"properties",by:[e]},path:{before:["exports.Z","exports.ZP","exports.default","exports"]}})},findByPrototypes(...e){return this.findByFinder({filter:{export:!1,in:"properties",by:[e]},path:{before:["exports.Z","exports.ZP","exports.default","exports"]}})},findByStrings(...e){return this.findByFinder({filter:{export:!1,in:"properties",by:[e]},path:{before:["exports.Z","exports.ZP","exports.default","exports"]}})}};function ye(e,t){e?.__cache__||(e.__cache__={});for(let r in t)t?.[r]?.__===!0?Object.defineProperty(e,r,{get(){return e.__cache__[r]?e.__cache__[r]:e.__cache__[r]=v.findByFinder(t[r])}}):(e[r]={},ye(e[r],t[r]))}var P={__cache__:{}};ye(P,ue.common);{let e=["exports.Z","exports.ZP","exports.default","exports"];v.filter(t=>t?.getName?.()?.endsWith?.("Store"),{defaultExport:!1}).forEach(t=>{let r=e.map(n=>_.get(t,n)).find(n=>n);if(!r)return;let o=r?.getName?.();o&&(P[o]||Object.defineProperty(P,o,{get(){return P.__cache__[o]?P.__cache__[o]:P.__cache__[o]=r}}))})}var xe=P;var h={common:xe,webpack:v,require:globalThis["<PRELOAD_KEY>"].require};var me=!1,g={get enabled(){return me},set enabled(e){if(!globalThis["<PRELOAD_KEY>"].isDevToolsOpen())throw new Error("Dev mode status can only be modified when DevTools is open!");me=e}};var O=class{constructor(){this.listeners=new Map}_prepareListenersMap(t){this.listeners.has(t)||this.listeners.set(t,new Map)}on(t,r){return this._prepareListenersMap(t),this.listeners.get(t).set(r,{once:!1}),()=>{this.listeners.get(t).delete(r)}}once(t,r){return this._prepareListenersMap(t),this.listeners.get(t)?.set(r,{once:!0}),()=>{this.listeners.get(t).delete(r)}}off(t,r){if(!t)return this.listeners=new Map;if(!r)return this.listeners?.delete(t);this.listeners.get(t)?.delete(r)}emit(t,...r){if(!this.listeners.has(t))return;let o=this.listeners.get(t);o.forEach(({once:n},s)=>{n&&o?.delete(s),s(...r)})}};var W="https://raw.githubusercontent.com/AcordPlugin/i18n/main",Y={cache:"no-store"},d={__cache__:{localeIds:[],localizations:{}},get locale(){return h.common.i18n._requestedLocale},get(e){return be(),d.__cache__.localizations[d.locale]?.[e]||d.__cache__.localizations.default?.[e]||h.common.i18n.Messages[e]||e},messages:new Proxy({},{get(e,t){return d.get(t)}}),localize(e){return typeof e=="string"?e:e?.[d.locale]||e?.default||Object.values(e)[0]},format(e,...t){return b.format(d.get(e),...t)}};async function be(){let e=d.locale;if(!d.__cache__.localeIds.length){try{d.__cache__.localeIds=await(await fetch(`${W}/locales.json`,Y)).json()}catch{}try{d.__cache__.localizations.default=await(await fetch(`${W}/default.json`,Y)).json()}catch{}}if(d.__cache__.localeIds.includes(e)&&!d.__cache__.localizations?.[e])try{d.__cache__.localizations[e]=await(await fetch(`${W}/${e}.json`,Y)).json()}catch{}}be();var A=d;var Z=ce(V(),1);function q(e){return new Promise((t,r)=>{e.oncomplete=e.onsuccess=()=>t(e.result),e.onabort=e.onerror=()=>r(e.error)})}function et(e,t){let r=indexedDB.open(e);r.onupgradeneeded=()=>r.result.createObjectStore(t);let o=q(r);return(n,s)=>o.then(c=>s(c.transaction(t,n).objectStore(t)))}var Q;function Ae(){return Q||(Q=et("keyval-store","keyval")),Q}function je(e,t=Ae()){return t("readonly",r=>q(r.get(e)))}function X(e,t,r=Ae()){return r("readwrite",o=>(o.put(t,e),q(o.transaction)))}function rt(e,t){return t=typeof t=="number"?{deep:t}:t||{},t.deep=t.deep||10,ee([],[],e,t)}function te(e,t){t=typeof t=="number"?{deep:t}:t||{},e=rt(e,t);try{return JSON.stringify(e,void 0,t.spacer)}catch(r){return r}}var Oe=/^\[Date:((\d{4}-\d{2}-\d{2})[A-Z]+(\d{2}:\d{2}:\d{2}).([0-9+-:]+)Z)\]$/,Ze=/^\[Regexp:\/(.+)\/\]$/,Se=/^\[Error:([\W\w]+)\]$/,ke=/^\[Function:(.+)\]$/;function Ie(e,t){try{return JSON.parse(e,r)}catch(o){return o}function r(o,n){if(Oe.test(n))return n=Oe.exec(n),n=new Date(n[1]),new Date(n);if(Ze.test(n))return n=Ze.exec(n)[1],new RegExp(n);if(Se.test(n)){n=Se.exec(n)[1];var s=new Error(n.split(`
`)[0]);return s.stack&&(s.stack=n),s}else if(t&&ke.test(n)){n=ke.exec(n)[1];try{return new Function("return "+n+";")()}catch(c){return c}}else return n}}function ee(e,t,r,o){if(["undefined","number","boolean","string"].indexOf(typeof r)>=0||r===null)return r;if(typeof r=="object"&&r.constructor===Date)return o.dates!==!1?"[Date:"+r.toISOString()+"]":r;if(typeof r=="object"&&r.constructor===RegExp)return o.regexps!==!1?"[Regexp:"+r.toString()+"]":r;if(typeof r=="object"&&r.constructor&&typeof r.constructor.name=="string"&&r.constructor.name.slice(-5)==="Error"){var n=(r.stack||"").split(`
`).slice(1),s=r.message||r.toString(),c=s+`
`+n;return o.errors!==!1?"[Error:"+c+"]":r}else if(typeof r=="object")if(e.indexOf(r)>=0){var i=t.slice(0,e.indexOf(r)).join(".");return"[Circular"+(i?":"+i:"")+"]"}else{var a,l,u,p;if(r.constructor&&typeof r.constructor.name=="string"&&r.constructor.name.slice(-5)==="Array"){if(e.length>=o.deep)return"[Array:"+r.constructor.name+"]";for(a=[],l=0,p=r.length;l<p;l++)a[l]=ee(e.concat([r]),t.concat(l),r[l],o);return a}else{if(e.length>=o.deep)return"[Object:"+(r.constructor&&r.constructor.name?r.constructor.name:"Object")+"]";for(a={},l=0,u=Object.keys(r),p=u.length;l<p;l++)a[u[l]]=ee(e.concat([r]),t.concat([u[l]]),r[u[l]],o);return a}}else return typeof r=="function"?o.functions===!0?"[Function:"+r.toString()+"]":void 0:r.toString()}var S={async createPersistNest(e){let t=await je(`AcordStore;${e}`);typeof t=="string"&&(t=Ie(t));let r=Z.make(t??{}),o=()=>{try{X(`AcordStore;${e}`,te({...r.ghost}))}catch{X(`AcordStore;${e}`,te({}))}};return r.on(Z.Events.SET,o),r.on(Z.Events.UPDATE,o),r.on(Z.Events.DELETE,o),r}};async function ve(e){if(!e?.i18n)return null;let t={__cache__:{localeIds:[],localizations:{}},format(o,...n){return b.format(t.get(o),...n)},get(o){return typeof e.i18n=="string"&&r(),t.__cache__.localizations[t.locale]?.[o]||t.__cache__.localizations.default?.[o]||t.get(o)},messages:new Proxy({},{get(o,n){return t.get(n)}})};async function r(){let o=A.locale;if(typeof e.i18n=="string"){let n=e.i18n.endsWith("/")?e.i18n.slice(0,-1):e.i18n;if(!t.__cache__.localeIds.length){try{t.__cache__.localeIds=await(await fetch(`${n}/locales.json`,noStore)).json()}catch{}try{t.__cache__.localizations.default=await(await fetch(`${n}/default.json`,noStore)).json()}catch{}}if(t.__cache__.localeIds.includes(o)&&!t.__cache__.localizations?.[o])try{t.__cache__.localizations[o]=await(await fetch(`${n}/${o}.json`,noStore)).json()}catch{}}else t.__cache__.localeIds=Object.keys(e.i18n),t.__cache__.localizations=e.i18n}return await r(),t}var Te=ce(V(),1);async function ot(e){let t=await S.createPersistNest(`Extension;Persist;${e.about.slug}`),r={modules:{__cache__:{common:{},node:{},custom:{},customLazy:{}},require(o){return g.enabled?h.require(o):typeof r.modules.__cache__.node[o]<"u"?r.modules.__cache__.node[o]:e?.modules?.node?.some?.(n=>n.name===o)?r.modules.__cache__.node[o]=h.require(o):null},common:new Proxy({},{get(o,n){return g.enabled?h.common[n]:typeof r.modules.__cache__.common[n]<"u"?r.modules.__cache__.common[n]:e?.modules?.common?.some?.(s=>s.name===n)?r.modules.__cache__.common[n]=h.common[n]:null}}),custom:new Proxy({},{get(o,n){if(typeof r.modules.__cache__.custom[n]<"u")return r.modules.__cache__.custom[n];let s=e?.modules?.custom?.some?.(c=>c.name===n);if(!s)return null;if(s.lazy){let c=new Promise(async(i,a)=>{let l=await h.webpack.lazyFindByFinder(s.finder);r.modules.__cache__.customLazy[n]=l,i(l)});r.modules.__cache__.custom[n]={get(){return c},get value(){return r.modules.__cache__.customLazy[n]}}}else{let c=h.webpack.findByFinder(s.finder);try{typeof c?.value<"u"?r.modules.__cache__.custom[n]=c?Object.assign(c,{value:c,get(){return c}}):null:r.modules.__cache__.custom[n]=c}catch{r.modules.__cache__.custom[n]=c?{value:c,get(){return c}}:null}}return r.modules.__cache__.custom[n]}})},i18n:A,extension:{config:JSON.parse(JSON.stringify(e)),persist:t,i18n:await ve(e),events:new O}};return r}var f={__cache__:{initialized:!1,loaded:Te.make({})},storage:{installed:{}},buildAPI:ot,async init(){f.__cache__.initialized||(f.__cache__.initialized=!0,f.storage.installed=await S.createPersistNest("Extensions;Installed"))},async install(e,t={}){if(f.__cache__.initialized||await f.init(),e.endsWith("/")&&(e=e.slice(0,-1)),f.storage.installed.ghost[e])throw new Error(`"${e}" extension is already installed.`);let r=await fetch(`${e}/metadata.json`);if(r.status!==200)throw new Error(`"${e}" extension metadata is not responded with 200 status code.`);let o=await r.json(),n=await fetch(`${e}/readme.md`),s=n.status===200?await n.text():null,c=await fetch(`${e}/source.js`);if(c.status!==200)throw new Error(`"${e}" extension source is not responded with 200 status code.`);let i=await c.text();f.storage.installed.store[e]={metadata:{current:o,last:o},source:i,readme:s,config:{autoUpdate:!0,enabled:!0,...t}}},async uninstall(e){if(f.__cache__.initialized||await f.init(),!f.storage.installed.ghost[e])throw new Error(`"${e}" extension is not installed.`);delete f.storage.installed.store[e];try{await f.unload(e)}catch{}},async load(e){if(f.__cache__.initialized||await f.init(),!f.storage.installed.ghost[e])throw new Error(`"${e}" extension is not installed.`);let t=f.storage.installed.ghost[e];if(f.__cache__.loaded.ghost[e])throw new Error(`"${e}" extension is already loaded.`);let r=await f.buildAPI(t.metadata),o=f.evaluate(t.source,r);await o?.load?.(),f.__cache__.loaded.store[e]={evaluated:o,api:r}},async unload(e){if(f.__cache__.initialized||await f.init(),!f.storage.installed.ghost[e])throw new Error(`"${e}" extension is not installed.`);if(!f.__cache__.loaded.ghost[e])throw new Error(`"${e}" extension is not loaded.`);let{evaluated:t}=f.__cache__.loaded.ghost[e];await t?.unload?.(),delete f.__cache__.loaded.store[e]},evaluate(source,api){let $acord=api;return eval(source)}},re=f;var nt=new O,oe=nt;var ne=["a","b","i"],y=new Map;function Fe(e,t,r,o,n){let s=y.get(t)?.[e];if(!s)return n?Reflect.construct(t[e],r,o):t[e].apply(o,r);for(let a of s.b.values()){let l=a.call(o,r);Array.isArray(l)&&(r=l)}let c=(...a)=>n?Reflect.construct(s.o,a,o):s.o.apply(o,a);for(let a of s.i.values()){let l=c;c=(...u)=>a.call(o,u,l)}let i=c(...r);for(let a of s.a.values())i=a.call(o,r,i)??i;return i}function se(e,t,r,o){let n=y.get(e),s=n?.[t];return s?.[o].has(r)?(s[o].delete(r),ne.every(c=>s[c].size===0)&&(Reflect.defineProperty(e,t,{value:s.o,writable:!0,configurable:!0})||(e[t]=s.o),delete n[t]),Object.keys(n).length==0&&y.delete(e),!0):!1}function ie(){for(let[e,t]of y.entries())for(let r in t)for(let o of ne)for(let n of t[r]?.[o].keys()??[])se(e,r,n,o)}var C=e=>(t,r,o,n=!1)=>{if(typeof r[t]!="function")throw new Error(`${t} is not a function in ${r.constructor.name}`);y.has(r)||y.set(r,{});let s=y.get(r);if(!s[t]){let a=r[t];s[t]={o:a,b:new Map,i:new Map,a:new Map};let l=(m,w,k)=>{let Ce=Fe(t,r,w,m,k);return n&&i(),Ce},u=new Proxy(a,{apply:(m,w,k)=>l(w,k,!1),construct:(m,w)=>l(a,w,!0),get:(m,w,k)=>w=="toString"?a.toString.bind(a):Reflect.get(m,w,k)});Reflect.defineProperty(r,t,{value:u,configurable:!0,writable:!0})||(r[t]=u),r[t].__original__=s[t].o}let c=Symbol(),i=()=>se(r,t,c,e);return s[t][e].set(c,o),i};var De=C("b"),Me=C("i"),$e=C("a");var ae={__cache__:{patched:y},before:De,after:$e,instead:Me,unPatchAll:ie,injectCSS(e){let t=document.createElement("style");return t.className="acord--injected-css",t.textContent=e,document.head.appendChild(t),()=>{t?.remove()}},unPatchAllCSS(){document.querySelectorAll(".acord--injected-css").forEach(e=>{e.remove()})}};b.logger.debug("PRELOAD_KEY: <PRELOAD_KEY>");function D(e){return new Error(`The ${e} API can only be accessed when Dev mode is enabled!`)}var Re={exposedAPI:{dev:g,utils:b,i18n:A,events:oe,get patcher(){if(!g.enabled)throw D("Patcher");return ae},get storage(){if(!g.enabled)throw D("Storage");return S},get modules(){if(!g.enabled)throw D("Modules");return h},get extensions(){if(!g.enabled)throw D("Extensions");return re},get internal(){if(!g.enabled)throw D("Internal");return{process:globalThis["<PRELOAD_KEY>"].process,isDevToolsOpen:globalThis["<PRELOAD_KEY>"].isDevToolsOpen}}},unexposedAPI:{dev:g,modules:h,utils:b,extensions:re,i18n:A,storage:S,events:oe,patcher:ae,internal:{process:globalThis["<PRELOAD_KEY>"].process,isDevToolsOpen:globalThis["<PRELOAD_KEY>"].isDevToolsOpen}}};Object.defineProperty(window,"acord",{get(){return Re.exposedAPI}});window.global=window;
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibm9kZV9tb2R1bGVzL25lc3RzL2Nqcy9FdmVudHMuanMiLCAibm9kZV9tb2R1bGVzL25lc3RzL2Nqcy9FdmVudEVtaXR0ZXIuanMiLCAibm9kZV9tb2R1bGVzL25lc3RzL2Nqcy9tYWtlLmpzIiwgIm5vZGVfbW9kdWxlcy9uZXN0cy9janMvaW5kZXguanMiLCAic3JjL2RhdGEvY29tbW9uLmpzb24iLCAic3JjL2FwaS91dGlscy9yYXcvZmluZC1pbi10cmVlLmpzIiwgInNyYy9hcGkvdXRpbHMvbG9nZ2VyLmpzIiwgInNyYy9hcGkvdXRpbHMvcmVhY3QuanMiLCAic3JjL2FwaS91dGlscy9pbmRleC5qcyIsICJzcmMvYXBpL21vZHVsZXMvcmF3L2NvbXBsZXgtZmluZGVyLmpzIiwgInNyYy9hcGkvbW9kdWxlcy93ZWJwYWNrLmpzIiwgInNyYy9hcGkvbW9kdWxlcy9jb21tb24uanMiLCAic3JjL2FwaS9tb2R1bGVzL2luZGV4LmpzIiwgInNyYy9hcGkvZGV2L2luZGV4LmpzIiwgInNyYy9saWIvQmFzaWNFdmVudEVtaXR0ZXIuanMiLCAic3JjL2FwaS9pMThuL2luZGV4LmpzIiwgInNyYy9hcGkvc3RvcmFnZS9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvaWRiLWtleXZhbC9kaXN0L2luZGV4LmpzIiwgInNyYy9saWIvanNvbi1kZWN5Y2xlZC9pbmRleC5qcyIsICJzcmMvYXBpL2V4dGVuc2lvbnMvaTE4bi5qcyIsICJzcmMvYXBpL2V4dGVuc2lvbnMvaW5kZXguanMiLCAic3JjL2FwaS9ldmVudHMvaW5kZXguanMiLCAic3JjL2xpYi9zcGl0cm9hc3QvZGlzdC9lc20vc2hhcmVkLmpzIiwgInNyYy9saWIvc3BpdHJvYXN0L2Rpc3QvZXNtL2hvb2suanMiLCAic3JjL2xpYi9zcGl0cm9hc3QvZGlzdC9lc20vdW4tcGF0Y2guanMiLCAic3JjL2xpYi9zcGl0cm9hc3QvZGlzdC9lc20vZ2V0LXBhdGNoLWZ1bmMuanMiLCAic3JjL2xpYi9zcGl0cm9hc3QvZGlzdC9lc20vaW5kZXguanMiLCAic3JjL2FwaS9wYXRjaGVyL2luZGV4LmpzIiwgInNyYy9hcGkvaW5kZXguanMiLCAic3JjL2luZGV4LmpzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmRlZmF1bHQgPSBPYmplY3QuZnJlZXplKHtcclxuICAgIEdFVDogXCJHRVRcIixcclxuICAgIFNFVDogXCJTRVRcIixcclxuICAgIERFTEVURTogXCJERUxFVEVcIixcclxuICAgIFVQREFURTogXCJVUERBVEVcIixcclxufSk7XHJcbiIsICJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBFdmVudHNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9FdmVudHNcIikpO1xyXG5jbGFzcyBFdmVudEVtaXR0ZXIge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMgPSBPYmplY3QudmFsdWVzKEV2ZW50c18xLmRlZmF1bHQpLnJlZHVjZSgoYWNjLCB2YWwpID0+ICgoYWNjW3ZhbF0gPSBuZXcgU2V0KCkpLCBhY2MpLCB7fSk7XHJcbiAgICAgICAgdGhpcy5vbiA9IGZ1bmN0aW9uIChldmVudCwgbGlzdGVuZXIpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMubGlzdGVuZXJzW2V2ZW50XS5oYXMobGlzdGVuZXIpKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihgVGhpcyBsaXN0ZW5lciBvbiAke2V2ZW50fSBhbHJlYWR5IGV4aXN0cy5gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmxpc3RlbmVyc1tldmVudF0uYWRkKGxpc3RlbmVyKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMub25jZSA9IGZ1bmN0aW9uIChldmVudCwgbGlzdGVuZXIpIHtcclxuICAgICAgICAgICAgY29uc3Qgb25jZUxpc3RlbmVyID0gKGV2ZW50LCBkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9mZihldmVudCwgb25jZUxpc3RlbmVyKTtcclxuICAgICAgICAgICAgICAgIGxpc3RlbmVyKGV2ZW50LCBkYXRhKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdGhpcy5vbihldmVudCwgb25jZUxpc3RlbmVyKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMub2ZmID0gZnVuY3Rpb24gKGV2ZW50LCBsaXN0ZW5lcikge1xyXG4gICAgICAgICAgICB0aGlzLmxpc3RlbmVyc1tldmVudF0uZGVsZXRlKGxpc3RlbmVyKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuZW1pdCA9IGZ1bmN0aW9uIChldmVudCwgZGF0YSkge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGxpc3RlbmVyIG9mIHRoaXMubGlzdGVuZXJzW2V2ZW50XSkge1xyXG4gICAgICAgICAgICAgICAgbGlzdGVuZXIoZXZlbnQsIGRhdGEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBmb3IgKGNvbnN0IGV2ZW50IG9mIE9iamVjdC52YWx1ZXMoRXZlbnRzXzEuZGVmYXVsdCkpIHtcclxuICAgICAgICAgICAgdGhpc1tldmVudC50b0xvd2VyQ2FzZSgpXSA9IChkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoZXZlbnQsIGRhdGEpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5leHBvcnRzLmRlZmF1bHQgPSBFdmVudEVtaXR0ZXI7XHJcbiIsICJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBFdmVudEVtaXR0ZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9FdmVudEVtaXR0ZXJcIikpO1xyXG5mdW5jdGlvbiBtYWtlKFxyXG4vLyBUaGlzIGNhbiBiZSBzYWZlbHkgaWdub3JlZCwgdGhlIERhdGEgd2lsbCBhbHdheXMgYmUgYW4gb2JqZWN0IG9yIGl0IHdvbid0IHdvcmsgYW55d2F5LlxyXG4vLyBAdHMtaWdub3JlXHJcbmRhdGEgPSB7fSwgeyBuZXN0QXJyYXlzID0gdHJ1ZSwgfSA9IHt9KSB7XHJcbiAgICBjb25zdCBlbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcl8xLmRlZmF1bHQoKTtcclxuICAgIGZ1bmN0aW9uIGNyZWF0ZVByb3h5KHRhcmdldCwgcm9vdCwgcGF0aCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJveHkodGFyZ2V0LCB7XHJcbiAgICAgICAgICAgIGdldCh0YXJnZXQsIHByb3BlcnR5KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdQYXRoID0gWy4uLnBhdGgsIHByb3BlcnR5XTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdGFyZ2V0W3Byb3BlcnR5XTtcclxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW1pdHRlci5nZXQoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRoOiBuZXdQYXRoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIW5lc3RBcnJheXMgJiYgQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVQcm94eSh2YWx1ZSwgcm9vdCwgbmV3UGF0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVQcm94eSgodGFyZ2V0W3Byb3BlcnR5XSA9IHt9KSwgcm9vdCwgbmV3UGF0aCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNldCh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0W3Byb3BlcnR5XSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgZW1pdHRlci5zZXQoe1xyXG4gICAgICAgICAgICAgICAgICAgIHBhdGg6IFsuLi5wYXRoLCBwcm9wZXJ0eV0sXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUsXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIC8vIFRoaXMgbmVlZHMgdG8gcmV0dXJuIHRydWUgb3IgaXQgZXJyb3JzLiAvc2hydWdcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGVsZXRlIHRhcmdldFtwcm9wZXJ0eV0pIHtcclxuICAgICAgICAgICAgICAgICAgICBlbWl0dGVyLmRlbGV0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGg6IFsuLi5wYXRoLCBwcm9wZXJ0eV0sXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGhhcyh0YXJnZXQsIHByb3BlcnR5KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRhcmdldFtwcm9wZXJ0eV0gPT09IFwib2JqZWN0XCIgJiZcclxuICAgICAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyh0YXJnZXRbcHJvcGVydHldKS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvcGVydHkgaW4gdGFyZ2V0O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oeyBzdG9yZTogY3JlYXRlUHJveHkoZGF0YSwgZGF0YSwgW10pLCBcclxuICAgICAgICAvLyBUaGlzIGNhbiBiZSBzYWZlbHkgaWdub3JlZCwgdGhlIERhdGEgd2lsbCBhbHdheXMgYmUgYW4gb2JqZWN0IG9yIGl0IHdvbid0IHdvcmsgYW55d2F5LlxyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBnaG9zdDogZGF0YSB9LCBlbWl0dGVyKTtcclxufVxyXG5leHBvcnRzLmRlZmF1bHQgPSBtYWtlO1xyXG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5tYWtlID0gZXhwb3J0cy5FdmVudHMgPSB2b2lkIDA7XHJcbnZhciBFdmVudHNfMSA9IHJlcXVpcmUoXCIuL0V2ZW50c1wiKTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRXZlbnRzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBfX2ltcG9ydERlZmF1bHQoRXZlbnRzXzEpLmRlZmF1bHQ7IH0gfSk7XHJcbnZhciBtYWtlXzEgPSByZXF1aXJlKFwiLi9tYWtlXCIpO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJtYWtlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBfX2ltcG9ydERlZmF1bHQobWFrZV8xKS5kZWZhdWx0OyB9IH0pO1xyXG4iLCAie1xyXG4gIFwiY29tbW9uXCI6IHtcclxuICAgIFwibW9kYWxzXCI6IHtcclxuICAgICAgXCJjb21wb25lbnRzXCI6IHtcclxuICAgICAgICBcIl9fXCI6IHRydWUsXHJcbiAgICAgICAgXCJmaWx0ZXJcIjoge1xyXG4gICAgICAgICAgXCJleHBvcnRcIjogZmFsc2UsXHJcbiAgICAgICAgICBcImluXCI6IFwicHJvcGVydGllc1wiLFxyXG4gICAgICAgICAgXCJieVwiOiBbXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICBcIkhlYWRlclwiLFxyXG4gICAgICAgICAgICAgIFwiRm9vdGVyXCJcclxuICAgICAgICAgICAgXVxyXG4gICAgICAgICAgXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJwYXRoXCI6IHtcclxuICAgICAgICAgIFwiYWZ0ZXJcIjogW1xyXG4gICAgICAgICAgICBcImV4cG9ydHMuWlwiLFxyXG4gICAgICAgICAgICBcImV4cG9ydHMuWlBcIixcclxuICAgICAgICAgICAgXCJleHBvcnRzLmRlZmF1bHRcIixcclxuICAgICAgICAgICAgXCJleHBvcnRzXCJcclxuICAgICAgICAgIF1cclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIFwiTW9kYWxSb290XCI6IHtcclxuICAgICAgICBcIl9fXCI6IHRydWUsXHJcbiAgICAgICAgXCJmaWx0ZXJcIjoge1xyXG4gICAgICAgICAgXCJleHBvcnRcIjogZmFsc2UsXHJcbiAgICAgICAgICBcImluXCI6IFwic3RyaW5nc1wiLFxyXG4gICAgICAgICAgXCJieVwiOiBbXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICBcIkVOVEVSSU5HXCJcclxuICAgICAgICAgICAgXVxyXG4gICAgICAgICAgXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJwYXRoXCI6IHtcclxuICAgICAgICAgIFwiYWZ0ZXJcIjogW1xyXG4gICAgICAgICAgICBcImV4cG9ydHMuWlwiLFxyXG4gICAgICAgICAgICBcImV4cG9ydHMuWlBcIixcclxuICAgICAgICAgICAgXCJleHBvcnRzLmRlZmF1bHRcIixcclxuICAgICAgICAgICAgXCJleHBvcnRzXCJcclxuICAgICAgICAgIF1cclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIFwiYWN0aW9uc1wiOiB7XHJcbiAgICAgICAgXCJvcGVuXCI6IHtcclxuICAgICAgICAgIFwiX19cIjogdHJ1ZSxcclxuICAgICAgICAgIFwiZmlsdGVyXCI6IHtcclxuICAgICAgICAgICAgXCJleHBvcnRcIjogZmFsc2UsXHJcbiAgICAgICAgICAgIFwiaW5cIjogXCJzdHJpbmdzXCIsXHJcbiAgICAgICAgICAgIFwiYnlcIjogW1xyXG4gICAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgIFwib25DbG9zZUNhbGxiYWNrXCIsXHJcbiAgICAgICAgICAgICAgICBcIkxheWVyXCJcclxuICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBcInBhdGhcIjoge1xyXG4gICAgICAgICAgICBcImJlZm9yZVwiOiBbXHJcbiAgICAgICAgICAgICAgXCJleHBvcnRzLlpcIixcclxuICAgICAgICAgICAgICBcImV4cG9ydHMuWlBcIixcclxuICAgICAgICAgICAgICBcImV4cG9ydHMuZGVmYXVsdFwiLFxyXG4gICAgICAgICAgICAgIFwiZXhwb3J0c1wiXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiYWZ0ZXJcIjogW1xyXG4gICAgICAgICAgICAgIFwib3BlblwiXHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBcIm1hcFwiOiB7XHJcbiAgICAgICAgICAgIFwib3BlblwiOiBbXHJcbiAgICAgICAgICAgICAgXCJvbkNsb3NlQ2FsbGJhY2tcIixcclxuICAgICAgICAgICAgICBcIkxheWVyXCJcclxuICAgICAgICAgICAgXVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIFwiY29tcG9uZW50c1wiOiB7XHJcbiAgICAgIFwiQnV0dG9uXCI6IHtcclxuICAgICAgICBcIl9fXCI6IHRydWUsXHJcbiAgICAgICAgXCJmaWx0ZXJcIjoge1xyXG4gICAgICAgICAgXCJleHBvcnRcIjogZmFsc2UsXHJcbiAgICAgICAgICBcImluXCI6IFwicHJvcGVydGllc1wiLFxyXG4gICAgICAgICAgXCJieVwiOiBbXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICBcIkJvcmRlckNvbG9yc1wiXHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICAgIF1cclxuICAgICAgICB9LFxyXG4gICAgICAgIFwicGF0aFwiOiB7XHJcbiAgICAgICAgICBcImJlZm9yZVwiOiBbXHJcbiAgICAgICAgICAgIFwiZXhwb3J0cy5aXCIsXHJcbiAgICAgICAgICAgIFwiZXhwb3J0cy5aUFwiLFxyXG4gICAgICAgICAgICBcImV4cG9ydHMuZGVmYXVsdFwiLFxyXG4gICAgICAgICAgICBcImV4cG9ydHNcIlxyXG4gICAgICAgICAgXSxcclxuICAgICAgICAgIFwiYWZ0ZXJcIjogXCJCdXR0b25cIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJtYXBcIjoge1xyXG4gICAgICAgICAgXCJCdXR0b25cIjogW1xyXG4gICAgICAgICAgICBcIi5GSUxMRURcIixcclxuICAgICAgICAgICAgXCIub25Nb3VzZUxlYXZlXCJcclxuICAgICAgICAgIF1cclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIFwiQ29uZmlybWF0aW9uTW9kYWxcIjoge1xyXG4gICAgICAgIFwiX19cIjogdHJ1ZSxcclxuICAgICAgICBcImZpbHRlclwiOiB7XHJcbiAgICAgICAgICBcImV4cG9ydFwiOiBmYWxzZSxcclxuICAgICAgICAgIFwiaW5cIjogXCJzdHJpbmdzXCIsXHJcbiAgICAgICAgICBcImJ5XCI6IFtcclxuICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgIFwiLmNvbmZpcm1CdXR0b25Db2xvclwiXHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICAgIF1cclxuICAgICAgICB9LFxyXG4gICAgICAgIFwicGF0aFwiOiB7XHJcbiAgICAgICAgICBcImJlZm9yZVwiOiBbXHJcbiAgICAgICAgICAgIFwiZXhwb3J0cy5aXCIsXHJcbiAgICAgICAgICAgIFwiZXhwb3J0cy5aUFwiLFxyXG4gICAgICAgICAgICBcImV4cG9ydHMuZGVmYXVsdFwiLFxyXG4gICAgICAgICAgICBcImV4cG9ydHNcIlxyXG4gICAgICAgICAgXVxyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgXCJUZXh0XCI6IHtcclxuICAgICAgICBcIl9fXCI6IHRydWUsXHJcbiAgICAgICAgXCJmaWx0ZXJcIjogXCIkPy5TaXplcz8uU0laRV8zMiAmJiAkLkNvbG9yc1wiLFxyXG4gICAgICAgIFwicGF0aFwiOiB7XHJcbiAgICAgICAgICBcImJlZm9yZVwiOiBbXHJcbiAgICAgICAgICAgIFwiZXhwb3J0cy5aXCIsXHJcbiAgICAgICAgICAgIFwiZXhwb3J0cy5aUFwiLFxyXG4gICAgICAgICAgICBcImV4cG9ydHMuZGVmYXVsdFwiLFxyXG4gICAgICAgICAgICBcImV4cG9ydHNcIlxyXG4gICAgICAgICAgXVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIFwiTWFya2Rvd25cIjoge1xyXG4gICAgICBcIl9fXCI6IHRydWUsXHJcbiAgICAgIFwiZmlsdGVyXCI6IFwiJD8ucHJvdG90eXBlPy5yZW5kZXIgJiYgJC5ydWxlc1wiXHJcbiAgICB9LFxyXG4gICAgXCJGbHV4RGlzcGF0Y2hlclwiOiB7XHJcbiAgICAgIFwiX19cIjogdHJ1ZSxcclxuICAgICAgXCJwYXRoXCI6IHtcclxuICAgICAgICBcImFmdGVyXCI6IFtcclxuICAgICAgICAgIFwiZXhwb3J0cy5aXCIsXHJcbiAgICAgICAgICBcImV4cG9ydHMuWlBcIixcclxuICAgICAgICAgIFwiZXhwb3J0cy5kZWZhdWx0XCIsXHJcbiAgICAgICAgICBcImV4cG9ydHNcIlxyXG4gICAgICAgIF1cclxuICAgICAgfSxcclxuICAgICAgXCJmaWx0ZXJcIjoge1xyXG4gICAgICAgIFwiZXhwb3J0XCI6IGZhbHNlLFxyXG4gICAgICAgIFwiaW5cIjogXCJwcm9wZXJ0aWVzXCIsXHJcbiAgICAgICAgXCJieVwiOiBbXHJcbiAgICAgICAgICBbXHJcbiAgICAgICAgICAgIFwiX2N1cnJlbnREaXNwYXRjaEFjdGlvblR5cGVcIixcclxuICAgICAgICAgICAgXCJkaXNwYXRjaFwiXHJcbiAgICAgICAgICBdXHJcbiAgICAgICAgXVxyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgXCJSZWFjdFwiOiB7XHJcbiAgICAgIFwiX19cIjogdHJ1ZSxcclxuICAgICAgXCJwYXRoXCI6IHtcclxuICAgICAgICBcImFmdGVyXCI6IFtcclxuICAgICAgICAgIFwiZXhwb3J0cy5aXCIsXHJcbiAgICAgICAgICBcImV4cG9ydHMuWlBcIixcclxuICAgICAgICAgIFwiZXhwb3J0cy5kZWZhdWx0XCIsXHJcbiAgICAgICAgICBcImV4cG9ydHNcIlxyXG4gICAgICAgIF1cclxuICAgICAgfSxcclxuICAgICAgXCJmaWx0ZXJcIjoge1xyXG4gICAgICAgIFwiZXhwb3J0XCI6IGZhbHNlLFxyXG4gICAgICAgIFwiaW5cIjogXCJwcm9wZXJ0aWVzXCIsXHJcbiAgICAgICAgXCJieVwiOiBbXHJcbiAgICAgICAgICBbXHJcbiAgICAgICAgICAgIFwiY3JlYXRlRWxlbWVudFwiLFxyXG4gICAgICAgICAgICBcInVzZVN0YXRlXCJcclxuICAgICAgICAgIF1cclxuICAgICAgICBdXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBcIlJlc3RcIjoge1xyXG4gICAgICBcIl9fXCI6IHRydWUsXHJcbiAgICAgIFwicGF0aFwiOiB7XHJcbiAgICAgICAgXCJhZnRlclwiOiBbXHJcbiAgICAgICAgICBcImV4cG9ydHMuWlwiLFxyXG4gICAgICAgICAgXCJleHBvcnRzLlpQXCIsXHJcbiAgICAgICAgICBcImV4cG9ydHMuZGVmYXVsdFwiLFxyXG4gICAgICAgICAgXCJleHBvcnRzXCJcclxuICAgICAgICBdXHJcbiAgICAgIH0sXHJcbiAgICAgIFwiZmlsdGVyXCI6IHtcclxuICAgICAgICBcImV4cG9ydFwiOiBmYWxzZSxcclxuICAgICAgICBcImluXCI6IFwicHJvcGVydGllc1wiLFxyXG4gICAgICAgIFwiYnlcIjogW1xyXG4gICAgICAgICAgW1xyXG4gICAgICAgICAgICBcImdldFwiLFxyXG4gICAgICAgICAgICBcInBvc3RcIixcclxuICAgICAgICAgICAgXCJnZXRBUElCYXNlVVJMXCJcclxuICAgICAgICAgIF1cclxuICAgICAgICBdXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBcIkZsdXhcIjoge1xyXG4gICAgICBcIl9fXCI6IHRydWUsXHJcbiAgICAgIFwicGF0aFwiOiB7XHJcbiAgICAgICAgXCJhZnRlclwiOiBbXHJcbiAgICAgICAgICBcImV4cG9ydHMuWlwiLFxyXG4gICAgICAgICAgXCJleHBvcnRzLlpQXCIsXHJcbiAgICAgICAgICBcImV4cG9ydHMuZGVmYXVsdFwiLFxyXG4gICAgICAgICAgXCJleHBvcnRzXCJcclxuICAgICAgICBdXHJcbiAgICAgIH0sXHJcbiAgICAgIFwiZmlsdGVyXCI6IHtcclxuICAgICAgICBcImV4cG9ydFwiOiBmYWxzZSxcclxuICAgICAgICBcImluXCI6IFwicHJvcGVydGllc1wiLFxyXG4gICAgICAgIFwiYnlcIjogW1xyXG4gICAgICAgICAgW1xyXG4gICAgICAgICAgICBcImNvbm5lY3RTdG9yZXNcIixcclxuICAgICAgICAgICAgXCJkZXN0cm95XCJcclxuICAgICAgICAgIF1cclxuICAgICAgICBdXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBcIkFjdGl2aXR5QWN0aW9uc1wiOiB7XHJcbiAgICAgIFwiX19cIjogdHJ1ZSxcclxuICAgICAgXCJwYXRoXCI6IHtcclxuICAgICAgICBcImFmdGVyXCI6IFtcclxuICAgICAgICAgIFwiZXhwb3J0cy5aXCIsXHJcbiAgICAgICAgICBcImV4cG9ydHMuWlBcIixcclxuICAgICAgICAgIFwiZXhwb3J0cy5kZWZhdWx0XCIsXHJcbiAgICAgICAgICBcImV4cG9ydHNcIlxyXG4gICAgICAgIF1cclxuICAgICAgfSxcclxuICAgICAgXCJmaWx0ZXJcIjoge1xyXG4gICAgICAgIFwiZXhwb3J0XCI6IGZhbHNlLFxyXG4gICAgICAgIFwiaW5cIjogXCJwcm9wZXJ0aWVzXCIsXHJcbiAgICAgICAgXCJieVwiOiBbXHJcbiAgICAgICAgICBbXHJcbiAgICAgICAgICAgIFwic2VuZEFjdGl2aXR5SW52aXRlXCIsXHJcbiAgICAgICAgICAgIFwidXBkYXRlQWN0aXZpdHlcIlxyXG4gICAgICAgICAgXVxyXG4gICAgICAgIF1cclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIFwiQWNrQWN0aW9uc1wiOiB7XHJcbiAgICAgIFwiX19cIjogdHJ1ZSxcclxuICAgICAgXCJmaWx0ZXJcIjoge1xyXG4gICAgICAgIFwiaW5cIjogXCJzdHJpbmdzXCIsXHJcbiAgICAgICAgXCJieVwiOiBbXHJcbiAgICAgICAgICBbXHJcbiAgICAgICAgICAgIFwidHlwZTpcXFwiQlVMS19BQ0tcXFwiXCJcclxuICAgICAgICAgIF0sXHJcbiAgICAgICAgICBbXVxyXG4gICAgICAgIF1cclxuICAgICAgfSxcclxuICAgICAgXCJwYXRoXCI6IHtcclxuICAgICAgICBcImV4cG9ydFwiOiB0cnVlLFxyXG4gICAgICAgIFwiYmVmb3JlXCI6IFwiZXhwb3J0c1wiXHJcbiAgICAgIH0sXHJcbiAgICAgIFwibWFwXCI6IHtcclxuICAgICAgICBcImFja1wiOiBbXHJcbiAgICAgICAgICBcInR5cGU6XFxcIkNIQU5ORUxfQUNLXFxcIlwiLFxyXG4gICAgICAgICAgXCJtZXNzYWdlSWRcIixcclxuICAgICAgICAgIFwiY2hhbm5lbElkXCJcclxuICAgICAgICBdLFxyXG4gICAgICAgIFwiYnVsa0Fja1wiOiBbXHJcbiAgICAgICAgICBcInR5cGU6XFxcIkJVTEtfQUNLXFxcIlwiXHJcbiAgICAgICAgXVxyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgXCJBbmFseXRpY3NBY3Rpb25zXCI6IHtcclxuICAgICAgXCJfX1wiOiB0cnVlLFxyXG4gICAgICBcImZpbHRlclwiOiB7XHJcbiAgICAgICAgXCJleHBvcnRcIjogZmFsc2UsXHJcbiAgICAgICAgXCJpblwiOiBcInByb3BlcnRpZXNcIixcclxuICAgICAgICBcImJ5XCI6IFtcclxuICAgICAgICAgIFtcclxuICAgICAgICAgICAgXCJpc1Rocm90dGxlZFwiLFxyXG4gICAgICAgICAgICBcInRyYWNrXCJcclxuICAgICAgICAgIF1cclxuICAgICAgICBdXHJcbiAgICAgIH0sXHJcbiAgICAgIFwicGF0aFwiOiB7XHJcbiAgICAgICAgXCJhZnRlclwiOiBbXHJcbiAgICAgICAgICBcImV4cG9ydHMuWlwiLFxyXG4gICAgICAgICAgXCJleHBvcnRzLlpQXCIsXHJcbiAgICAgICAgICBcImV4cG9ydHMuZGVmYXVsdFwiLFxyXG4gICAgICAgICAgXCJleHBvcnRzXCJcclxuICAgICAgICBdXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBcIkFuaW1hdGlvbkFjdGlvbnNcIjoge1xyXG4gICAgICBcIl9fXCI6IHRydWUsXHJcbiAgICAgIFwiZXhwb3J0XCI6IGZhbHNlLFxyXG4gICAgICBcImZpbHRlclwiOiB7XHJcbiAgICAgICAgXCJpblwiOiBcInByb3BlcnRpZXNcIixcclxuICAgICAgICBcImJ5XCI6IFtcclxuICAgICAgICAgIFtcclxuICAgICAgICAgICAgXCJzcHJpbmdcIixcclxuICAgICAgICAgICAgXCJkZWNheVwiXHJcbiAgICAgICAgICBdXHJcbiAgICAgICAgXVxyXG4gICAgICB9LFxyXG4gICAgICBcInBhdGhcIjoge1xyXG4gICAgICAgIFwiYWZ0ZXJcIjogW1xyXG4gICAgICAgICAgXCJleHBvcnRzLlpcIixcclxuICAgICAgICAgIFwiZXhwb3J0cy5aUFwiLFxyXG4gICAgICAgICAgXCJleHBvcnRzLmRlZmF1bHRcIixcclxuICAgICAgICAgIFwiZXhwb3J0c1wiXHJcbiAgICAgICAgXVxyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgXCJDb25uZWN0aW9uQWN0aW9uc1wiOiB7XHJcbiAgICAgIFwiX19cIjogdHJ1ZSxcclxuICAgICAgXCJmaWx0ZXJcIjoge1xyXG4gICAgICAgIFwiZXhwb3J0XCI6IGZhbHNlLFxyXG4gICAgICAgIFwiaW5cIjogXCJwcm9wZXJ0aWVzXCIsXHJcbiAgICAgICAgXCJieVwiOiBbXHJcbiAgICAgICAgICBbXHJcbiAgICAgICAgICAgIFwic2V0U2hvd0FjdGl2aXR5XCIsXHJcbiAgICAgICAgICAgIFwic2V0VmlzaWJpbGl0eVwiXHJcbiAgICAgICAgICBdXHJcbiAgICAgICAgXVxyXG4gICAgICB9LFxyXG4gICAgICBcInBhdGhcIjoge1xyXG4gICAgICAgIFwiYWZ0ZXJcIjogW1xyXG4gICAgICAgICAgXCJleHBvcnRzLlpcIixcclxuICAgICAgICAgIFwiZXhwb3J0cy5aUFwiLFxyXG4gICAgICAgICAgXCJleHBvcnRzLmRlZmF1bHRcIixcclxuICAgICAgICAgIFwiZXhwb3J0c1wiXHJcbiAgICAgICAgXVxyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgXCJSVENDb25uZWN0aW9uQWN0aW9uc1wiOiB7XHJcbiAgICAgIFwiX19cIjogdHJ1ZSxcclxuICAgICAgXCJmaWx0ZXJcIjoge1xyXG4gICAgICAgIFwiZXhwb3J0XCI6IGZhbHNlLFxyXG4gICAgICAgIFwiaW5cIjogXCJwcm9wZXJ0aWVzXCIsXHJcbiAgICAgICAgXCJieVwiOiBbXHJcbiAgICAgICAgICBbXHJcbiAgICAgICAgICAgIFwiZ2V0Q2hhbm5lbElkXCIsXHJcbiAgICAgICAgICAgIFwiZ2V0R3VpbGRJZFwiLFxyXG4gICAgICAgICAgICBcImdldFJUQ0Nvbm5lY3Rpb25JZFwiXHJcbiAgICAgICAgICBdXHJcbiAgICAgICAgXVxyXG4gICAgICB9LFxyXG4gICAgICBcInBhdGhcIjoge1xyXG4gICAgICAgIFwiYWZ0ZXJcIjogW1xyXG4gICAgICAgICAgXCJleHBvcnRzLlpcIixcclxuICAgICAgICAgIFwiZXhwb3J0cy5aUFwiLFxyXG4gICAgICAgICAgXCJleHBvcnRzLmRlZmF1bHRcIixcclxuICAgICAgICAgIFwiZXhwb3J0c1wiXHJcbiAgICAgICAgXVxyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgXCJFbW9qaUFjdGlvbnNcIjoge1xyXG4gICAgICBcIl9fXCI6IHRydWUsXHJcbiAgICAgIFwiZmlsdGVyXCI6IHtcclxuICAgICAgICBcImV4cG9ydFwiOiBmYWxzZSxcclxuICAgICAgICBcImluXCI6IFwicHJvcGVydGllc1wiLFxyXG4gICAgICAgIFwiYnlcIjogW1xyXG4gICAgICAgICAgW1xyXG4gICAgICAgICAgICBcInRyYW5zbGF0ZUlubGluZUVtb2ppVG9TdXJyb2dhdGVzXCIsXHJcbiAgICAgICAgICAgIFwidHJhbnNsYXRlU3Vycm9nYXRlc1RvSW5saW5lRW1vamlcIlxyXG4gICAgICAgICAgXVxyXG4gICAgICAgIF1cclxuICAgICAgfSxcclxuICAgICAgXCJwYXRoXCI6IHtcclxuICAgICAgICBcImFmdGVyXCI6IFtcclxuICAgICAgICAgIFwiZXhwb3J0cy5aXCIsXHJcbiAgICAgICAgICBcImV4cG9ydHMuWlBcIixcclxuICAgICAgICAgIFwiZXhwb3J0cy5kZWZhdWx0XCIsXHJcbiAgICAgICAgICBcImV4cG9ydHNcIlxyXG4gICAgICAgIF1cclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIFwiRW1vamlTdGF0ZUFjdGlvbnNcIjoge1xyXG4gICAgICBcIl9fXCI6IHRydWUsXHJcbiAgICAgIFwiZmlsdGVyXCI6IHtcclxuICAgICAgICBcImV4cG9ydFwiOiBmYWxzZSxcclxuICAgICAgICBcImluXCI6IFwicHJvcGVydGllc1wiLFxyXG4gICAgICAgIFwiYnlcIjogW1xyXG4gICAgICAgICAgW1xyXG4gICAgICAgICAgICBcImdldFVSTFwiLFxyXG4gICAgICAgICAgICBcImlzRW1vamlEaXNhYmxlZFwiXHJcbiAgICAgICAgICBdXHJcbiAgICAgICAgXVxyXG4gICAgICB9LFxyXG4gICAgICBcInBhdGhcIjoge1xyXG4gICAgICAgIFwiYWZ0ZXJcIjogW1xyXG4gICAgICAgICAgXCJleHBvcnRzLlpcIixcclxuICAgICAgICAgIFwiZXhwb3J0cy5aUFwiLFxyXG4gICAgICAgICAgXCJleHBvcnRzLmRlZmF1bHRcIixcclxuICAgICAgICAgIFwiZXhwb3J0c1wiXHJcbiAgICAgICAgXVxyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgXCJHdWlsZE5vdGlmaWNhdGlvbnNBY3Rpb25zXCI6IHtcclxuICAgICAgXCJfX1wiOiB0cnVlLFxyXG4gICAgICBcImZpbHRlclwiOiB7XHJcbiAgICAgICAgXCJleHBvcnRcIjogZmFsc2UsXHJcbiAgICAgICAgXCJpblwiOiBcInByb3BlcnRpZXNcIixcclxuICAgICAgICBcImJ5XCI6IFtcclxuICAgICAgICAgIFtcclxuICAgICAgICAgICAgXCJ1cGRhdGVDaGFubmVsT3ZlcnJpZGVTZXR0aW5nc1wiLFxyXG4gICAgICAgICAgICBcInVwZGF0ZUd1aWxkTm90aWZpY2F0aW9uU2V0dGluZ3NcIlxyXG4gICAgICAgICAgXVxyXG4gICAgICAgIF1cclxuICAgICAgfSxcclxuICAgICAgXCJwYXRoXCI6IHtcclxuICAgICAgICBcImFmdGVyXCI6IFtcclxuICAgICAgICAgIFwiZXhwb3J0cy5aXCIsXHJcbiAgICAgICAgICBcImV4cG9ydHMuWlBcIixcclxuICAgICAgICAgIFwiZXhwb3J0cy5kZWZhdWx0XCIsXHJcbiAgICAgICAgICBcImV4cG9ydHNcIlxyXG4gICAgICAgIF1cclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIFwiSW50ZXJuYWxSZWFjdFwiOiB7XHJcbiAgICAgIFwiX19cIjogdHJ1ZSxcclxuICAgICAgXCJmaWx0ZXJcIjoge1xyXG4gICAgICAgIFwiZXhwb3J0XCI6IGZhbHNlLFxyXG4gICAgICAgIFwiaW5cIjogXCJwcm9wZXJ0aWVzXCIsXHJcbiAgICAgICAgXCJieVwiOiBbXHJcbiAgICAgICAgICBbXHJcbiAgICAgICAgICAgIFwianN4XCIsXHJcbiAgICAgICAgICAgIFwianN4c1wiLFxyXG4gICAgICAgICAgICBcIkZyYWdtZW50XCJcclxuICAgICAgICAgIF1cclxuICAgICAgICBdXHJcbiAgICAgIH0sXHJcbiAgICAgIFwicGF0aFwiOiB7XHJcbiAgICAgICAgXCJhZnRlclwiOiBbXHJcbiAgICAgICAgICBcImV4cG9ydHMuWlwiLFxyXG4gICAgICAgICAgXCJleHBvcnRzLlpQXCIsXHJcbiAgICAgICAgICBcImV4cG9ydHMuZGVmYXVsdFwiLFxyXG4gICAgICAgICAgXCJleHBvcnRzXCJcclxuICAgICAgICBdXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBcIkxvZ2luQWN0aW9uc1wiOiB7XHJcbiAgICAgIFwiX19cIjogdHJ1ZSxcclxuICAgICAgXCJmaWx0ZXJcIjoge1xyXG4gICAgICAgIFwiZXhwb3J0XCI6IGZhbHNlLFxyXG4gICAgICAgIFwiaW5cIjogXCJwcm9wZXJ0aWVzXCIsXHJcbiAgICAgICAgXCJieVwiOiBbXHJcbiAgICAgICAgICBbXHJcbiAgICAgICAgICAgIFwibG9naW5cIixcclxuICAgICAgICAgICAgXCJsb2dvdXRcIlxyXG4gICAgICAgICAgXVxyXG4gICAgICAgIF1cclxuICAgICAgfSxcclxuICAgICAgXCJwYXRoXCI6IHtcclxuICAgICAgICBcImFmdGVyXCI6IFtcclxuICAgICAgICAgIFwiZXhwb3J0cy5aXCIsXHJcbiAgICAgICAgICBcImV4cG9ydHMuWlBcIixcclxuICAgICAgICAgIFwiZXhwb3J0cy5kZWZhdWx0XCIsXHJcbiAgICAgICAgICBcImV4cG9ydHNcIlxyXG4gICAgICAgIF1cclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIFwiUXVlcnlBY3Rpb25zXCI6IHtcclxuICAgICAgXCJfX1wiOiB0cnVlLFxyXG4gICAgICBcImZpbHRlclwiOiB7XHJcbiAgICAgICAgXCJleHBvcnRcIjogZmFsc2UsXHJcbiAgICAgICAgXCJpblwiOiBcInByb3BlcnRpZXNcIixcclxuICAgICAgICBcImJ5XCI6IFtcclxuICAgICAgICAgIFtcclxuICAgICAgICAgICAgXCJxdWVyeUVtb2ppUmVzdWx0c1wiLFxyXG4gICAgICAgICAgICBcInF1ZXJ5RnJpZW5kc1wiXHJcbiAgICAgICAgICBdXHJcbiAgICAgICAgXVxyXG4gICAgICB9LFxyXG4gICAgICBcInBhdGhcIjoge1xyXG4gICAgICAgIFwiYWZ0ZXJcIjogW1xyXG4gICAgICAgICAgXCJleHBvcnRzLlpcIixcclxuICAgICAgICAgIFwiZXhwb3J0cy5aUFwiLFxyXG4gICAgICAgICAgXCJleHBvcnRzLmRlZmF1bHRcIixcclxuICAgICAgICAgIFwiZXhwb3J0c1wiXHJcbiAgICAgICAgXVxyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgXCJNZXNzYWdlQWN0aW9uc1wiOiB7XHJcbiAgICAgIFwiX19cIjogdHJ1ZSxcclxuICAgICAgXCJmaWx0ZXJcIjoge1xyXG4gICAgICAgIFwiZXhwb3J0XCI6IGZhbHNlLFxyXG4gICAgICAgIFwiaW5cIjogXCJwcm9wZXJ0aWVzXCIsXHJcbiAgICAgICAgXCJieVwiOiBbXHJcbiAgICAgICAgICBbXHJcbiAgICAgICAgICAgIFwicmVjZWl2ZU1lc3NhZ2VcIixcclxuICAgICAgICAgICAgXCJzZW5kTWVzc2FnZVwiXHJcbiAgICAgICAgICBdXHJcbiAgICAgICAgXVxyXG4gICAgICB9LFxyXG4gICAgICBcInBhdGhcIjoge1xyXG4gICAgICAgIFwiYWZ0ZXJcIjogW1xyXG4gICAgICAgICAgXCJleHBvcnRzLlpcIixcclxuICAgICAgICAgIFwiZXhwb3J0cy5aUFwiLFxyXG4gICAgICAgICAgXCJleHBvcnRzLmRlZmF1bHRcIixcclxuICAgICAgICAgIFwiZXhwb3J0c1wiXHJcbiAgICAgICAgXVxyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgXCJQcmVtaXVtQWN0aW9uc1wiOiB7XHJcbiAgICAgIFwiX19cIjogdHJ1ZSxcclxuICAgICAgXCJmaWx0ZXJcIjoge1xyXG4gICAgICAgIFwiZXhwb3J0XCI6IGZhbHNlLFxyXG4gICAgICAgIFwiaW5cIjogXCJwcm9wZXJ0aWVzXCIsXHJcbiAgICAgICAgXCJieVwiOiBbXHJcbiAgICAgICAgICBbXHJcbiAgICAgICAgICAgIFwiaXNQcmVtaXVtXCIsXHJcbiAgICAgICAgICAgIFwiY2FuVXNlRW1vamlzRXZlcnl3aGVyZVwiXHJcbiAgICAgICAgICBdXHJcbiAgICAgICAgXVxyXG4gICAgICB9LFxyXG4gICAgICBcInBhdGhcIjoge1xyXG4gICAgICAgIFwiYWZ0ZXJcIjogW1xyXG4gICAgICAgICAgXCJleHBvcnRzLlpcIixcclxuICAgICAgICAgIFwiZXhwb3J0cy5aUFwiLFxyXG4gICAgICAgICAgXCJleHBvcnRzLmRlZmF1bHRcIixcclxuICAgICAgICAgIFwiZXhwb3J0c1wiXHJcbiAgICAgICAgXVxyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgXCJWb2ljZUFjdGlvbnNcIjoge1xyXG4gICAgICBcIl9fXCI6IHRydWUsXHJcbiAgICAgIFwiZmlsdGVyXCI6IHtcclxuICAgICAgICBcImV4cG9ydFwiOiBmYWxzZSxcclxuICAgICAgICBcImluXCI6IFwicHJvcGVydGllc1wiLFxyXG4gICAgICAgIFwiYnlcIjogW1xyXG4gICAgICAgICAgW1xyXG4gICAgICAgICAgICBcInNlbGVjdFZvaWNlQ2hhbm5lbFwiLFxyXG4gICAgICAgICAgICBcImRpc2Nvbm5lY3RcIlxyXG4gICAgICAgICAgXVxyXG4gICAgICAgIF1cclxuICAgICAgfSxcclxuICAgICAgXCJwYXRoXCI6IHtcclxuICAgICAgICBcImFmdGVyXCI6IFtcclxuICAgICAgICAgIFwiZXhwb3J0cy5aXCIsXHJcbiAgICAgICAgICBcImV4cG9ydHMuWlBcIixcclxuICAgICAgICAgIFwiZXhwb3J0cy5kZWZhdWx0XCIsXHJcbiAgICAgICAgICBcImV4cG9ydHNcIlxyXG4gICAgICAgIF1cclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIFwiVHlwaW5nQWN0aW9uc1wiOiB7XHJcbiAgICAgIFwiX19cIjogdHJ1ZSxcclxuICAgICAgXCJmaWx0ZXJcIjoge1xyXG4gICAgICAgIFwiZXhwb3J0XCI6IGZhbHNlLFxyXG4gICAgICAgIFwiaW5cIjogXCJwcm9wZXJ0aWVzXCIsXHJcbiAgICAgICAgXCJieVwiOiBbXHJcbiAgICAgICAgICBbXHJcbiAgICAgICAgICAgIFwic3RhcnRUeXBpbmdcIixcclxuICAgICAgICAgICAgXCJzdG9wVHlwaW5nXCJcclxuICAgICAgICAgIF1cclxuICAgICAgICBdXHJcbiAgICAgIH0sXHJcbiAgICAgIFwicGF0aFwiOiB7XHJcbiAgICAgICAgXCJhZnRlclwiOiBbXHJcbiAgICAgICAgICBcImV4cG9ydHMuWlwiLFxyXG4gICAgICAgICAgXCJleHBvcnRzLlpQXCIsXHJcbiAgICAgICAgICBcImV4cG9ydHMuZGVmYXVsdFwiLFxyXG4gICAgICAgICAgXCJleHBvcnRzXCJcclxuICAgICAgICBdXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBcIkd1aWxkQWN0aW9uc1wiOiB7XHJcbiAgICAgIFwiX19cIjogdHJ1ZSxcclxuICAgICAgXCJmaWx0ZXJcIjoge1xyXG4gICAgICAgIFwiZXhwb3J0XCI6IGZhbHNlLFxyXG4gICAgICAgIFwiaW5cIjogXCJwcm9wZXJ0aWVzXCIsXHJcbiAgICAgICAgXCJieVwiOiBbXHJcbiAgICAgICAgICBbXHJcbiAgICAgICAgICAgIFwic2V0Q2hhbm5lbFwiLFxyXG4gICAgICAgICAgICBcInNldFNlcnZlck11dGVcIlxyXG4gICAgICAgICAgXVxyXG4gICAgICAgIF1cclxuICAgICAgfSxcclxuICAgICAgXCJwYXRoXCI6IHtcclxuICAgICAgICBcImFmdGVyXCI6IFtcclxuICAgICAgICAgIFwiZXhwb3J0cy5aXCIsXHJcbiAgICAgICAgICBcImV4cG9ydHMuWlBcIixcclxuICAgICAgICAgIFwiZXhwb3J0cy5kZWZhdWx0XCIsXHJcbiAgICAgICAgICBcImV4cG9ydHNcIlxyXG4gICAgICAgIF1cclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIFwiSW52aXRlQWN0aW9uc1wiOiB7XHJcbiAgICAgIFwiX19cIjogdHJ1ZSxcclxuICAgICAgXCJmaWx0ZXJcIjoge1xyXG4gICAgICAgIFwiZXhwb3J0XCI6IGZhbHNlLFxyXG4gICAgICAgIFwiaW5cIjogXCJwcm9wZXJ0aWVzXCIsXHJcbiAgICAgICAgXCJieVwiOiBbXHJcbiAgICAgICAgICBbXHJcbiAgICAgICAgICAgIFwiYWNjZXB0SW52aXRlXCIsXHJcbiAgICAgICAgICAgIFwiYWNjZXB0SW52aXRlQW5kVHJhbnNpdGlvblRvSW52aXRlQ2hhbm5lbFwiXHJcbiAgICAgICAgICBdXHJcbiAgICAgICAgXVxyXG4gICAgICB9LFxyXG4gICAgICBcInBhdGhcIjoge1xyXG4gICAgICAgIFwiYWZ0ZXJcIjogW1xyXG4gICAgICAgICAgXCJleHBvcnRzLlpcIixcclxuICAgICAgICAgIFwiZXhwb3J0cy5aUFwiLFxyXG4gICAgICAgICAgXCJleHBvcnRzLmRlZmF1bHRcIixcclxuICAgICAgICAgIFwiZXhwb3J0c1wiXHJcbiAgICAgICAgXVxyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgXCJNZWRpYUVuZ2luZUFjdGlvbnNcIjoge1xyXG4gICAgICBcIl9fXCI6IHRydWUsXHJcbiAgICAgIFwiZmlsdGVyXCI6IHtcclxuICAgICAgICBcImV4cG9ydFwiOiBmYWxzZSxcclxuICAgICAgICBcImluXCI6IFwicHJvcGVydGllc1wiLFxyXG4gICAgICAgIFwiYnlcIjogW1xyXG4gICAgICAgICAgW1xyXG4gICAgICAgICAgICBcInRvZ2dsZVNlbGZEZWFmXCIsXHJcbiAgICAgICAgICAgIFwidG9nZ2xlU2VsZk11dGVcIlxyXG4gICAgICAgICAgXVxyXG4gICAgICAgIF1cclxuICAgICAgfSxcclxuICAgICAgXCJwYXRoXCI6IHtcclxuICAgICAgICBcImFmdGVyXCI6IFtcclxuICAgICAgICAgIFwiZXhwb3J0cy5aXCIsXHJcbiAgICAgICAgICBcImV4cG9ydHMuWlBcIixcclxuICAgICAgICAgIFwiZXhwb3J0cy5kZWZhdWx0XCIsXHJcbiAgICAgICAgICBcImV4cG9ydHNcIlxyXG4gICAgICAgIF1cclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIFwiaTE4blwiOiB7XHJcbiAgICAgIFwiX19cIjogdHJ1ZSxcclxuICAgICAgXCJmaWx0ZXJcIjoge1xyXG4gICAgICAgIFwiZXhwb3J0XCI6IGZhbHNlLFxyXG4gICAgICAgIFwiaW5cIjogXCJwcm9wZXJ0aWVzXCIsXHJcbiAgICAgICAgXCJieVwiOiBbXHJcbiAgICAgICAgICBbXHJcbiAgICAgICAgICAgIFwiX3JlcXVlc3RlZExvY2FsZVwiLFxyXG4gICAgICAgICAgICBcImdldERlZmF1bHRMb2NhbGVcIlxyXG4gICAgICAgICAgXVxyXG4gICAgICAgIF1cclxuICAgICAgfSxcclxuICAgICAgXCJwYXRoXCI6IHtcclxuICAgICAgICBcImFmdGVyXCI6IFtcclxuICAgICAgICAgIFwiZXhwb3J0cy5aXCIsXHJcbiAgICAgICAgICBcImV4cG9ydHMuWlBcIixcclxuICAgICAgICAgIFwiZXhwb3J0cy5kZWZhdWx0XCIsXHJcbiAgICAgICAgICBcImV4cG9ydHNcIlxyXG4gICAgICAgIF1cclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIFwidXVpZFwiOiB7XHJcbiAgICAgIFwiX19cIjogdHJ1ZSxcclxuICAgICAgXCJmaWx0ZXJcIjoge1xyXG4gICAgICAgIFwiZXhwb3J0XCI6IGZhbHNlLFxyXG4gICAgICAgIFwiaW5cIjogXCJwcm9wZXJ0aWVzXCIsXHJcbiAgICAgICAgXCJieVwiOiBbXHJcbiAgICAgICAgICBbXHJcbiAgICAgICAgICAgIFwidjFcIixcclxuICAgICAgICAgICAgXCJ2NFwiXHJcbiAgICAgICAgICBdXHJcbiAgICAgICAgXVxyXG4gICAgICB9LFxyXG4gICAgICBcInBhdGhcIjoge1xyXG4gICAgICAgIFwiYWZ0ZXJcIjogW1xyXG4gICAgICAgICAgXCJleHBvcnRzLlpcIixcclxuICAgICAgICAgIFwiZXhwb3J0cy5aUFwiLFxyXG4gICAgICAgICAgXCJleHBvcnRzLmRlZmF1bHRcIixcclxuICAgICAgICAgIFwiZXhwb3J0c1wiXHJcbiAgICAgICAgXVxyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgXCJobGpzXCI6IHtcclxuICAgICAgXCJfX1wiOiB0cnVlLFxyXG4gICAgICBcImZpbHRlclwiOiB7XHJcbiAgICAgICAgXCJleHBvcnRcIjogZmFsc2UsXHJcbiAgICAgICAgXCJpblwiOiBcInByb3BlcnRpZXNcIixcclxuICAgICAgICBcImJ5XCI6IFtcclxuICAgICAgICAgIFtcclxuICAgICAgICAgICAgXCJoaWdobGlnaHRBbGxcIixcclxuICAgICAgICAgICAgXCJoaWdobGlnaHRcIlxyXG4gICAgICAgICAgXVxyXG4gICAgICAgIF1cclxuICAgICAgfSxcclxuICAgICAgXCJwYXRoXCI6IHtcclxuICAgICAgICBcImFmdGVyXCI6IFtcclxuICAgICAgICAgIFwiZXhwb3J0cy5aXCIsXHJcbiAgICAgICAgICBcImV4cG9ydHMuWlBcIixcclxuICAgICAgICAgIFwiZXhwb3J0cy5kZWZhdWx0XCIsXHJcbiAgICAgICAgICBcImV4cG9ydHNcIlxyXG4gICAgICAgIF1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufSIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmaW5kSW5UcmVlKFxyXG4gIHRyZWUsXHJcbiAgc2VhcmNoRmlsdGVyLFxyXG4gIHsgd2Fsa2FibGUgPSBudWxsLCBpZ25vcmUgPSBbXSwgbGltaXQgPSAxMDAgfSA9IHt9XHJcbikge1xyXG4gIGxldCBpdGVyYXRpb24gPSAwO1xyXG5cclxuICBmdW5jdGlvbiBkb1NlYXJjaCh0cmVlLCBzZWFyY2hGaWx0ZXIsIHsgd2Fsa2FibGUgPSBudWxsLCBpZ25vcmUgPSBbXSB9ID0ge30pIHtcclxuICAgIGl0ZXJhdGlvbiArPSAxO1xyXG4gICAgaWYgKGl0ZXJhdGlvbiA+IGxpbWl0KSByZXR1cm47XHJcblxyXG4gICAgaWYgKHR5cGVvZiBzZWFyY2hGaWx0ZXIgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgaWYgKHRyZWUuaGFzT3duUHJvcGVydHkoc2VhcmNoRmlsdGVyKSkgcmV0dXJuIHRyZWVbc2VhcmNoRmlsdGVyXTtcclxuICAgIH0gZWxzZSBpZiAoc2VhcmNoRmlsdGVyKHRyZWUpKSByZXR1cm4gdHJlZTtcclxuXHJcbiAgICBpZiAoIXRyZWUpIHJldHVybjtcclxuXHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0cmVlKSkge1xyXG4gICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgdHJlZSkge1xyXG4gICAgICAgIGNvbnN0IGZvdW5kID0gZG9TZWFyY2goaXRlbSwgc2VhcmNoRmlsdGVyLCB7IHdhbGthYmxlLCBpZ25vcmUgfSk7XHJcbiAgICAgICAgaWYgKGZvdW5kKSByZXR1cm4gZm91bmQ7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHRyZWUgPT09IFwib2JqZWN0XCIpIHtcclxuICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXModHJlZSkpIHtcclxuICAgICAgICBpZiAod2Fsa2FibGUgIT0gbnVsbCAmJiAhd2Fsa2FibGUuaW5jbHVkZXMoa2V5KSkgY29udGludWU7XHJcblxyXG4gICAgICAgIGlmIChpZ25vcmUuaW5jbHVkZXMoa2V5KSkgY29udGludWU7XHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICBjb25zdCBmb3VuZCA9IGRvU2VhcmNoKHRyZWVba2V5XSwgc2VhcmNoRmlsdGVyLCB7XHJcbiAgICAgICAgICAgIHdhbGthYmxlLFxyXG4gICAgICAgICAgICBpZ25vcmUsXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIGlmIChmb3VuZCkgcmV0dXJuIGZvdW5kO1xyXG4gICAgICAgIH0gY2F0Y2ggeyB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiBkb1NlYXJjaCh0cmVlLCBzZWFyY2hGaWx0ZXIsIHsgd2Fsa2FibGUsIGlnbm9yZSB9KTtcclxufTtcclxuIiwgImZ1bmN0aW9uIGJ1aWxkKHByZWZpeCA9IFwiQWNvcmRcIiwgdHlwZSwgY29sb3IpIHtcclxuICByZXR1cm4gKC4uLmlucHV0KSA9PiBjb25zb2xlW3R5cGVdKFxyXG4gICAgYCVjJHtwcmVmaXh9JWNgLFxyXG4gICAgYGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3J9OyBjb2xvcjogd2hpdGU7IGJvcmRlci1yYWRpdXM6IDRweDsgcGFkZGluZzogMHB4IDZweCAwcHggNnB4OyBmb250LXdlaWdodDogYm9sZGAsXHJcbiAgICBcIlwiLFxyXG4gICAgLi4uaW5wdXRcclxuICApO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgbG9nOiBidWlsZChcIkFjb3JkXCIsIFwibG9nXCIsIFwiIzAwZmJiMFwiKSxcclxuICBkZWJ1ZzogYnVpbGQoXCJBY29yZCBEZWJ1Z1wiLCBcImRlYnVnXCIsIFwiIzAwZmJiMFwiKSxcclxuICBpbmZvOiBidWlsZChcIkFjb3JkIEluZm9cIiwgXCJsb2dcIiwgXCIjODJhYWZmXCIpLFxyXG4gIHdhcm46IGJ1aWxkKFwiQWNvcmQgV2FyblwiLCBcIndhcm5cIiwgXCIjZGViZjE4XCIpLFxyXG4gIGVycm9yOiBidWlsZChcIkFjb3JkIEVycm9yXCIsIFwiZXJyb3JcIiwgXCIjZWY1ODU4XCIpLFxyXG4gIGJ1aWxkXHJcbn0iLCAiaW1wb3J0IGZpbmRJblRyZWUgZnJvbSBcIi4vcmF3L2ZpbmQtaW4tdHJlZS5qc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIGdldEluc3RhbmNlKG5vZGUpIHtcclxuICAgIHJldHVybiBPYmplY3QuZW50cmllcyhub2RlKS5maW5kKGkgPT4gaVswXS5zdGFydHNXaXRoKFwiX19yZWFjdEZpYmVyJFwiKSk/LlsxXTtcclxuICB9LFxyXG4gIGdldE93bmVySW5zdGFuY2Uobm9kZSkge1xyXG4gICAgbGV0IGluc3RhbmNlID0gdGhpcy5nZXRJbnN0YW5jZShub2RlKTtcclxuICAgIGZvciAobGV0IGVsID0gaW5zdGFuY2U7IGVsOyBlbCA9IGVsLnJldHVybilcclxuICAgICAgaWYgKGVsLnN0YXRlTm9kZT8uZm9yY2VVcGRhdGUpIHJldHVybiBlbC5zdGF0ZU5vZGU7XHJcbiAgfSxcclxuICBmaW5kSW5UcmVlKHRyZWUsIGZpbHRlcikge1xyXG4gICAgcmV0dXJuIGZpbmRJblRyZWUodHJlZSwgZmlsdGVyLCB7XHJcbiAgICAgIHdhbGthYmxlOiBbXCJwcm9wc1wiLCBcInN0YXRlXCIsIFwiY2hpbGRyZW5cIiwgXCJyZXR1cm5cIl1cclxuICAgIH0pO1xyXG4gIH0sXHJcbiAgZ2V0Q29tcG9uZW50cyhub2RlKSB7XHJcbiAgICBjb25zdCBpbnN0YW5jZSA9IHRoaXMuZ2V0SW5zdGFuY2Uobm9kZSk7XHJcbiAgICBjb25zdCBjb21wb25lbnRzID0gW107XHJcbiAgICBsZXQgbGFzdEluc3RhbmNlID0gaW5zdGFuY2U7XHJcbiAgICB3aGlsZSAobGFzdEluc3RhbmNlICYmIGxhc3RJbnN0YW5jZS5yZXR1cm4pIHtcclxuICAgICAgaWYgKHR5cGVvZiBsYXN0SW5zdGFuY2UucmV0dXJuLnR5cGUgPT09IFwic3RyaW5nXCIpIGJyZWFrO1xyXG4gICAgICBpZiAobGFzdEluc3RhbmNlLnJldHVybi50eXBlKSBjb21wb25lbnRzLnB1c2gobGFzdEluc3RhbmNlLnJldHVybi50eXBlKTtcclxuICAgICAgbGFzdEluc3RhbmNlID0gbGFzdEluc3RhbmNlLnJldHVybjtcclxuICAgIH1cclxuICAgIHJldHVybiBjb21wb25lbnRzO1xyXG4gIH0sXHJcbiAgZ2V0U3RhdGVOb2Rlcyhub2RlKSB7XHJcbiAgICBjb25zdCBpbnN0YW5jZSA9IHRoaXMuZ2V0SW5zdGFuY2Uobm9kZSk7XHJcbiAgICBjb25zdCBzdGF0ZU5vZGVzID0gW107XHJcbiAgICBsZXQgbGFzdEluc3RhbmNlID0gaW5zdGFuY2U7XHJcbiAgICB3aGlsZSAobGFzdEluc3RhbmNlICYmIGxhc3RJbnN0YW5jZS5yZXR1cm4pIHtcclxuICAgICAgaWYgKGxhc3RJbnN0YW5jZS5yZXR1cm4uc3RhdGVOb2RlIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIGJyZWFrO1xyXG4gICAgICBpZiAobGFzdEluc3RhbmNlLnJldHVybi5zdGF0ZU5vZGUpXHJcbiAgICAgICAgc3RhdGVOb2Rlcy5wdXNoKGxhc3RJbnN0YW5jZS5yZXR1cm4uc3RhdGVOb2RlKTtcclxuICAgICAgbGFzdEluc3RhbmNlID0gbGFzdEluc3RhbmNlLnJldHVybjtcclxuICAgIH1cclxuICAgIHJldHVybiBzdGF0ZU5vZGVzO1xyXG4gIH0sXHJcbiAgZ2V0UHJvcHMoZWwsIGZpbHRlciA9IChpKSA9PiBpLCBtYXggPSAxMDAwMCkge1xyXG4gICAgY29uc3QgaW5zdGFuY2UgPSB0aGlzLmdldEluc3RhbmNlKGVsKTtcclxuXHJcbiAgICBpZiAoIWluc3RhbmNlPy5yZXR1cm4pIHJldHVybiBudWxsO1xyXG5cclxuICAgIGZvciAoXHJcbiAgICAgIGxldCBjdXJyZW50ID0gaW5zdGFuY2U/LnJldHVybiwgaSA9IDA7XHJcbiAgICAgIGkgPiBtYXggfHwgY3VycmVudCAhPT0gbnVsbDtcclxuICAgICAgY3VycmVudCA9IGN1cnJlbnQ/LnJldHVybiwgaSsrXHJcbiAgICApIHtcclxuICAgICAgaWYgKGN1cnJlbnQ/LnBlbmRpbmdQcm9wcyAmJiBmaWx0ZXIoY3VycmVudC5wZW5kaW5nUHJvcHMpKVxyXG4gICAgICAgIHJldHVybiBjdXJyZW50LnBlbmRpbmdQcm9wcztcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9LFxyXG59IiwgImltcG9ydCBmaW5kSW5UcmVlIGZyb20gXCIuL3Jhdy9maW5kLWluLXRyZWUuanNcIjtcclxuaW1wb3J0IGxvZ2dlciBmcm9tIFwiLi9sb2dnZXIuanNcIjtcclxuaW1wb3J0IHJlYWN0IGZyb20gXCIuL3JlYWN0LmpzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgbG9nZ2VyLFxyXG4gIHJlYWN0LFxyXG4gIGZpbmRJblRyZWUsXHJcbiAgZm9ybWF0KHZhbCwgLi4uYXJncykge1xyXG4gICAgcmV0dXJuIGAke3ZhbH1gLnJlcGxhY2VBbGwoL3soXFxkKyl9L2csIChfLCBjYXApID0+IHtcclxuICAgICAgcmV0dXJuIGFyZ3NbTnVtYmVyKGNhcCldO1xyXG4gICAgfSk7XHJcbiAgfSxcclxuICBpbnRlcnZhbChjYiwgZHVyKSB7XHJcbiAgICBsZXQgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChjYiwgZHVyKTtcclxuICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xyXG4gICAgfTtcclxuICB9LFxyXG4gIHRpbWVvdXQoY2IsIGR1cikge1xyXG4gICAgbGV0IHRpbWVvdXQgPSBzZXRUaW1lb3V0KGNiLCBkdXIpO1xyXG4gICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xyXG4gICAgfTtcclxuICB9LFxyXG4gIGlmRXhpc3RzKHZhbCwgY2IpIHtcclxuICAgIGlmICh2YWwpIGNiKHZhbCk7XHJcbiAgfSxcclxuICBjb3B5VGV4dCh0ZXh0KSB7XHJcbiAgICBpZiAod2luZG93LkRpc2NvcmROYXRpdmUpIHtcclxuICAgICAgRGlzY29yZE5hdGl2ZS5jbGlwYm9hcmQuY29weSh0ZXh0KTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIG5hdmlnYXRvci5jbGlwYm9hcmQud3JpdGVUZXh0KHRleHQpLmNhdGNoKCgpID0+IHtcclxuICAgICAgY29uc3QgY29weUFyZWEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGV4dGFyZWFcIik7XHJcblxyXG4gICAgICBjb3B5QXJlYS5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcclxuICAgICAgY29weUFyZWEuc3R5bGUucG9zaXRpb24gPSBcImZpeGVkXCI7XHJcbiAgICAgIGNvcHlBcmVhLnN0eWxlLnRvcCA9IFwiMFwiO1xyXG4gICAgICBjb3B5QXJlYS5zdHlsZS5sZWZ0ID0gXCIwXCI7XHJcblxyXG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNvcHlBcmVhKTtcclxuICAgICAgY29weUFyZWEuZm9jdXMoKTtcclxuICAgICAgY29weUFyZWEuc2VsZWN0KCk7XHJcblxyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGRvY3VtZW50LmV4ZWNDb21tYW5kKFwiY29weVwiKTtcclxuICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGNvcHlBcmVhKTtcclxuICAgIH0pO1xyXG4gIH0sXHJcbn0iLCAiaW1wb3J0IHV0aWxzIGZyb20gXCIuLi8uLi91dGlscy9pbmRleC5qc1wiO1xyXG5pbXBvcnQgbG9nZ2VyIGZyb20gXCIuLi8uLi91dGlscy9sb2dnZXIuanNcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB3cmFwRmlsdGVyKGZpbHRlcikge1xyXG4gIHJldHVybiAoLi4uYXJncykgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgaWYgKGFyZ3NbMF0/LmRlZmF1bHQ/LnJlbW92ZSAmJiBhcmdzWzBdPy5kZWZhdWx0Py5zZXQgJiYgYXJnc1swXT8uZGVmYXVsdD8uY2xlYXIgJiYgYXJnc1swXT8uZGVmYXVsdD8uZ2V0ICYmICFhcmdzWzBdPy5kZWZhdWx0Py5zb3J0KSByZXR1cm4gZmFsc2U7XHJcbiAgICAgIGlmIChhcmdzWzBdLnJlbW92ZSAmJiBhcmdzWzBdLnNldCAmJiBhcmdzWzBdLmNsZWFyICYmIGFyZ3NbMF0uZ2V0ICYmICFhcmdzWzBdLnNvcnQpIHJldHVybiBmYWxzZTtcclxuICAgICAgaWYgKGFyZ3NbMF0/LmRlZmF1bHQ/LmdldFRva2VuIHx8IGFyZ3NbMF0/LmRlZmF1bHQ/LmdldEVtYWlsIHx8IGFyZ3NbMF0/LmRlZmF1bHQ/LnNob3dUb2tlbikgcmV0dXJuIGZhbHNlO1xyXG4gICAgICBpZiAoYXJnc1swXT8uZ2V0VG9rZW4gfHwgYXJnc1swXT8uZ2V0RW1haWwgfHwgYXJnc1swXT8uc2hvd1Rva2VuKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgIHJldHVybiBmaWx0ZXIoLi4uYXJncyk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyKSB7XHJcbiAgICAgIGxvZ2dlci53YXJuKFwiTW9kdWxlIGZpbHRlciB0aHJldyBhbiBleGNlcHRpb24uXCIsIGZpbHRlciwgZXJyKTtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNoZWNrTW9kdWxlU3RyaW5ncyhtLCBzdHJpbmdzLCBoYXNOb3QpIHtcclxuICBjb25zdCBjaGVjayA9IChzMSwgczIpID0+IHtcclxuICAgIHJldHVybiBoYXNOb3QgPyBzMS50b1N0cmluZygpLmluZGV4T2YoczIudG9TdHJpbmcoKSkgPT0gLTEgOiBzMS50b1N0cmluZygpLmluZGV4T2YoczIudG9TdHJpbmcoKSkgPiAtMTtcclxuICB9O1xyXG4gIHJldHVybiBzdHJpbmdzLmV2ZXJ5KGogPT4ge1xyXG4gICAgcmV0dXJuIGNoZWNrKG0/LnRvU3RyaW5nPy4oKSB8fCBcIlwiLCBqKVxyXG4gICAgICB8fCBjaGVjayhtPy5fX29yaWdpbmFsX18/LnRvU3RyaW5nPy4oKSB8fCBcIlwiLCBqKVxyXG4gICAgICB8fCBjaGVjayhtPy50eXBlPy50b1N0cmluZz8uKCkgfHwgXCJcIiwgailcclxuICAgICAgfHwgY2hlY2sobT8udHlwZT8uX19vcmlnaW5hbF9fPy50b1N0cmluZz8uKCkgfHwgXCJcIiwgailcclxuICAgICAgfHwgT2JqZWN0LmVudHJpZXMoWydmdW5jdGlvbicsICdvYmplY3QnXS5pbmNsdWRlcyh0eXBlb2YgbT8ucHJvdG90eXBlKSA/IHR5cGVvZiBtPy5wcm90b3R5cGUgOiB7fSkuZmlsdGVyKGkgPT4gaVswXT8uaW5jbHVkZXM/LihcInJlbmRlclwiKSkuc29tZShpID0+IGNoZWNrKGlbMV0/LnRvU3RyaW5nPy4oKSB8fCBcIlwiLCBqKSlcclxuICB9KTtcclxufTtcclxuZnVuY3Rpb24gY2hlY2tNb2R1bGVQcm9wcyhtLCBwcm9wZXJ0aWVzLCBoYXNOb3QpIHtcclxuICByZXR1cm4gcHJvcGVydGllcy5ldmVyeShwcm9wID0+IHtcclxuICAgIGNvbnN0IHZhbHVlID0gbVtwcm9wXT8uX19vcmlnaW5hbF9fIHx8IG1bcHJvcF07XHJcbiAgICByZXR1cm4gaGFzTm90ID8gdmFsdWUgPT09IHVuZGVmaW5lZCA6ICh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmICEodHlwZW9mIHZhbHVlID09IFwic3RyaW5nXCIgJiYgIXZhbHVlKSk7XHJcbiAgfSk7XHJcbn07XHJcbmZ1bmN0aW9uIGNoZWNrTW9kdWxlUHJvdG90eXBlcyhtLCBwcm90b1Byb3BzLCBoYXNOb3QpIHtcclxuICByZXR1cm4gbS5wcm90b3R5cGUgJiYgcHJvdG9Qcm9wcy5ldmVyeShwcm9wID0+IHtcclxuICAgIGNvbnN0IHZhbHVlID0gbS5wcm90b3R5cGVbcHJvcF07XHJcbiAgICByZXR1cm4gaGFzTm90ID8gdmFsdWUgPT09IHVuZGVmaW5lZCA6ICh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmICEodHlwZW9mIHZhbHVlID09IFwic3RyaW5nXCIgJiYgIXZhbHVlKSk7XHJcbiAgfSk7XHJcbn07XHJcblxyXG5jb25zdCB3ZWJwYWNrQ2h1bmtOYW1lID0gXCJ3ZWJwYWNrQ2h1bmtkaXNjb3JkX2FwcFwiO1xyXG5jb25zdCBwdXNoTGlzdGVuZXJzID0gbmV3IFNldCgpO1xyXG5cclxuXHJcbntcclxuICBsZXQgb2dQdXNoID0gd2luZG93W3dlYnBhY2tDaHVua05hbWVdLnB1c2g7XHJcblxyXG4gIGZ1bmN0aW9uIGhhbmRsZVB1c2goY2h1bmspIHtcclxuICAgIGNvbnN0IFssIG1vZHVsZXNdID0gY2h1bms7XHJcblxyXG4gICAgZm9yIChjb25zdCBtb2R1bGVJZCBpbiBPYmplY3Qua2V5cyhtb2R1bGVzIHx8IHt9KSkge1xyXG4gICAgICBjb25zdCBvZ01vZHVsZSA9IG1vZHVsZXNbbW9kdWxlSWRdO1xyXG5cclxuICAgICAgbW9kdWxlc1ttb2R1bGVJZF0gPSAobW9kdWxlLCBleHBvcnRzLCByZXF1aXJlKSA9PiB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIG9nTW9kdWxlLmNhbGwobnVsbCwgbW9kdWxlLCBleHBvcnRzLCByZXF1aXJlKTtcclxuXHJcbiAgICAgICAgICBwdXNoTGlzdGVuZXJzLmZvckVhY2gobGlzdGVuZXIgPT4ge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgIGxpc3RlbmVyKGV4cG9ydHMpO1xyXG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICAgIHV0aWxzLmxvZ2dlci5lcnJvcihcIlB1c2ggbGlzdGVuZXIgdGhyZXcgYW4gZXhjZXB0aW9uLlwiLCBsaXN0ZW5lciwgZXJyb3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICB1dGlscy5sb2dnZXIuZXJyb3IoXCJVbmFibGUgdG8gcGF0Y2ggcHVzaGVkIG1vZHVsZS5cIiwgZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgIE9iamVjdC5hc3NpZ24obW9kdWxlc1ttb2R1bGVJZF0sIG9nTW9kdWxlLCB7XHJcbiAgICAgICAgX19vcmlnaW5hbF9fOiBvZ01vZHVsZSxcclxuICAgICAgICB0b1N0cmluZzogKCkgPT4gb2dNb2R1bGUudG9TdHJpbmcoKSxcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG9nUHVzaC5jYWxsKHdpbmRvd1t3ZWJwYWNrQ2h1bmtOYW1lXSwgY2h1bmspO1xyXG4gIH1cclxuXHJcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvd1t3ZWJwYWNrQ2h1bmtOYW1lXSwgXCJwdXNoXCIsIHtcclxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgIGdldCgpIHsgcmV0dXJuIGhhbmRsZVB1c2g7IH0sXHJcbiAgICBzZXQodmFsdWUpIHtcclxuICAgICAgb2dQdXNoID0gdmFsdWU7XHJcblxyXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93W3RoaXMuY2h1bmtOYW1lXSwgXCJwdXNoXCIsIHtcclxuICAgICAgICB2YWx1ZTogdGhpcy5oYW5kbGVQdXNoLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgICB3cml0YWJsZTogdHJ1ZVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9KTtcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogXHJcbiAqIEBwYXJhbSB7YW55fSBmaWx0ZXIgXHJcbiAqIEBwYXJhbSB7eyBzaWduYWw6IEFib3J0U2lnbmFsLCBzZWFyY2hFeHBvcnRzOiBib29sZWFuIH19IHBhcmFtMSBcclxuICogQHJldHVybnMgXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbGF6eUZpbmQoZmlsdGVyLCB7IHNpZ25hbCA9IG51bGwsIHNlYXJjaEV4cG9ydHMgPSBmYWxzZSB9KSB7XHJcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgIGNvbnN0IGNhbmNlbCA9ICgpID0+IHB1c2hMaXN0ZW5lcnMuZGVsZXRlKGxpc3RlbmVyKTtcclxuICAgIGNvbnN0IGxpc3RlbmVyID0gKGV4cG9ydHMpID0+IHtcclxuICAgICAgaWYgKCFleHBvcnRzIHx8IGV4cG9ydHMgPT09IHdpbmRvdyB8fCBleHBvcnRzID09PSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHJldHVybjtcclxuXHJcbiAgICAgIGxldCBmb3VuZCA9IG51bGw7XHJcblxyXG4gICAgICBpZiAodHlwZW9mIGV4cG9ydHMgPT0gXCJvYmplY3RcIiAmJiBzZWFyY2hFeHBvcnRzKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gZXhwb3J0cykge1xyXG4gICAgICAgICAgbGV0IGV4cG9ydGVkID0gZXhwb3J0c1trZXldO1xyXG4gICAgICAgICAgaWYgKCFleHBvcnRlZCkgY29udGludWU7XHJcbiAgICAgICAgICBpZiAoZmlsdGVyKGV4cG9ydGVkKSkge1xyXG4gICAgICAgICAgICBmb3VuZCA9IGV4cG9ydGVkO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbGV0IHBhdGhzID0gW1xyXG4gICAgICAgICAgXCJleHBvcnRzLlpcIixcclxuICAgICAgICAgIFwiZXhwb3J0cy5aUFwiLFxyXG4gICAgICAgICAgXCJleHBvcnRzLmRlZmF1bHRcIixcclxuICAgICAgICAgIFwiZXhwb3J0c1wiLFxyXG4gICAgICAgICAgXCJcIlxyXG4gICAgICAgIF07XHJcbiAgICAgICAgZm91bmQgPSBwYXRocy5tYXAoaSA9PiB7XHJcbiAgICAgICAgICBsZXQgcGF0aGVkID0gIWkgPyBleHBvcnRzIDogXy5nZXQoZXhwb3J0cywgaSk7XHJcbiAgICAgICAgICBpZiAocGF0aGVkICYmIGZpbHRlcihwYXRoZWQpKSByZXR1cm4gcGF0aGVkO1xyXG4gICAgICAgIH0pLmZpbmQoaSA9PiBpKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKCFmb3VuZCkgcmV0dXJuO1xyXG4gICAgICBjYW5jZWwoKTtcclxuICAgICAgcmVzb2x2ZShmb3VuZCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVzaExpc3RlbmVycy5hZGQobGlzdGVuZXIpO1xyXG5cclxuICAgIHNpZ25hbD8uYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsICgpID0+IHtcclxuICAgICAgY2FuY2VsKCk7XHJcbiAgICAgIHJlc29sdmUobnVsbCk7XHJcbiAgICB9KTtcclxuICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGZpbmQocmVxLCBmaWx0ZXIsIGNvbmZpZyA9IHt9KSB7XHJcbiAgbGV0IGRlZmF1bHRFeHBvcnQgPSB0eXBlb2YgY29uZmlnLmRlZmF1bHRFeHBvcnQgIT0gXCJib29sZWFuXCIgPyBmYWxzZSA6IGNvbmZpZy5kZWZhdWx0RXhwb3J0O1xyXG4gIGxldCB1bmxvYWRlZCA9IHR5cGVvZiBjb25maWcudW5sb2FkZWQgIT0gXCJib29sZWFuXCIgPyBmYWxzZSA6IGNvbmZpZy51bmxvYWRlZDtcclxuICBsZXQgYWxsID0gdHlwZW9mIGNvbmZpZy5hbGwgIT0gXCJib29sZWFuXCIgPyBmYWxzZSA6IGNvbmZpZy5hbGw7XHJcbiAgY29uc3QgZm91bmQgPSBbXTtcclxuICBpZiAoIXVubG9hZGVkKSBmb3IgKGxldCBpIGluIHJlcS5jKSBpZiAocmVxLmMuaGFzT3duUHJvcGVydHkoaSkpIHtcclxuICAgIGxldCBtID0gcmVxLmNbaV0uZXhwb3J0cywgciA9IG51bGw7XHJcbiAgICBpZiAobSAmJiAodHlwZW9mIG0gPT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgbSA9PSBcImZ1bmN0aW9uXCIpKSB7XHJcbiAgICAgIGlmICghIShyID0gZmlsdGVyKG0sIGkpKSkge1xyXG4gICAgICAgIGlmIChhbGwpIGZvdW5kLnB1c2goZGVmYXVsdEV4cG9ydCA/IHIgOiByZXEuY1tpXSk7XHJcbiAgICAgICAgZWxzZSByZXR1cm4gZGVmYXVsdEV4cG9ydCA/IHIgOiByZXEuY1tpXTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGZvciAobGV0IGtleSBvZiBPYmplY3Qua2V5cyhtKSkgaWYgKGtleS5sZW5ndGggPCA0ICYmIG1ba2V5XSAmJiAhIShyID0gZmlsdGVyKG1ba2V5XSwgaSkpKSB7XHJcbiAgICAgICAgaWYgKGFsbCkgZm91bmQucHVzaChkZWZhdWx0RXhwb3J0ID8gciA6IHJlcS5jW2ldKTtcclxuICAgICAgICBlbHNlIHJldHVybiBkZWZhdWx0RXhwb3J0ID8gciA6IHJlcS5jW2ldO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAobSAmJiBtLl9fZXNNb2R1bGUgJiYgbS5kZWZhdWx0ICYmICh0eXBlb2YgbS5kZWZhdWx0ID09IFwib2JqZWN0XCIgfHwgdHlwZW9mIG0uZGVmYXVsdCA9PSBcImZ1bmN0aW9uXCIpKSB7XHJcbiAgICAgIGlmICghIShyID0gZmlsdGVyKG0uZGVmYXVsdCwgaSkpKSB7XHJcbiAgICAgICAgaWYgKGFsbCkgZm91bmQucHVzaChkZWZhdWx0RXhwb3J0ID8gciA6IHJlcS5jW2ldKTtcclxuICAgICAgICBlbHNlIHJldHVybiBkZWZhdWx0RXhwb3J0ID8gciA6IHJlcS5jW2ldO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYgKG0uZGVmYXVsdC50eXBlICYmICh0eXBlb2YgbS5kZWZhdWx0LnR5cGUgPT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgbS5kZWZhdWx0LnR5cGUgPT0gXCJmdW5jdGlvblwiKSAmJiAhIShyID0gZmlsdGVyKG0uZGVmYXVsdC50eXBlLCBpKSkpIHtcclxuICAgICAgICBpZiAoYWxsKSBmb3VuZC5wdXNoKGRlZmF1bHRFeHBvcnQgPyByIDogcmVxLmNbaV0pO1xyXG4gICAgICAgIGVsc2UgcmV0dXJuIGRlZmF1bHRFeHBvcnQgPyByIDogcmVxLmNbaV07XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgZm9yIChsZXQgaSBpbiByZXEubSkgaWYgKHJlcS5tLmhhc093blByb3BlcnR5KGkpKSB7XHJcbiAgICBsZXQgbSA9IHJlcS5tW2ldO1xyXG4gICAgaWYgKG0gJiYgdHlwZW9mIG0gPT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgIGlmIChyZXEuY1tpXSAmJiAhdW5sb2FkZWQgJiYgZmlsdGVyKG0sIGkpKSB7XHJcbiAgICAgICAgaWYgKGFsbCkgZm91bmQucHVzaChkZWZhdWx0RXhwb3J0ID8gcmVxLmNbaV0uZXhwb3J0cyA6IHJlcS5jW2ldKTtcclxuICAgICAgICBlbHNlIHJldHVybiBkZWZhdWx0RXhwb3J0ID8gcmVxLmNbaV0uZXhwb3J0cyA6IHJlcS5jW2ldO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICghcmVxLmNbaV0gJiYgdW5sb2FkZWQgJiYgZmlsdGVyKG0sIGkpKSB7XHJcbiAgICAgICAgY29uc3QgcmVzb2x2ZWQgPSB7fSwgcmVzb2x2ZWQyID0ge307XHJcbiAgICAgICAgbShyZXNvbHZlZCwgcmVzb2x2ZWQyLCByZXEpO1xyXG4gICAgICAgIGNvbnN0IHRydWVSZXNvbHZlZCA9IHJlc29sdmVkMiAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhyZXNvbHZlZDIgfHwge30pLmxlbmd0aCA9PSAwID8gcmVzb2x2ZWQgOiByZXNvbHZlZDI7XHJcbiAgICAgICAgaWYgKGFsbCkgZm91bmQucHVzaChkZWZhdWx0RXhwb3J0ID8gdHJ1ZVJlc29sdmVkLmV4cG9ydHMgOiB0cnVlUmVzb2x2ZWQpO1xyXG4gICAgICAgIGVsc2UgcmV0dXJuIGRlZmF1bHRFeHBvcnQgPyB0cnVlUmVzb2x2ZWQuZXhwb3J0cyA6IHRydWVSZXNvbHZlZDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICBpZiAoYWxsKSByZXR1cm4gZm91bmQ7XHJcbn07XHJcblxyXG5cclxuZnVuY3Rpb24gZmluZGVyRmluZEZ1bmN0aW9uKGVudHJpZXMsIHN0cmluZ3MpIHtcclxuICByZXR1cm4gKGVudHJpZXMuZmluZChuID0+IHtcclxuICAgIGxldCBmdW5jU3RyaW5nID0gdHlwZW9mIG5bMV0gPT0gXCJmdW5jdGlvblwiID8gKG5bMV0/Ll9fb3JpZ2luYWxfXz8udG9TdHJpbmc/LigpIHx8IG5bMV0/LnRvU3RyaW5nPy4oKSB8fCBcIlwiKSA6ICgoKSA9PiB7IHRyeSB7IHJldHVybiBKU09OLnN0cmluZ2lmeShuWzFdKSB9IGNhdGNoIChlcnIpIHsgcmV0dXJuIG5bMV0udG9TdHJpbmcoKSB9IH0pKCk7XHJcbiAgICBsZXQgcmVuZGVyRnVuY1N0cmluZyA9IG5bMV0/LnJlbmRlcj8uX19vcmlnaW5hbF9fPy50b1N0cmluZz8uKCkgfHwgblsxXT8ucmVuZGVyPy50b1N0cmluZz8uKCkgfHwgXCJcIjtcclxuICAgIHJldHVybiBzdHJpbmdzLmV2ZXJ5KHN0cmluZyA9PiBmdW5jU3RyaW5nLmluZGV4T2Yoc3RyaW5nKSAhPSAtMSB8fCByZW5kZXJGdW5jU3RyaW5nLmluZGV4T2Yoc3RyaW5nKSAhPSAtMSk7XHJcbiAgfSkpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZmluZGVyVG9GaWx0ZXIoZmluZGVyKSB7XHJcbiAgbGV0IGZvdW5kID0gKCkgPT4gZmFsc2U7XHJcbiAgaWYgKHR5cGVvZiBmaW5kZXI/LmZpbHRlciA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgZm91bmQgPSB3cmFwRmlsdGVyKGV2YWwoYCgoJCk9PnsgdHJ5IHsgcmV0dXJuICgke2ZpbmRlci5maWx0ZXJ9KTsgfSBjYXRjaCB7IHJldHVybiBmYWxzZTsgfSB9KWApKTtcclxuICB9IGVsc2UgaWYgKHR5cGVvZiBmaW5kZXI/LmZpbHRlciA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICBmb3VuZCA9IHdyYXBGaWx0ZXIoZmluZGVyLmZpbHRlcik7XHJcbiAgfSBlbHNlIHtcclxuICAgIHN3aXRjaCAoZmluZGVyLmZpbHRlci5pbikge1xyXG4gICAgICBjYXNlIFwicHJvcGVydGllc1wiOiB7XHJcbiAgICAgICAgaWYgKGZpbmRlci5maWx0ZXIuYnk/LlsxXT8ubGVuZ3RoKSB7XHJcbiAgICAgICAgICBmb3VuZCA9IHdyYXBGaWx0ZXIoKG0pID0+IGNoZWNrTW9kdWxlUHJvcHMobSwgZmluZGVyLmZpbHRlci5ieT8uWzBdIHx8IFtdKSAmJiBjaGVja01vZHVsZVByb3BzKG0sIGZpbmRlci5maWx0ZXIuYnk/LlsxXSB8fCBbXSwgdHJ1ZSkpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBmb3VuZCA9IHdyYXBGaWx0ZXIoKG0pID0+IGNoZWNrTW9kdWxlUHJvcHMobSwgZmluZGVyLmZpbHRlci5ieT8uWzBdIHx8IFtdKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgXCJwcm90b3R5cGVzXCI6IHtcclxuICAgICAgICBpZiAoZmluZGVyLmZpbHRlci5ieT8uWzFdPy5sZW5ndGgpIHtcclxuICAgICAgICAgIGZvdW5kID0gd3JhcEZpbHRlcigobSkgPT4gY2hlY2tNb2R1bGVQcm90b3R5cGVzKG0sIGZpbmRlci5maWx0ZXIuYnk/LlswXSB8fCBbXSkgJiYgY2hlY2tNb2R1bGVQcm90b3R5cGVzKG0sIGZpbmRlci5maWx0ZXIuYnk/LlsxXSB8fCBbXSwgdHJ1ZSkpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBmb3VuZCA9IHdyYXBGaWx0ZXIoKG0pID0+IGNoZWNrTW9kdWxlUHJvdG90eXBlcyhtLCBmaW5kZXIuZmlsdGVyLmJ5Py5bMF0gfHwgW10pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSBcInN0cmluZ3NcIjoge1xyXG4gICAgICAgIGlmIChmaW5kZXIuZmlsdGVyLmJ5Py5bMV0/Lmxlbmd0aCkge1xyXG4gICAgICAgICAgZm91bmQgPSB3cmFwRmlsdGVyKChtKSA9PiBjaGVja01vZHVsZVN0cmluZ3MobSwgZmluZGVyLmZpbHRlci5ieT8uWzBdIHx8IFtdKSAmJiBjaGVja01vZHVsZVN0cmluZ3MobSwgZmluZGVyLmZpbHRlci5ieT8uWzFdIHx8IFtdLCB0cnVlKSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGZvdW5kID0gd3JhcEZpbHRlcigobSkgPT4gY2hlY2tNb2R1bGVTdHJpbmdzKG0sIGZpbmRlci5maWx0ZXIuYnk/LlswXSB8fCBbXSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gZm91bmQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZpbmRlck1hcChfX29yaWdpbmFsX18sIG1hcCkge1xyXG4gIGxldCBfX21hcHBlZF9fID0ge307XHJcblxyXG4gIGxldCB0ZW1wID0ge1xyXG4gICAgX19vcmlnaW5hbF9fLFxyXG4gICAgX19tYXBwZWRfXyxcclxuICAgIC4uLl9fb3JpZ2luYWxfX1xyXG4gIH07XHJcblxyXG4gIE9iamVjdC5lbnRyaWVzKG1hcCkuZm9yRWFjaCgoW2tleSwgc3RyaW5nc10pID0+IHtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0ZW1wLCBrZXksIHtcclxuICAgICAgZ2V0KCkge1xyXG4gICAgICAgIGlmIChfX21hcHBlZF9fW2tleV0pIHJldHVybiBfX29yaWdpbmFsX19bX19tYXBwZWRfX1trZXldXTtcclxuXHJcbiAgICAgICAgbGV0IGZvdW5kRnVuYyA9IGZpbmRlckZpbmRGdW5jdGlvbihPYmplY3QuZW50cmllcyhfX29yaWdpbmFsX18gfHwge30pLCBtYXBba2V5XSB8fCBbXSk7XHJcbiAgICAgICAgaWYgKCFmb3VuZEZ1bmM/Lmxlbmd0aCkgcmV0dXJuO1xyXG5cclxuICAgICAgICBfX21hcHBlZF9fW2tleV0gPSBmb3VuZEZ1bmNbMF07XHJcbiAgICAgICAgcmV0dXJuIGZvdW5kRnVuY1sxXTtcclxuICAgICAgfVxyXG4gICAgfSlcclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIHRlbXA7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBmaW5kQnlGaW5kZXIocmVxLCBmaW5kZXIgPSB7fSkge1xyXG4gIGNvbnN0IGRlZmF1bHRFeHBvcnQgPSAhIWZpbmRlcj8uZmlsdGVyPy5leHBvcnQ7XHJcbiAgbGV0IGZvdW5kID0gZmluZChyZXEsIGZpbmRlclRvRmlsdGVyKGZpbmRlciksIHsgZGVmYXVsdEV4cG9ydCB9KTtcclxuXHJcbiAgaWYgKCFmb3VuZCkgcmV0dXJuIG51bGw7XHJcblxyXG4gIGlmIChmaW5kZXIucGF0aD8uYmVmb3JlKSBmb3VuZCA9IChBcnJheS5pc0FycmF5KGZpbmRlci5wYXRoLmJlZm9yZSkgPyBmaW5kZXIucGF0aC5iZWZvcmUubWFwKGkgPT4gXy5nZXQoZm91bmQsIGkpKS5maW5kKGkgPT4gaSkgOiBfLmdldChmb3VuZCwgZmluZGVyLnBhdGguYmVmb3JlKSkgfHwgZm91bmQ7XHJcbiAgaWYgKGZpbmRlci5hc3NpZ24pIGZvdW5kID0gT2JqZWN0LmFzc2lnbih7fSwgZm91bmQpO1xyXG5cclxuICBpZiAoIWZvdW5kKSByZXR1cm4gbnVsbDtcclxuXHJcbiAgaWYgKGZpbmRlci5tYXApIGZvdW5kID0gZmluZGVyTWFwKGZvdW5kLCBmaW5kZXIubWFwKTtcclxuXHJcbiAgaWYgKGZpbmRlci5wYXRoPy5hZnRlcikgZm91bmQgPSAoQXJyYXkuaXNBcnJheShmaW5kZXIucGF0aC5hZnRlcikgPyBmaW5kZXIucGF0aC5hZnRlci5tYXAoaSA9PiBfLmdldChmb3VuZCwgaSkpLmZpbmQoaSA9PiBpKSA6IF8uZ2V0KGZvdW5kLCBmaW5kZXIucGF0aC5hZnRlcikpIHx8IGZvdW5kO1xyXG5cclxuICByZXR1cm4gZm91bmQ7XHJcbn1cclxuXHJcblxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGxhenlGaW5kQnlGaW5kZXIoZmluZGVyID0ge30pIHtcclxuICBsZXQgZm91bmQgPSBhd2FpdCBsYXp5RmluZChmaW5kZXJUb0ZpbHRlcihmaW5kZXIpLCB7IHNlYXJjaEV4cG9ydHM6IGZhbHNlIH0pO1xyXG5cclxuICBpZiAoIWZvdW5kKSByZXR1cm4gbnVsbDtcclxuXHJcbiAgaWYgKGZpbmRlci5wYXRoPy5iZWZvcmUpIGZvdW5kID0gKEFycmF5LmlzQXJyYXkoZmluZGVyLnBhdGguYmVmb3JlKSA/IGZpbmRlci5wYXRoLmJlZm9yZS5tYXAoaSA9PiBfLmdldChmb3VuZCwgaSkpLmZpbmQoaSA9PiBpKSA6IF8uZ2V0KGZvdW5kLCBmaW5kZXIucGF0aC5iZWZvcmUpKSB8fCBmb3VuZDtcclxuICBpZiAoZmluZGVyLmFzc2lnbikgZm91bmQgPSBPYmplY3QuYXNzaWduKHt9LCBmb3VuZCk7XHJcblxyXG4gIGlmICghZm91bmQpIHJldHVybiBudWxsO1xyXG5cclxuICBpZiAoZmluZGVyLm1hcCkgZm91bmQgPSBmaW5kZXJNYXAoZm91bmQsIGZpbmRlci5tYXApO1xyXG5cclxuICBpZiAoZmluZGVyLnBhdGg/LmFmdGVyKSBmb3VuZCA9IChBcnJheS5pc0FycmF5KGZpbmRlci5wYXRoLmFmdGVyKSA/IGZpbmRlci5wYXRoLmFmdGVyLm1hcChpID0+IF8uZ2V0KGZvdW5kLCBpKSkuZmluZChpID0+IGkpIDogXy5nZXQoZm91bmQsIGZpbmRlci5wYXRoLmFmdGVyKSkgfHwgZm91bmQ7XHJcblxyXG4gIHJldHVybiBmb3VuZDtcclxufSIsICJpbXBvcnQgKiBhcyBjb21wbGV4RmluZGVyIGZyb20gXCIuL3Jhdy9jb21wbGV4LWZpbmRlci5qc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIF9fY2FjaGVfXzoge30sXHJcbiAgZ2V0IHJlcSgpIHtcclxuICAgIGlmICh0aGlzLl9fY2FjaGVfXy5yZXEpIHJldHVybiB0aGlzLl9fY2FjaGVfXy5yZXE7XHJcbiAgICBsZXQgcmVxSWQgPSBgQWNvcmRXZWJwYWNrTW9kdWxlcyR7RGF0ZS5ub3coKX1gO1xyXG4gICAgY29uc3QgcmVxID0gd2luZG93LndlYnBhY2tDaHVua2Rpc2NvcmRfYXBwLnB1c2goW1tyZXFJZF0sIHt9LCByZXEgPT4gcmVxXSk7XHJcbiAgICBkZWxldGUgcmVxLm1bcmVxSWRdO1xyXG4gICAgZGVsZXRlIHJlcS5jW3JlcUlkXTtcclxuICAgIHdpbmRvdy53ZWJwYWNrQ2h1bmtkaXNjb3JkX2FwcC5wb3AoKTtcclxuICAgIHRoaXMuX19jYWNoZV9fLl9yZXEgPSByZXE7XHJcbiAgICByZXR1cm4gcmVxO1xyXG4gIH0sXHJcbiAgZmluZChmaWx0ZXIsIGNvbmZpZyA9IHt9KSB7XHJcbiAgICByZXR1cm4gY29tcGxleEZpbmRlci5maW5kKHRoaXMucmVxLCBjb21wbGV4RmluZGVyLndyYXBGaWx0ZXIoZmlsdGVyKSwgY29uZmlnKTtcclxuICB9LFxyXG4gIGxhenlGaW5kKGZpbHRlciwgY29uZmlnID0ge30pIHtcclxuICAgIHJldHVybiBjb21wbGV4RmluZGVyLmxhenlGaW5kKGNvbXBsZXhGaW5kZXIud3JhcEZpbHRlcihmaWx0ZXIpLCBjb25maWcpO1xyXG4gIH0sXHJcbiAgbGF6eUZpbmRCeUZpbmRlcihmaW5kZXIpIHtcclxuICAgIHJldHVybiBjb21wbGV4RmluZGVyLmxhenlGaW5kQnlGaW5kZXIoZmluZGVyKTtcclxuICB9LFxyXG4gIGZpbHRlcihmaWx0ZXIsIGNvbmZpZyA9IHt9KSB7XHJcbiAgICByZXR1cm4gY29tcGxleEZpbmRlci5maW5kKHRoaXMucmVxLCBjb21wbGV4RmluZGVyLndyYXBGaWx0ZXIoZmlsdGVyKSwgeyAuLi5jb25maWcsIGFsbDogdHJ1ZSB9KTtcclxuICB9LFxyXG4gIGZpbmRCeUZpbmRlcihmaW5kZXIpIHtcclxuICAgIHJldHVybiBjb21wbGV4RmluZGVyLmZpbmRCeUZpbmRlcih0aGlzLnJlcSwgZmluZGVyKTtcclxuICB9LFxyXG4gIGZpbmRCeVByb3BlcnRpZXMoLi4ucHJvcHMpIHtcclxuICAgIHJldHVybiB0aGlzLmZpbmRCeUZpbmRlcih7XHJcbiAgICAgIGZpbHRlcjoge1xyXG4gICAgICAgIGV4cG9ydDogZmFsc2UsXHJcbiAgICAgICAgaW46IFwicHJvcGVydGllc1wiLFxyXG4gICAgICAgIGJ5OiBbcHJvcHNdXHJcbiAgICAgIH0sXHJcbiAgICAgIHBhdGg6IHtcclxuICAgICAgICBiZWZvcmU6IFtcclxuICAgICAgICAgIFwiZXhwb3J0cy5aXCIsXHJcbiAgICAgICAgICBcImV4cG9ydHMuWlBcIixcclxuICAgICAgICAgIFwiZXhwb3J0cy5kZWZhdWx0XCIsXHJcbiAgICAgICAgICBcImV4cG9ydHNcIlxyXG4gICAgICAgIF1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfSxcclxuICBmaW5kQnlQcm90b3R5cGVzKC4uLnByb3BzKSB7XHJcbiAgICByZXR1cm4gdGhpcy5maW5kQnlGaW5kZXIoe1xyXG4gICAgICBmaWx0ZXI6IHtcclxuICAgICAgICBleHBvcnQ6IGZhbHNlLFxyXG4gICAgICAgIGluOiBcInByb3BlcnRpZXNcIixcclxuICAgICAgICBieTogW3Byb3BzXVxyXG4gICAgICB9LFxyXG4gICAgICBwYXRoOiB7XHJcbiAgICAgICAgYmVmb3JlOiBbXHJcbiAgICAgICAgICBcImV4cG9ydHMuWlwiLFxyXG4gICAgICAgICAgXCJleHBvcnRzLlpQXCIsXHJcbiAgICAgICAgICBcImV4cG9ydHMuZGVmYXVsdFwiLFxyXG4gICAgICAgICAgXCJleHBvcnRzXCJcclxuICAgICAgICBdXHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH0sXHJcbiAgZmluZEJ5U3RyaW5ncyguLi5wcm9wcykge1xyXG4gICAgcmV0dXJuIHRoaXMuZmluZEJ5RmluZGVyKHtcclxuICAgICAgZmlsdGVyOiB7XHJcbiAgICAgICAgZXhwb3J0OiBmYWxzZSxcclxuICAgICAgICBpbjogXCJwcm9wZXJ0aWVzXCIsXHJcbiAgICAgICAgYnk6IFtwcm9wc11cclxuICAgICAgfSxcclxuICAgICAgcGF0aDoge1xyXG4gICAgICAgIGJlZm9yZTogW1xyXG4gICAgICAgICAgXCJleHBvcnRzLlpcIixcclxuICAgICAgICAgIFwiZXhwb3J0cy5aUFwiLFxyXG4gICAgICAgICAgXCJleHBvcnRzLmRlZmF1bHRcIixcclxuICAgICAgICAgIFwiZXhwb3J0c1wiXHJcbiAgICAgICAgXVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9LFxyXG59OyIsICJpbXBvcnQgY29tbW9uRGF0YSBmcm9tICcuLi8uLi9kYXRhL2NvbW1vbi5qc29uJztcclxuaW1wb3J0IHdlYnBhY2sgZnJvbSAnLi93ZWJwYWNrLmpzJztcclxuXHJcblxyXG5mdW5jdGlvbiBtYXBPYmplY3QodGVtcCwgaW5wKSB7XHJcbiAgaWYgKCF0ZW1wPy5fX2NhY2hlX18pIHRlbXAuX19jYWNoZV9fID0ge307XHJcbiAgZm9yIChjb25zdCBrZXkgaW4gaW5wKSB7XHJcbiAgICBpZiAoaW5wPy5ba2V5XT8uX18gPT09IHRydWUpIHtcclxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRlbXAsIGtleSwge1xyXG4gICAgICAgIGdldCgpIHtcclxuICAgICAgICAgIGlmICh0ZW1wLl9fY2FjaGVfX1trZXldKSByZXR1cm4gdGVtcC5fX2NhY2hlX19ba2V5XTtcclxuICAgICAgICAgIHJldHVybiB0ZW1wLl9fY2FjaGVfX1trZXldID0gd2VicGFjay5maW5kQnlGaW5kZXIoaW5wW2tleV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRlbXBba2V5XSA9IHt9O1xyXG4gICAgICBtYXBPYmplY3QodGVtcFtrZXldLCBpbnBba2V5XSk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5cclxubGV0IGNvbW1vbkFQSSA9IHsgX19jYWNoZV9fOiB7fSB9O1xyXG5tYXBPYmplY3QoY29tbW9uQVBJLCBjb21tb25EYXRhLmNvbW1vbik7XHJcbntcclxuICBsZXQgcGF0aHMgPSBbXHJcbiAgICBcImV4cG9ydHMuWlwiLFxyXG4gICAgXCJleHBvcnRzLlpQXCIsXHJcbiAgICBcImV4cG9ydHMuZGVmYXVsdFwiLFxyXG4gICAgXCJleHBvcnRzXCJcclxuICBdO1xyXG4gIHdlYnBhY2suZmlsdGVyKChpKSA9PiBpPy5nZXROYW1lPy4oKT8uZW5kc1dpdGg/LihcIlN0b3JlXCIpLCB7IGRlZmF1bHRFeHBvcnQ6IGZhbHNlIH0pLmZvckVhY2goKG0pID0+IHtcclxuICAgIGxldCBvYmogPSBwYXRocy5tYXAocGF0aCA9PiBfLmdldChtLCBwYXRoKSkuZmluZChpID0+IGkpO1xyXG4gICAgaWYgKCFvYmopIHJldHVybjtcclxuICAgIGxldCBuYW1lID0gb2JqPy5nZXROYW1lPy4oKTtcclxuICAgIGlmICghbmFtZSkgcmV0dXJuO1xyXG4gICAgaWYgKGNvbW1vbkFQSVtuYW1lXSkgcmV0dXJuO1xyXG5cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb21tb25BUEksIG5hbWUsIHtcclxuICAgICAgZ2V0KCkge1xyXG4gICAgICAgIGlmIChjb21tb25BUEkuX19jYWNoZV9fW25hbWVdKSByZXR1cm4gY29tbW9uQVBJLl9fY2FjaGVfX1tuYW1lXTtcclxuICAgICAgICByZXR1cm4gY29tbW9uQVBJLl9fY2FjaGVfX1tuYW1lXSA9IG9iajtcclxuICAgICAgfVxyXG4gICAgfSlcclxuICB9KVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb21tb25BUEk7IiwgImltcG9ydCBjb21tb24gZnJvbSBcIi4vY29tbW9uLmpzXCI7XHJcbmltcG9ydCB3ZWJwYWNrIGZyb20gXCIuL3dlYnBhY2suanNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICBjb21tb24sXHJcbiAgd2VicGFjayxcclxuICByZXF1aXJlOiBnbG9iYWxUaGlzW1wiPFBSRUxPQURfS0VZPlwiXS5yZXF1aXJlXHJcbn0iLCAibGV0IGRldk1vZGVFbmFibGVkID0gZmFsc2U7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgZ2V0IGVuYWJsZWQoKSB7XHJcbiAgICByZXR1cm4gZGV2TW9kZUVuYWJsZWQ7XHJcbiAgfSxcclxuICBzZXQgZW5hYmxlZCh2YWx1ZSkge1xyXG4gICAgaWYgKCFnbG9iYWxUaGlzW1wiPFBSRUxPQURfS0VZPlwiXS5pc0RldlRvb2xzT3BlbigpKSB0aHJvdyBuZXcgRXJyb3IoXCJEZXYgbW9kZSBzdGF0dXMgY2FuIG9ubHkgYmUgbW9kaWZpZWQgd2hlbiBEZXZUb29scyBpcyBvcGVuIVwiKTtcclxuICAgIGRldk1vZGVFbmFibGVkID0gdmFsdWU7XHJcbiAgfVxyXG59IiwgImV4cG9ydCBjbGFzcyBCYXNpY0V2ZW50RW1pdHRlciB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAvKiogQHR5cGUge01hcDxzdHJpbmcsIE1hcDwoLi4uYXJnczogYW55W10pPT52b2lkLCB7b25jZTogYm9vbGVhbn0+Pn0gKi9cclxuICAgIHRoaXMubGlzdGVuZXJzID0gbmV3IE1hcCgpO1xyXG4gIH1cclxuXHJcbiAgX3ByZXBhcmVMaXN0ZW5lcnNNYXAoZXZlbnROYW1lKSB7XHJcbiAgICBpZiAoIXRoaXMubGlzdGVuZXJzLmhhcyhldmVudE5hbWUpKVxyXG4gICAgICB0aGlzLmxpc3RlbmVycy5zZXQoZXZlbnROYW1lLCBuZXcgTWFwKCkpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZVxyXG4gICAqIEBwYXJhbSB7KC4uLmFyZ3M6IGFueVtdKT0+dm9pZH0gbGlzdGVuZXJcclxuICAgKi9cclxuICBvbihldmVudE5hbWUsIGxpc3RlbmVyKSB7XHJcbiAgICB0aGlzLl9wcmVwYXJlTGlzdGVuZXJzTWFwKGV2ZW50TmFtZSk7XHJcbiAgICB0aGlzLmxpc3RlbmVycy5nZXQoZXZlbnROYW1lKS5zZXQobGlzdGVuZXIsIHsgb25jZTogZmFsc2UgfSk7XHJcbiAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICB0aGlzLmxpc3RlbmVycy5nZXQoZXZlbnROYW1lKS5kZWxldGUobGlzdGVuZXIpO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWVcclxuICAgKiBAcGFyYW0geyguLi5hcmdzOiBhbnlbXSk9PnZvaWR9IGxpc3RlbmVyXHJcbiAgICovXHJcbiAgb25jZShldmVudE5hbWUsIGxpc3RlbmVyKSB7XHJcbiAgICB0aGlzLl9wcmVwYXJlTGlzdGVuZXJzTWFwKGV2ZW50TmFtZSk7XHJcbiAgICB0aGlzLmxpc3RlbmVycy5nZXQoZXZlbnROYW1lKT8uc2V0KGxpc3RlbmVyLCB7IG9uY2U6IHRydWUgfSk7XHJcbiAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICB0aGlzLmxpc3RlbmVycy5nZXQoZXZlbnROYW1lKS5kZWxldGUobGlzdGVuZXIpO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nP30gZXZlbnROYW1lXHJcbiAgICogQHBhcmFtIHsoKC4uLmFyZ3M6IGFueVtdKT0+dm9pZCk/fSBsaXN0ZW5lclxyXG4gICAqL1xyXG4gIG9mZihldmVudE5hbWUsIGxpc3RlbmVyKSB7XHJcbiAgICBpZiAoIWV2ZW50TmFtZSkgcmV0dXJuICh0aGlzLmxpc3RlbmVycyA9IG5ldyBNYXAoKSk7XHJcbiAgICBpZiAoIWxpc3RlbmVyKSByZXR1cm4gdGhpcy5saXN0ZW5lcnM/LmRlbGV0ZShldmVudE5hbWUpO1xyXG4gICAgdGhpcy5saXN0ZW5lcnMuZ2V0KGV2ZW50TmFtZSk/LmRlbGV0ZShsaXN0ZW5lcik7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lXHJcbiAgICogQHBhcmFtICB7Li4uYW55fSBhcmdzXHJcbiAgICovXHJcbiAgZW1pdChldmVudE5hbWUsIC4uLmFyZ3MpIHtcclxuICAgIGlmICghdGhpcy5saXN0ZW5lcnMuaGFzKGV2ZW50TmFtZSkpIHJldHVybjtcclxuICAgIGxldCBldmVudE1hcCA9IHRoaXMubGlzdGVuZXJzLmdldChldmVudE5hbWUpO1xyXG4gICAgZXZlbnRNYXAuZm9yRWFjaCgoeyBvbmNlIH0sIGxpc3RlbmVyKSA9PiB7XHJcbiAgICAgIGlmIChvbmNlKSBldmVudE1hcD8uZGVsZXRlKGxpc3RlbmVyKTtcclxuICAgICAgbGlzdGVuZXIoLi4uYXJncyk7XHJcbiAgICB9KTtcclxuICB9XHJcbn07XHJcbiIsICJpbXBvcnQgbW9kdWxlcyBmcm9tIFwiLi4vbW9kdWxlcy9pbmRleC5qc1wiXHJcbmltcG9ydCB1dGlscyBmcm9tIFwiLi4vdXRpbHMvaW5kZXguanNcIjtcclxuXHJcbmNvbnN0IEJBU0VfVVJMID0gXCJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vQWNvcmRQbHVnaW4vaTE4bi9tYWluXCI7XHJcbmNvbnN0IG5vU3RvcmUgPSB7IGNhY2hlOiBcIm5vLXN0b3JlXCIgfTtcclxuXHJcblxyXG5jb25zdCBvdXQgPSB7XHJcbiAgX19jYWNoZV9fOiB7XHJcbiAgICBsb2NhbGVJZHM6IFtdLFxyXG4gICAgbG9jYWxpemF0aW9uczoge31cclxuICB9LFxyXG4gIGdldCBsb2NhbGUoKSB7XHJcbiAgICByZXR1cm4gbW9kdWxlcy5jb21tb24uaTE4bi5fcmVxdWVzdGVkTG9jYWxlO1xyXG4gIH0sXHJcbiAgZ2V0KGtleSkge1xyXG4gICAgY2hlY2soKTtcclxuICAgIHJldHVybiBvdXQuX19jYWNoZV9fLmxvY2FsaXphdGlvbnNbb3V0LmxvY2FsZV0/LltrZXldXHJcbiAgICAgIHx8IG91dC5fX2NhY2hlX18ubG9jYWxpemF0aW9ucy5kZWZhdWx0Py5ba2V5XVxyXG4gICAgICB8fCBtb2R1bGVzLmNvbW1vbi5pMThuLk1lc3NhZ2VzW2tleV1cclxuICAgICAgfHwga2V5O1xyXG4gIH0sXHJcbiAgbWVzc2FnZXM6IG5ldyBQcm94eSh7fSwge1xyXG4gICAgZ2V0KF8sIHByb3ApIHtcclxuICAgICAgcmV0dXJuIG91dC5nZXQocHJvcCk7XHJcbiAgICB9XHJcbiAgfSksXHJcbiAgbG9jYWxpemUoc3RyKSB7XHJcbiAgICBpZiAodHlwZW9mIHN0ciA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIHN0cjtcclxuICAgIHJldHVybiBzdHI/LltvdXQubG9jYWxlXVxyXG4gICAgICB8fCBzdHI/LmRlZmF1bHRcclxuICAgICAgfHwgT2JqZWN0LnZhbHVlcyhzdHIpWzBdO1xyXG4gIH0sXHJcbiAgZm9ybWF0KGtleSwgLi4uYXJncykge1xyXG4gICAgcmV0dXJuIHV0aWxzLmZvcm1hdChvdXQuZ2V0KGtleSksIC4uLmFyZ3MpO1xyXG4gIH1cclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gY2hlY2soKSB7XHJcbiAgY29uc3QgbG9jYWxlID0gb3V0LmxvY2FsZTtcclxuICBpZiAoIW91dC5fX2NhY2hlX18ubG9jYWxlSWRzLmxlbmd0aCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgb3V0Ll9fY2FjaGVfXy5sb2NhbGVJZHMgPSBhd2FpdCAoYXdhaXQgZmV0Y2goYCR7QkFTRV9VUkx9L2xvY2FsZXMuanNvbmAsIG5vU3RvcmUpKS5qc29uKCk7XHJcbiAgICB9IGNhdGNoIHsgfVxyXG4gICAgdHJ5IHtcclxuICAgICAgb3V0Ll9fY2FjaGVfXy5sb2NhbGl6YXRpb25zLmRlZmF1bHQgPSBhd2FpdCAoYXdhaXQgZmV0Y2goYCR7QkFTRV9VUkx9L2RlZmF1bHQuanNvbmAsIG5vU3RvcmUpKS5qc29uKCk7XHJcbiAgICB9IGNhdGNoIHsgfVxyXG4gIH1cclxuICBpZiAoXHJcbiAgICBvdXQuX19jYWNoZV9fLmxvY2FsZUlkcy5pbmNsdWRlcyhsb2NhbGUpXHJcbiAgICAmJiAhb3V0Ll9fY2FjaGVfXy5sb2NhbGl6YXRpb25zPy5bbG9jYWxlXVxyXG4gICkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgb3V0Ll9fY2FjaGVfXy5sb2NhbGl6YXRpb25zW2xvY2FsZV0gPSBhd2FpdCAoYXdhaXQgZmV0Y2goYCR7QkFTRV9VUkx9LyR7bG9jYWxlfS5qc29uYCwgbm9TdG9yZSkpLmpzb24oKTtcclxuICAgIH0gY2F0Y2ggeyB9O1xyXG4gIH1cclxufVxyXG5cclxuY2hlY2soKTtcclxuZXhwb3J0IGRlZmF1bHQgb3V0OyIsICJpbXBvcnQgKiBhcyBuZXN0cyBmcm9tIFwibmVzdHNcIjtcclxuaW1wb3J0ICogYXMgaWRiS2V5dmFsIGZyb20gXCJpZGIta2V5dmFsXCI7XHJcbmltcG9ydCB7IGRlQ3ljbGVkLCByZXZpdmUgfSBmcm9tIFwiLi4vLi4vbGliL2pzb24tZGVjeWNsZWRcIjtcclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIGFzeW5jIGNyZWF0ZVBlcnNpc3ROZXN0KHN1ZmZpeCkge1xyXG4gICAgbGV0IGNhY2hlZCA9IGF3YWl0IGlkYktleXZhbC5nZXQoYEFjb3JkU3RvcmU7JHtzdWZmaXh9YCk7XHJcbiAgICBpZiAodHlwZW9mIGNhY2hlZCA9PSBcInN0cmluZ1wiKSBjYWNoZWQgPSByZXZpdmUoY2FjaGVkKTtcclxuICAgIGNvbnN0IG5lc3QgPSBuZXN0cy5tYWtlKGNhY2hlZCA/PyB7fSk7XHJcblxyXG4gICAgY29uc3Qgc2F2ZSA9ICgpID0+IHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBpZGJLZXl2YWwuc2V0KGBBY29yZFN0b3JlOyR7c3VmZml4fWAsIGRlQ3ljbGVkKHsgLi4ubmVzdC5naG9zdCB9KSk7XHJcbiAgICAgIH0gY2F0Y2gge1xyXG4gICAgICAgIGlkYktleXZhbC5zZXQoYEFjb3JkU3RvcmU7JHtzdWZmaXh9YCwgZGVDeWNsZWQoe30pKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG5lc3Qub24obmVzdHMuRXZlbnRzLlNFVCwgc2F2ZSk7XHJcbiAgICBuZXN0Lm9uKG5lc3RzLkV2ZW50cy5VUERBVEUsIHNhdmUpO1xyXG4gICAgbmVzdC5vbihuZXN0cy5FdmVudHMuREVMRVRFLCBzYXZlKTtcclxuXHJcbiAgICByZXR1cm4gbmVzdDtcclxuICB9XHJcbn0iLCAiZnVuY3Rpb24gcHJvbWlzaWZ5UmVxdWVzdChyZXF1ZXN0KSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZSAtIGZpbGUgc2l6ZSBoYWNrc1xuICAgICAgICByZXF1ZXN0Lm9uY29tcGxldGUgPSByZXF1ZXN0Lm9uc3VjY2VzcyA9ICgpID0+IHJlc29sdmUocmVxdWVzdC5yZXN1bHQpO1xuICAgICAgICAvLyBAdHMtaWdub3JlIC0gZmlsZSBzaXplIGhhY2tzXG4gICAgICAgIHJlcXVlc3Qub25hYm9ydCA9IHJlcXVlc3Qub25lcnJvciA9ICgpID0+IHJlamVjdChyZXF1ZXN0LmVycm9yKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVN0b3JlKGRiTmFtZSwgc3RvcmVOYW1lKSB7XG4gICAgY29uc3QgcmVxdWVzdCA9IGluZGV4ZWREQi5vcGVuKGRiTmFtZSk7XG4gICAgcmVxdWVzdC5vbnVwZ3JhZGVuZWVkZWQgPSAoKSA9PiByZXF1ZXN0LnJlc3VsdC5jcmVhdGVPYmplY3RTdG9yZShzdG9yZU5hbWUpO1xuICAgIGNvbnN0IGRicCA9IHByb21pc2lmeVJlcXVlc3QocmVxdWVzdCk7XG4gICAgcmV0dXJuICh0eE1vZGUsIGNhbGxiYWNrKSA9PiBkYnAudGhlbigoZGIpID0+IGNhbGxiYWNrKGRiLnRyYW5zYWN0aW9uKHN0b3JlTmFtZSwgdHhNb2RlKS5vYmplY3RTdG9yZShzdG9yZU5hbWUpKSk7XG59XG5sZXQgZGVmYXVsdEdldFN0b3JlRnVuYztcbmZ1bmN0aW9uIGRlZmF1bHRHZXRTdG9yZSgpIHtcbiAgICBpZiAoIWRlZmF1bHRHZXRTdG9yZUZ1bmMpIHtcbiAgICAgICAgZGVmYXVsdEdldFN0b3JlRnVuYyA9IGNyZWF0ZVN0b3JlKCdrZXl2YWwtc3RvcmUnLCAna2V5dmFsJyk7XG4gICAgfVxuICAgIHJldHVybiBkZWZhdWx0R2V0U3RvcmVGdW5jO1xufVxuLyoqXG4gKiBHZXQgYSB2YWx1ZSBieSBpdHMga2V5LlxuICpcbiAqIEBwYXJhbSBrZXlcbiAqIEBwYXJhbSBjdXN0b21TdG9yZSBNZXRob2QgdG8gZ2V0IGEgY3VzdG9tIHN0b3JlLiBVc2Ugd2l0aCBjYXV0aW9uIChzZWUgdGhlIGRvY3MpLlxuICovXG5mdW5jdGlvbiBnZXQoa2V5LCBjdXN0b21TdG9yZSA9IGRlZmF1bHRHZXRTdG9yZSgpKSB7XG4gICAgcmV0dXJuIGN1c3RvbVN0b3JlKCdyZWFkb25seScsIChzdG9yZSkgPT4gcHJvbWlzaWZ5UmVxdWVzdChzdG9yZS5nZXQoa2V5KSkpO1xufVxuLyoqXG4gKiBTZXQgYSB2YWx1ZSB3aXRoIGEga2V5LlxuICpcbiAqIEBwYXJhbSBrZXlcbiAqIEBwYXJhbSB2YWx1ZVxuICogQHBhcmFtIGN1c3RvbVN0b3JlIE1ldGhvZCB0byBnZXQgYSBjdXN0b20gc3RvcmUuIFVzZSB3aXRoIGNhdXRpb24gKHNlZSB0aGUgZG9jcykuXG4gKi9cbmZ1bmN0aW9uIHNldChrZXksIHZhbHVlLCBjdXN0b21TdG9yZSA9IGRlZmF1bHRHZXRTdG9yZSgpKSB7XG4gICAgcmV0dXJuIGN1c3RvbVN0b3JlKCdyZWFkd3JpdGUnLCAoc3RvcmUpID0+IHtcbiAgICAgICAgc3RvcmUucHV0KHZhbHVlLCBrZXkpO1xuICAgICAgICByZXR1cm4gcHJvbWlzaWZ5UmVxdWVzdChzdG9yZS50cmFuc2FjdGlvbik7XG4gICAgfSk7XG59XG4vKipcbiAqIFNldCBtdWx0aXBsZSB2YWx1ZXMgYXQgb25jZS4gVGhpcyBpcyBmYXN0ZXIgdGhhbiBjYWxsaW5nIHNldCgpIG11bHRpcGxlIHRpbWVzLlxuICogSXQncyBhbHNvIGF0b21pYyBcdTIwMTMgaWYgb25lIG9mIHRoZSBwYWlycyBjYW4ndCBiZSBhZGRlZCwgbm9uZSB3aWxsIGJlIGFkZGVkLlxuICpcbiAqIEBwYXJhbSBlbnRyaWVzIEFycmF5IG9mIGVudHJpZXMsIHdoZXJlIGVhY2ggZW50cnkgaXMgYW4gYXJyYXkgb2YgYFtrZXksIHZhbHVlXWAuXG4gKiBAcGFyYW0gY3VzdG9tU3RvcmUgTWV0aG9kIHRvIGdldCBhIGN1c3RvbSBzdG9yZS4gVXNlIHdpdGggY2F1dGlvbiAoc2VlIHRoZSBkb2NzKS5cbiAqL1xuZnVuY3Rpb24gc2V0TWFueShlbnRyaWVzLCBjdXN0b21TdG9yZSA9IGRlZmF1bHRHZXRTdG9yZSgpKSB7XG4gICAgcmV0dXJuIGN1c3RvbVN0b3JlKCdyZWFkd3JpdGUnLCAoc3RvcmUpID0+IHtcbiAgICAgICAgZW50cmllcy5mb3JFYWNoKChlbnRyeSkgPT4gc3RvcmUucHV0KGVudHJ5WzFdLCBlbnRyeVswXSkpO1xuICAgICAgICByZXR1cm4gcHJvbWlzaWZ5UmVxdWVzdChzdG9yZS50cmFuc2FjdGlvbik7XG4gICAgfSk7XG59XG4vKipcbiAqIEdldCBtdWx0aXBsZSB2YWx1ZXMgYnkgdGhlaXIga2V5c1xuICpcbiAqIEBwYXJhbSBrZXlzXG4gKiBAcGFyYW0gY3VzdG9tU3RvcmUgTWV0aG9kIHRvIGdldCBhIGN1c3RvbSBzdG9yZS4gVXNlIHdpdGggY2F1dGlvbiAoc2VlIHRoZSBkb2NzKS5cbiAqL1xuZnVuY3Rpb24gZ2V0TWFueShrZXlzLCBjdXN0b21TdG9yZSA9IGRlZmF1bHRHZXRTdG9yZSgpKSB7XG4gICAgcmV0dXJuIGN1c3RvbVN0b3JlKCdyZWFkb25seScsIChzdG9yZSkgPT4gUHJvbWlzZS5hbGwoa2V5cy5tYXAoKGtleSkgPT4gcHJvbWlzaWZ5UmVxdWVzdChzdG9yZS5nZXQoa2V5KSkpKSk7XG59XG4vKipcbiAqIFVwZGF0ZSBhIHZhbHVlLiBUaGlzIGxldHMgeW91IHNlZSB0aGUgb2xkIHZhbHVlIGFuZCB1cGRhdGUgaXQgYXMgYW4gYXRvbWljIG9wZXJhdGlvbi5cbiAqXG4gKiBAcGFyYW0ga2V5XG4gKiBAcGFyYW0gdXBkYXRlciBBIGNhbGxiYWNrIHRoYXQgdGFrZXMgdGhlIG9sZCB2YWx1ZSBhbmQgcmV0dXJucyBhIG5ldyB2YWx1ZS5cbiAqIEBwYXJhbSBjdXN0b21TdG9yZSBNZXRob2QgdG8gZ2V0IGEgY3VzdG9tIHN0b3JlLiBVc2Ugd2l0aCBjYXV0aW9uIChzZWUgdGhlIGRvY3MpLlxuICovXG5mdW5jdGlvbiB1cGRhdGUoa2V5LCB1cGRhdGVyLCBjdXN0b21TdG9yZSA9IGRlZmF1bHRHZXRTdG9yZSgpKSB7XG4gICAgcmV0dXJuIGN1c3RvbVN0b3JlKCdyZWFkd3JpdGUnLCAoc3RvcmUpID0+IFxuICAgIC8vIE5lZWQgdG8gY3JlYXRlIHRoZSBwcm9taXNlIG1hbnVhbGx5LlxuICAgIC8vIElmIEkgdHJ5IHRvIGNoYWluIHByb21pc2VzLCB0aGUgdHJhbnNhY3Rpb24gY2xvc2VzIGluIGJyb3dzZXJzXG4gICAgLy8gdGhhdCB1c2UgYSBwcm9taXNlIHBvbHlmaWxsIChJRTEwLzExKS5cbiAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIHN0b3JlLmdldChrZXkpLm9uc3VjY2VzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgc3RvcmUucHV0KHVwZGF0ZXIodGhpcy5yZXN1bHQpLCBrZXkpO1xuICAgICAgICAgICAgICAgIHJlc29sdmUocHJvbWlzaWZ5UmVxdWVzdChzdG9yZS50cmFuc2FjdGlvbikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0pKTtcbn1cbi8qKlxuICogRGVsZXRlIGEgcGFydGljdWxhciBrZXkgZnJvbSB0aGUgc3RvcmUuXG4gKlxuICogQHBhcmFtIGtleVxuICogQHBhcmFtIGN1c3RvbVN0b3JlIE1ldGhvZCB0byBnZXQgYSBjdXN0b20gc3RvcmUuIFVzZSB3aXRoIGNhdXRpb24gKHNlZSB0aGUgZG9jcykuXG4gKi9cbmZ1bmN0aW9uIGRlbChrZXksIGN1c3RvbVN0b3JlID0gZGVmYXVsdEdldFN0b3JlKCkpIHtcbiAgICByZXR1cm4gY3VzdG9tU3RvcmUoJ3JlYWR3cml0ZScsIChzdG9yZSkgPT4ge1xuICAgICAgICBzdG9yZS5kZWxldGUoa2V5KTtcbiAgICAgICAgcmV0dXJuIHByb21pc2lmeVJlcXVlc3Qoc3RvcmUudHJhbnNhY3Rpb24pO1xuICAgIH0pO1xufVxuLyoqXG4gKiBEZWxldGUgbXVsdGlwbGUga2V5cyBhdCBvbmNlLlxuICpcbiAqIEBwYXJhbSBrZXlzIExpc3Qgb2Yga2V5cyB0byBkZWxldGUuXG4gKiBAcGFyYW0gY3VzdG9tU3RvcmUgTWV0aG9kIHRvIGdldCBhIGN1c3RvbSBzdG9yZS4gVXNlIHdpdGggY2F1dGlvbiAoc2VlIHRoZSBkb2NzKS5cbiAqL1xuZnVuY3Rpb24gZGVsTWFueShrZXlzLCBjdXN0b21TdG9yZSA9IGRlZmF1bHRHZXRTdG9yZSgpKSB7XG4gICAgcmV0dXJuIGN1c3RvbVN0b3JlKCdyZWFkd3JpdGUnLCAoc3RvcmUpID0+IHtcbiAgICAgICAga2V5cy5mb3JFYWNoKChrZXkpID0+IHN0b3JlLmRlbGV0ZShrZXkpKTtcbiAgICAgICAgcmV0dXJuIHByb21pc2lmeVJlcXVlc3Qoc3RvcmUudHJhbnNhY3Rpb24pO1xuICAgIH0pO1xufVxuLyoqXG4gKiBDbGVhciBhbGwgdmFsdWVzIGluIHRoZSBzdG9yZS5cbiAqXG4gKiBAcGFyYW0gY3VzdG9tU3RvcmUgTWV0aG9kIHRvIGdldCBhIGN1c3RvbSBzdG9yZS4gVXNlIHdpdGggY2F1dGlvbiAoc2VlIHRoZSBkb2NzKS5cbiAqL1xuZnVuY3Rpb24gY2xlYXIoY3VzdG9tU3RvcmUgPSBkZWZhdWx0R2V0U3RvcmUoKSkge1xuICAgIHJldHVybiBjdXN0b21TdG9yZSgncmVhZHdyaXRlJywgKHN0b3JlKSA9PiB7XG4gICAgICAgIHN0b3JlLmNsZWFyKCk7XG4gICAgICAgIHJldHVybiBwcm9taXNpZnlSZXF1ZXN0KHN0b3JlLnRyYW5zYWN0aW9uKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGVhY2hDdXJzb3Ioc3RvcmUsIGNhbGxiYWNrKSB7XG4gICAgc3RvcmUub3BlbkN1cnNvcigpLm9uc3VjY2VzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLnJlc3VsdClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY2FsbGJhY2sodGhpcy5yZXN1bHQpO1xuICAgICAgICB0aGlzLnJlc3VsdC5jb250aW51ZSgpO1xuICAgIH07XG4gICAgcmV0dXJuIHByb21pc2lmeVJlcXVlc3Qoc3RvcmUudHJhbnNhY3Rpb24pO1xufVxuLyoqXG4gKiBHZXQgYWxsIGtleXMgaW4gdGhlIHN0b3JlLlxuICpcbiAqIEBwYXJhbSBjdXN0b21TdG9yZSBNZXRob2QgdG8gZ2V0IGEgY3VzdG9tIHN0b3JlLiBVc2Ugd2l0aCBjYXV0aW9uIChzZWUgdGhlIGRvY3MpLlxuICovXG5mdW5jdGlvbiBrZXlzKGN1c3RvbVN0b3JlID0gZGVmYXVsdEdldFN0b3JlKCkpIHtcbiAgICByZXR1cm4gY3VzdG9tU3RvcmUoJ3JlYWRvbmx5JywgKHN0b3JlKSA9PiB7XG4gICAgICAgIC8vIEZhc3QgcGF0aCBmb3IgbW9kZXJuIGJyb3dzZXJzXG4gICAgICAgIGlmIChzdG9yZS5nZXRBbGxLZXlzKSB7XG4gICAgICAgICAgICByZXR1cm4gcHJvbWlzaWZ5UmVxdWVzdChzdG9yZS5nZXRBbGxLZXlzKCkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGl0ZW1zID0gW107XG4gICAgICAgIHJldHVybiBlYWNoQ3Vyc29yKHN0b3JlLCAoY3Vyc29yKSA9PiBpdGVtcy5wdXNoKGN1cnNvci5rZXkpKS50aGVuKCgpID0+IGl0ZW1zKTtcbiAgICB9KTtcbn1cbi8qKlxuICogR2V0IGFsbCB2YWx1ZXMgaW4gdGhlIHN0b3JlLlxuICpcbiAqIEBwYXJhbSBjdXN0b21TdG9yZSBNZXRob2QgdG8gZ2V0IGEgY3VzdG9tIHN0b3JlLiBVc2Ugd2l0aCBjYXV0aW9uIChzZWUgdGhlIGRvY3MpLlxuICovXG5mdW5jdGlvbiB2YWx1ZXMoY3VzdG9tU3RvcmUgPSBkZWZhdWx0R2V0U3RvcmUoKSkge1xuICAgIHJldHVybiBjdXN0b21TdG9yZSgncmVhZG9ubHknLCAoc3RvcmUpID0+IHtcbiAgICAgICAgLy8gRmFzdCBwYXRoIGZvciBtb2Rlcm4gYnJvd3NlcnNcbiAgICAgICAgaWYgKHN0b3JlLmdldEFsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHByb21pc2lmeVJlcXVlc3Qoc3RvcmUuZ2V0QWxsKCkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGl0ZW1zID0gW107XG4gICAgICAgIHJldHVybiBlYWNoQ3Vyc29yKHN0b3JlLCAoY3Vyc29yKSA9PiBpdGVtcy5wdXNoKGN1cnNvci52YWx1ZSkpLnRoZW4oKCkgPT4gaXRlbXMpO1xuICAgIH0pO1xufVxuLyoqXG4gKiBHZXQgYWxsIGVudHJpZXMgaW4gdGhlIHN0b3JlLiBFYWNoIGVudHJ5IGlzIGFuIGFycmF5IG9mIGBba2V5LCB2YWx1ZV1gLlxuICpcbiAqIEBwYXJhbSBjdXN0b21TdG9yZSBNZXRob2QgdG8gZ2V0IGEgY3VzdG9tIHN0b3JlLiBVc2Ugd2l0aCBjYXV0aW9uIChzZWUgdGhlIGRvY3MpLlxuICovXG5mdW5jdGlvbiBlbnRyaWVzKGN1c3RvbVN0b3JlID0gZGVmYXVsdEdldFN0b3JlKCkpIHtcbiAgICByZXR1cm4gY3VzdG9tU3RvcmUoJ3JlYWRvbmx5JywgKHN0b3JlKSA9PiB7XG4gICAgICAgIC8vIEZhc3QgcGF0aCBmb3IgbW9kZXJuIGJyb3dzZXJzXG4gICAgICAgIC8vIChhbHRob3VnaCwgaG9wZWZ1bGx5IHdlJ2xsIGdldCBhIHNpbXBsZXIgcGF0aCBzb21lIGRheSlcbiAgICAgICAgaWYgKHN0b3JlLmdldEFsbCAmJiBzdG9yZS5nZXRBbGxLZXlzKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoW1xuICAgICAgICAgICAgICAgIHByb21pc2lmeVJlcXVlc3Qoc3RvcmUuZ2V0QWxsS2V5cygpKSxcbiAgICAgICAgICAgICAgICBwcm9taXNpZnlSZXF1ZXN0KHN0b3JlLmdldEFsbCgpKSxcbiAgICAgICAgICAgIF0pLnRoZW4oKFtrZXlzLCB2YWx1ZXNdKSA9PiBrZXlzLm1hcCgoa2V5LCBpKSA9PiBba2V5LCB2YWx1ZXNbaV1dKSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaXRlbXMgPSBbXTtcbiAgICAgICAgcmV0dXJuIGN1c3RvbVN0b3JlKCdyZWFkb25seScsIChzdG9yZSkgPT4gZWFjaEN1cnNvcihzdG9yZSwgKGN1cnNvcikgPT4gaXRlbXMucHVzaChbY3Vyc29yLmtleSwgY3Vyc29yLnZhbHVlXSkpLnRoZW4oKCkgPT4gaXRlbXMpKTtcbiAgICB9KTtcbn1cblxuZXhwb3J0IHsgY2xlYXIsIGNyZWF0ZVN0b3JlLCBkZWwsIGRlbE1hbnksIGVudHJpZXMsIGdldCwgZ2V0TWFueSwga2V5cywgcHJvbWlzaWZ5UmVxdWVzdCwgc2V0LCBzZXRNYW55LCB1cGRhdGUsIHZhbHVlcyB9O1xuIiwgIlwidXNlIHN0cmljdFwiO1xyXG5cclxuZnVuY3Rpb24gZGVDeWNsZXIodmFsLCBjb25maWcpIHtcclxuICBjb25maWcgPSB0eXBlb2YgY29uZmlnID09PSAnbnVtYmVyJyA/IHsgZGVlcDogY29uZmlnIH0gOiAoY29uZmlnIHx8IHt9KTtcclxuICBjb25maWcuZGVlcCA9IGNvbmZpZy5kZWVwIHx8IDEwO1xyXG4gIHJldHVybiBkZWN5Y2xlV2Fsa2VyKFtdLCBbXSwgdmFsLCBjb25maWcpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkZUN5Y2xlZCh2YWwsIGNvbmZpZykge1xyXG4gIGNvbmZpZyA9IHR5cGVvZiBjb25maWcgPT09ICdudW1iZXInID8geyBkZWVwOiBjb25maWcgfSA6IChjb25maWcgfHwge30pO1xyXG4gIHZhbCA9IGRlQ3ljbGVyKHZhbCwgY29uZmlnKTtcclxuICB0cnkge1xyXG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHZhbCwgdW5kZWZpbmVkLCBjb25maWcuc3BhY2VyKTtcclxuICB9IGNhdGNoIChlKSB7XHJcbiAgICByZXR1cm4gZTtcclxuICB9XHJcbn1cclxuXHJcbnZhciByZXZpdmVyRGF0ZSA9IC9eXFxbRGF0ZTooKFxcZHs0fS1cXGR7Mn0tXFxkezJ9KVtBLVpdKyhcXGR7Mn06XFxkezJ9OlxcZHsyfSkuKFswLTkrLTpdKylaKVxcXSQvO1xyXG52YXIgcmV2aXZlclJlZ0V4cCA9IC9eXFxbUmVnZXhwOlxcLyguKylcXC9cXF0kLztcclxudmFyIHJldml2ZXJFcnJvciA9IC9eXFxbRXJyb3I6KFtcXFdcXHddKylcXF0kLztcclxudmFyIHJldml2ZXJGdW5jdGlvbiA9IC9eXFxbRnVuY3Rpb246KC4rKVxcXSQvO1xyXG5mdW5jdGlvbiByZXZpdmUodmFsLCBmdW5jdGlvbnMpIHtcclxuICB0cnkge1xyXG4gICAgcmV0dXJuIEpTT04ucGFyc2UodmFsLCByZXZpdmVyKTtcclxuICB9IGNhdGNoIChlKSB7XHJcbiAgICByZXR1cm4gZTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHJldml2ZXIoa2V5LCB2YWwpIHtcclxuICAgIGlmIChyZXZpdmVyRGF0ZS50ZXN0KHZhbCkpIHtcclxuICAgICAgdmFsID0gcmV2aXZlckRhdGUuZXhlYyh2YWwpO1xyXG4gICAgICB2YWwgPSBuZXcgRGF0ZSh2YWxbMV0pO1xyXG4gICAgICByZXR1cm4gbmV3IERhdGUodmFsKTtcclxuICAgIH0gZWxzZSBpZiAocmV2aXZlclJlZ0V4cC50ZXN0KHZhbCkpIHtcclxuICAgICAgdmFsID0gcmV2aXZlclJlZ0V4cC5leGVjKHZhbClbMV07XHJcbiAgICAgIHJldHVybiBuZXcgUmVnRXhwKHZhbCk7XHJcbiAgICB9IGVsc2UgaWYgKHJldml2ZXJFcnJvci50ZXN0KHZhbCkpIHtcclxuICAgICAgdmFsID0gcmV2aXZlckVycm9yLmV4ZWModmFsKVsxXTtcclxuICAgICAgdmFyIGVycm9yID0gbmV3IEVycm9yKHZhbC5zcGxpdCgnXFxuJylbMF0pO1xyXG4gICAgICBpZiAoZXJyb3Iuc3RhY2spIHtcclxuICAgICAgICBlcnJvci5zdGFjayA9IHZhbDtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gZXJyb3I7XHJcbiAgICB9IGVsc2UgaWYgKGZ1bmN0aW9ucyAmJiByZXZpdmVyRnVuY3Rpb24udGVzdCh2YWwpKSB7XHJcbiAgICAgIHZhbCA9IHJldml2ZXJGdW5jdGlvbi5leGVjKHZhbClbMV07XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgcmV0dXJuIChuZXcgRnVuY3Rpb24oXCJyZXR1cm4gXCIgKyB2YWwgKyBcIjtcIikpKCk7XHJcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIGVycm9yO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gdmFsO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZGVjeWNsZVdhbGtlcihwYXJlbnRzLCBwYXRoLCB2YWwsIGNvbmZpZykge1xyXG4gIGlmIChbJ3VuZGVmaW5lZCcsICdudW1iZXInLCAnYm9vbGVhbicsICdzdHJpbmcnXS5pbmRleE9mKHR5cGVvZiB2YWwpID49IDAgfHwgdmFsID09PSBudWxsKSB7XHJcbiAgICByZXR1cm4gdmFsO1xyXG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ29iamVjdCcgJiYgdmFsLmNvbnN0cnVjdG9yID09PSBEYXRlKSB7XHJcbiAgICByZXR1cm4gY29uZmlnLmRhdGVzICE9PSBmYWxzZSA/ICdbRGF0ZTonICsgdmFsLnRvSVNPU3RyaW5nKCkgKyAnXScgOiB2YWw7XHJcbiAgICAvL3ZhbC5mb3JtYXQoJ3tZWVlZfS97TU19L3tERH0ge2hofTp7bW19Ontzc30gVVRDOlx1MDBCN3twYXJhbXMudHo+PTA/XCIrXCIrcGFyYW1zLnR6OnBhcmFtcy50en1cdTAwQjcnKTtcclxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdvYmplY3QnICYmIHZhbC5jb25zdHJ1Y3RvciA9PT0gUmVnRXhwKSB7XHJcbiAgICByZXR1cm4gY29uZmlnLnJlZ2V4cHMgIT09IGZhbHNlID8gJ1tSZWdleHA6JyArIHZhbC50b1N0cmluZygpICsgJ10nIDogdmFsO1xyXG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ29iamVjdCcgJiYgdmFsLmNvbnN0cnVjdG9yICYmIHR5cGVvZiB2YWwuY29uc3RydWN0b3IubmFtZSA9PT0gJ3N0cmluZycgJiYgdmFsLmNvbnN0cnVjdG9yLm5hbWUuc2xpY2UoLTUpID09PSAnRXJyb3InKSB7XHJcbiAgICB2YXIgc3RhY2sgPSAodmFsLnN0YWNrIHx8ICcnKS5zcGxpdCgnXFxuJykuc2xpY2UoMSk7XHJcbiAgICB2YXIgbWVzc2FnZSA9ICh2YWwubWVzc2FnZSB8fCB2YWwudG9TdHJpbmcoKSk7XHJcbiAgICB2YXIgZXJyb3IgPSBtZXNzYWdlICsgXCJcXG5cIiArIHN0YWNrO1xyXG4gICAgcmV0dXJuIGNvbmZpZy5lcnJvcnMgIT09IGZhbHNlID8gJ1tFcnJvcjonICsgZXJyb3IgKyAnXScgOiB2YWw7XHJcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xyXG4gICAgaWYgKHBhcmVudHMuaW5kZXhPZih2YWwpID49IDApIHtcclxuICAgICAgdmFyIHBvaW50ID0gcGF0aC5zbGljZSgwLCBwYXJlbnRzLmluZGV4T2YodmFsKSkuam9pbignLicpO1xyXG4gICAgICByZXR1cm4gJ1tDaXJjdWxhcicgKyAocG9pbnQgPyAnOicgKyBwb2ludCA6ICcnKSArICddJztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHZhciBjb3B5LCBpLCBrLCBsO1xyXG4gICAgICBpZiAodmFsLmNvbnN0cnVjdG9yICYmIHR5cGVvZiB2YWwuY29uc3RydWN0b3IubmFtZSA9PT0gJ3N0cmluZycgJiYgdmFsLmNvbnN0cnVjdG9yLm5hbWUuc2xpY2UoLTUpID09PSAnQXJyYXknKSB7XHJcbiAgICAgICAgaWYgKHBhcmVudHMubGVuZ3RoID49IGNvbmZpZy5kZWVwKSB7XHJcbiAgICAgICAgICByZXR1cm4gJ1tBcnJheTonICsgdmFsLmNvbnN0cnVjdG9yLm5hbWUgKyAnXSc7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGNvcHkgPSBbXTtcclxuICAgICAgICAgIGZvciAoaSA9IDAsIGwgPSB2YWwubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvcHlbaV0gPSBkZWN5Y2xlV2Fsa2VyKHBhcmVudHMuY29uY2F0KFt2YWxdKSwgcGF0aC5jb25jYXQoaSksIHZhbFtpXSwgY29uZmlnKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJldHVybiBjb3B5O1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAocGFyZW50cy5sZW5ndGggPj0gY29uZmlnLmRlZXApIHtcclxuICAgICAgICAgIHJldHVybiAnW09iamVjdDonICsgKHZhbC5jb25zdHJ1Y3RvciAmJiB2YWwuY29uc3RydWN0b3IubmFtZSA/IHZhbC5jb25zdHJ1Y3Rvci5uYW1lIDogJ09iamVjdCcpICsgJ10nO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjb3B5ID0ge307XHJcbiAgICAgICAgICBmb3IgKGkgPSAwLCBrID0gT2JqZWN0LmtleXModmFsKSwgbCA9IGsubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvcHlba1tpXV0gPSBkZWN5Y2xlV2Fsa2VyKHBhcmVudHMuY29uY2F0KFt2YWxdKSwgcGF0aC5jb25jYXQoW2tbaV1dKSwgdmFsW2tbaV1dLCBjb25maWcpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmV0dXJuIGNvcHk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICByZXR1cm4gY29uZmlnLmZ1bmN0aW9ucyA9PT0gdHJ1ZSA/ICdbRnVuY3Rpb246JyArIHZhbC50b1N0cmluZygpICsgJ10nIDogdW5kZWZpbmVkO1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gdmFsLnRvU3RyaW5nKCk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQge1xyXG4gIGRlQ3ljbGVyLFxyXG4gIGRlQ3ljbGVkLFxyXG4gIHJldml2ZVxyXG59IiwgImltcG9ydCBpMThuIGZyb20gXCIuLi9pMThuXCI7XHJcbmltcG9ydCB1dGlscyBmcm9tIFwiLi4vdXRpbHNcIjtcclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0ge3sgaTE4bjogc3RyaW5nIHwgeyBbbGFuZzogc3RyaW5nXTogeyBbazogc3RyaW5nXTogc3RyaW5nIH0gfX19IGNmZyBcclxuICogQHJldHVybnMgXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYnVpbGRFeHRlbnNpb25JMThOKGNmZykge1xyXG4gIGlmICghY2ZnPy5pMThuKSByZXR1cm4gbnVsbDtcclxuICBsZXQgb3V0ID0ge1xyXG4gICAgX19jYWNoZV9fOiB7XHJcbiAgICAgIGxvY2FsZUlkczogW10sXHJcbiAgICAgIGxvY2FsaXphdGlvbnM6IHt9XHJcbiAgICB9LFxyXG4gICAgZm9ybWF0KGtleSwgLi4uYXJncykge1xyXG4gICAgICByZXR1cm4gdXRpbHMuZm9ybWF0KG91dC5nZXQoa2V5KSwgLi4uYXJncyk7XHJcbiAgICB9LFxyXG4gICAgZ2V0KGtleSkge1xyXG4gICAgICBpZiAodHlwZW9mIGNmZy5pMThuID09PSBcInN0cmluZ1wiKSBjaGVjaygpO1xyXG4gICAgICByZXR1cm4gb3V0Ll9fY2FjaGVfXy5sb2NhbGl6YXRpb25zW291dC5sb2NhbGVdPy5ba2V5XVxyXG4gICAgICAgIHx8IG91dC5fX2NhY2hlX18ubG9jYWxpemF0aW9ucy5kZWZhdWx0Py5ba2V5XVxyXG4gICAgICAgIHx8IG91dC5nZXQoa2V5KTtcclxuICAgIH0sXHJcbiAgICBtZXNzYWdlczogbmV3IFByb3h5KHt9LCB7XHJcbiAgICAgIGdldChfLCBwcm9wKSB7XHJcbiAgICAgICAgcmV0dXJuIG91dC5nZXQocHJvcCk7XHJcbiAgICAgIH1cclxuICAgIH0pLFxyXG4gIH1cclxuICBhc3luYyBmdW5jdGlvbiBjaGVjaygpIHtcclxuICAgIGNvbnN0IGxvY2FsZSA9IGkxOG4ubG9jYWxlO1xyXG4gICAgaWYgKHR5cGVvZiBjZmcuaTE4biA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICBjb25zdCBCQVNFX1VSTCA9IGNmZy5pMThuLmVuZHNXaXRoKFwiL1wiKSA/IGNmZy5pMThuLnNsaWNlKDAsIC0xKSA6IGNmZy5pMThuO1xyXG4gICAgICBpZiAoIW91dC5fX2NhY2hlX18ubG9jYWxlSWRzLmxlbmd0aCkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICBvdXQuX19jYWNoZV9fLmxvY2FsZUlkcyA9IGF3YWl0IChhd2FpdCBmZXRjaChgJHtCQVNFX1VSTH0vbG9jYWxlcy5qc29uYCwgbm9TdG9yZSkpLmpzb24oKTtcclxuICAgICAgICB9IGNhdGNoIHsgfVxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICBvdXQuX19jYWNoZV9fLmxvY2FsaXphdGlvbnMuZGVmYXVsdCA9IGF3YWl0IChhd2FpdCBmZXRjaChgJHtCQVNFX1VSTH0vZGVmYXVsdC5qc29uYCwgbm9TdG9yZSkpLmpzb24oKTtcclxuICAgICAgICB9IGNhdGNoIHsgfVxyXG4gICAgICB9XHJcbiAgICAgIGlmIChcclxuICAgICAgICBvdXQuX19jYWNoZV9fLmxvY2FsZUlkcy5pbmNsdWRlcyhsb2NhbGUpXHJcbiAgICAgICAgJiYgIW91dC5fX2NhY2hlX18ubG9jYWxpemF0aW9ucz8uW2xvY2FsZV1cclxuICAgICAgKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIG91dC5fX2NhY2hlX18ubG9jYWxpemF0aW9uc1tsb2NhbGVdID0gYXdhaXQgKGF3YWl0IGZldGNoKGAke0JBU0VfVVJMfS8ke2xvY2FsZX0uanNvbmAsIG5vU3RvcmUpKS5qc29uKCk7XHJcbiAgICAgICAgfSBjYXRjaCB7IH07XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIG91dC5fX2NhY2hlX18ubG9jYWxlSWRzID0gT2JqZWN0LmtleXMoY2ZnLmkxOG4pO1xyXG4gICAgICBvdXQuX19jYWNoZV9fLmxvY2FsaXphdGlvbnMgPSBjZmcuaTE4bjtcclxuICAgIH1cclxuICB9XHJcbiAgYXdhaXQgY2hlY2soKTtcclxuICByZXR1cm4gb3V0O1xyXG59IiwgImltcG9ydCB7IEJhc2ljRXZlbnRFbWl0dGVyIH0gZnJvbSBcIi4uLy4uL2xpYi9CYXNpY0V2ZW50RW1pdHRlci5qc1wiO1xyXG5pbXBvcnQgZGV2IGZyb20gXCIuLi9kZXYvaW5kZXguanNcIjtcclxuaW1wb3J0IGkxOG4gZnJvbSBcIi4uL2kxOG4vaW5kZXguanNcIjtcclxuaW1wb3J0IG1vZHVsZXMgZnJvbSBcIi4uL21vZHVsZXMvaW5kZXguanNcIjtcclxuaW1wb3J0IHN0b3JhZ2UgZnJvbSBcIi4uL3N0b3JhZ2UvaW5kZXguanNcIjtcclxuaW1wb3J0IHsgYnVpbGRFeHRlbnNpb25JMThOIH0gZnJvbSBcIi4vaTE4bi5qc1wiO1xyXG5pbXBvcnQgKiBhcyBuZXN0cyBmcm9tIFwibmVzdHNcIjtcclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0ge3sgbW9kdWxlczogeyBub2RlOiB7IG5hbWU6IHN0cmluZywgcmVhc29uOiBzdHJpbmcgfVtdLCBjb21tb246IHsgbmFtZTogc3RyaW5nLCByZWFzb246IHN0cmluZyB9W10sIGN1c3RvbTogeyByZWFzb246IHN0cmluZywgbmFtZTogc3RyaW5nLCBsYXp5OiBib29sZWFuLCBmaW5kZXI6IHsgZmlsdGVyOiB7IGV4cG9ydDogYm9vbGVhbiwgaW46IFwicHJvcGVydGllc1wiIHwgXCJzdHJpbmdzXCIgfCBcInByb3RvdHlwZXNcIiwgYnk6IFtzdHJpbmdbXSwgc3RyaW5nW10/XSB9LCBwYXRoOiB7IGJlZm9yZTogc3RyaW5nIHwgc3RyaW5nW10sIGFmdGVyOiBzdHJpbmcgfCBzdHJpbmdbXSB9LCBtYXA6IHsgW2s6IHN0cmluZ106IHN0cmluZ1tdIH0gfSB9W10gfSwgYWJvdXQ6IHsgbmFtZTogc3RyaW5nIHwgeyBbazogc3RyaW5nXTogc3RyaW5nIH0sIGRlc2NyaXB0aW9uOiBzdHJpbmcgfCB7IFtrOiBzdHJpbmddOiBzdHJpbmcgfSwgc2x1Zzogc3RyaW5nIH0sIHJlYXNvbjogc3RyaW5nIH19IGNmZyBcclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIGJ1aWxkQVBJKGNmZykge1xyXG4gIGNvbnN0IHBlcnNpc3QgPSBhd2FpdCBzdG9yYWdlLmNyZWF0ZVBlcnNpc3ROZXN0KGBFeHRlbnNpb247UGVyc2lzdDske2NmZy5hYm91dC5zbHVnfWApO1xyXG4gIGNvbnN0IG91dCA9IHtcclxuICAgIG1vZHVsZXM6IHtcclxuICAgICAgX19jYWNoZV9fOiB7XHJcbiAgICAgICAgY29tbW9uOiB7fSxcclxuICAgICAgICBub2RlOiB7fSxcclxuICAgICAgICBjdXN0b206IHt9LFxyXG4gICAgICAgIGN1c3RvbUxhenk6IHt9XHJcbiAgICAgIH0sXHJcbiAgICAgIHJlcXVpcmUobmFtZSkge1xyXG4gICAgICAgIGlmICghZGV2LmVuYWJsZWQpIHtcclxuICAgICAgICAgIGlmICh0eXBlb2Ygb3V0Lm1vZHVsZXMuX19jYWNoZV9fLm5vZGVbbmFtZV0gIT09IFwidW5kZWZpbmVkXCIpIHJldHVybiBvdXQubW9kdWxlcy5fX2NhY2hlX18ubm9kZVtuYW1lXTtcclxuICAgICAgICAgIGlmIChjZmc/Lm1vZHVsZXM/Lm5vZGU/LnNvbWU/LihpID0+IGkubmFtZSA9PT0gbmFtZSkpIHJldHVybiBvdXQubW9kdWxlcy5fX2NhY2hlX18ubm9kZVtuYW1lXSA9IG1vZHVsZXMucmVxdWlyZShuYW1lKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuIG1vZHVsZXMucmVxdWlyZShuYW1lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgIH0sXHJcbiAgICAgIGNvbW1vbjogbmV3IFByb3h5KHt9LCB7XHJcbiAgICAgICAgZ2V0KF8sIHByb3ApIHtcclxuICAgICAgICAgIGlmICghZGV2LmVuYWJsZWQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvdXQubW9kdWxlcy5fX2NhY2hlX18uY29tbW9uW3Byb3BdICE9PSBcInVuZGVmaW5lZFwiKSByZXR1cm4gb3V0Lm1vZHVsZXMuX19jYWNoZV9fLmNvbW1vbltwcm9wXTtcclxuICAgICAgICAgICAgaWYgKGNmZz8ubW9kdWxlcz8uY29tbW9uPy5zb21lPy4oaSA9PiBpLm5hbWUgPT09IHByb3ApKSByZXR1cm4gb3V0Lm1vZHVsZXMuX19jYWNoZV9fLmNvbW1vbltwcm9wXSA9IG1vZHVsZXMuY29tbW9uW3Byb3BdO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIG1vZHVsZXMuY29tbW9uW3Byb3BdO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfSxcclxuICAgICAgfSksXHJcbiAgICAgIGN1c3RvbTogbmV3IFByb3h5KHt9LCB7XHJcbiAgICAgICAgZ2V0KF8sIHByb3ApIHtcclxuICAgICAgICAgIGlmICh0eXBlb2Ygb3V0Lm1vZHVsZXMuX19jYWNoZV9fLmN1c3RvbVtwcm9wXSAhPT0gXCJ1bmRlZmluZWRcIikgcmV0dXJuIG91dC5tb2R1bGVzLl9fY2FjaGVfXy5jdXN0b21bcHJvcF07XHJcbiAgICAgICAgICBsZXQgZGF0YSA9IGNmZz8ubW9kdWxlcz8uY3VzdG9tPy5zb21lPy4oaSA9PiBpLm5hbWUgPT09IHByb3ApO1xyXG4gICAgICAgICAgaWYgKCFkYXRhKSByZXR1cm4gbnVsbDtcclxuICAgICAgICAgIGlmIChkYXRhLmxhenkpIHtcclxuICAgICAgICAgICAgbGV0IHByb20gPSBuZXcgUHJvbWlzZShhc3luYyAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgICAgbGV0IHIgPSBhd2FpdCBtb2R1bGVzLndlYnBhY2subGF6eUZpbmRCeUZpbmRlcihkYXRhLmZpbmRlcik7XHJcbiAgICAgICAgICAgICAgb3V0Lm1vZHVsZXMuX19jYWNoZV9fLmN1c3RvbUxhenlbcHJvcF0gPSByO1xyXG4gICAgICAgICAgICAgIHJlc29sdmUocik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBvdXQubW9kdWxlcy5fX2NhY2hlX18uY3VzdG9tW3Byb3BdID0ge1xyXG4gICAgICAgICAgICAgIGdldCgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwcm9tO1xyXG4gICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgZ2V0IHZhbHVlKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG91dC5tb2R1bGVzLl9fY2FjaGVfXy5jdXN0b21MYXp5W3Byb3BdO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9IG1vZHVsZXMud2VicGFjay5maW5kQnlGaW5kZXIoZGF0YS5maW5kZXIpO1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWU/LnZhbHVlICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgICAgICAgICBvdXQubW9kdWxlcy5fX2NhY2hlX18uY3VzdG9tW3Byb3BdID0gdmFsdWUgPyBPYmplY3QuYXNzaWduKHZhbHVlLCB7IHZhbHVlLCBnZXQoKSB7IHJldHVybiB2YWx1ZSB9IH0pIDogbnVsbDtcclxuICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgb3V0Lm1vZHVsZXMuX19jYWNoZV9fLmN1c3RvbVtwcm9wXSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBjYXRjaCB7XHJcbiAgICAgICAgICAgICAgb3V0Lm1vZHVsZXMuX19jYWNoZV9fLmN1c3RvbVtwcm9wXSA9IHZhbHVlID8geyB2YWx1ZSwgZ2V0KCkgeyByZXR1cm4gdmFsdWUgfSB9IDogbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmV0dXJuIG91dC5tb2R1bGVzLl9fY2FjaGVfXy5jdXN0b21bcHJvcF07XHJcbiAgICAgICAgfVxyXG4gICAgICB9KSxcclxuICAgIH0sXHJcbiAgICBpMThuLFxyXG4gICAgZXh0ZW5zaW9uOiB7XHJcbiAgICAgIGNvbmZpZzogSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShjZmcpKSxcclxuICAgICAgcGVyc2lzdCxcclxuICAgICAgaTE4bjogYXdhaXQgYnVpbGRFeHRlbnNpb25JMThOKGNmZyksXHJcbiAgICAgIGV2ZW50czogbmV3IEJhc2ljRXZlbnRFbWl0dGVyKClcclxuICAgIH1cclxuICB9O1xyXG5cclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG5jb25zdCBvdXQgPSB7XHJcbiAgX19jYWNoZV9fOiB7XHJcbiAgICBpbml0aWFsaXplZDogZmFsc2UsXHJcbiAgICBsb2FkZWQ6IG5lc3RzLm1ha2Uoe30pXHJcbiAgfSxcclxuICBzdG9yYWdlOiB7XHJcbiAgICAvKiogQHR5cGUge25lc3RzLk5lc3R9ICovXHJcbiAgICBpbnN0YWxsZWQ6IHt9XHJcbiAgfSxcclxuICBidWlsZEFQSSxcclxuICBhc3luYyBpbml0KCkge1xyXG4gICAgaWYgKG91dC5fX2NhY2hlX18uaW5pdGlhbGl6ZWQpIHJldHVybjtcclxuICAgIG91dC5fX2NhY2hlX18uaW5pdGlhbGl6ZWQgPSB0cnVlO1xyXG4gICAgb3V0LnN0b3JhZ2UuaW5zdGFsbGVkID0gYXdhaXQgc3RvcmFnZS5jcmVhdGVQZXJzaXN0TmVzdChcIkV4dGVuc2lvbnM7SW5zdGFsbGVkXCIpO1xyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBcclxuICAgKi9cclxuICBhc3luYyBpbnN0YWxsKHVybCwgZGVmYXVsdENvbmZpZyA9IHt9KSB7XHJcbiAgICBpZiAoIW91dC5fX2NhY2hlX18uaW5pdGlhbGl6ZWQpIGF3YWl0IG91dC5pbml0KCk7XHJcbiAgICBpZiAodXJsLmVuZHNXaXRoKFwiL1wiKSkgdXJsID0gdXJsLnNsaWNlKDAsIC0xKTtcclxuICAgIGlmIChvdXQuc3RvcmFnZS5pbnN0YWxsZWQuZ2hvc3RbdXJsXSkgdGhyb3cgbmV3IEVycm9yKGBcIiR7dXJsfVwiIGV4dGVuc2lvbiBpcyBhbHJlYWR5IGluc3RhbGxlZC5gKTtcclxuXHJcbiAgICBsZXQgbWV0YVJlc3AgPSBhd2FpdCBmZXRjaChgJHt1cmx9L21ldGFkYXRhLmpzb25gKTtcclxuICAgIGlmIChtZXRhUmVzcC5zdGF0dXMgIT09IDIwMCkgdGhyb3cgbmV3IEVycm9yKGBcIiR7dXJsfVwiIGV4dGVuc2lvbiBtZXRhZGF0YSBpcyBub3QgcmVzcG9uZGVkIHdpdGggMjAwIHN0YXR1cyBjb2RlLmApO1xyXG4gICAgbGV0IG1ldGFkYXRhID0gYXdhaXQgbWV0YVJlc3AuanNvbigpO1xyXG5cclxuICAgIGxldCByZWFkbWVSZXNwID0gYXdhaXQgZmV0Y2goYCR7dXJsfS9yZWFkbWUubWRgKTtcclxuICAgIGxldCByZWFkbWUgPSByZWFkbWVSZXNwLnN0YXR1cyA9PT0gMjAwID8gYXdhaXQgcmVhZG1lUmVzcC50ZXh0KCkgOiBudWxsO1xyXG5cclxuICAgIC8vIFRPRE86IFNob3cgbW9kYWwgZm9yIHVzZXIgdG8gYWNjZXB0IHRoZSBleHRlbnNpb24gKHRlcm1zLCBwcml2YWN5LCBldGMuKVxyXG5cclxuICAgIGxldCBzb3VyY2VSZXNwID0gYXdhaXQgZmV0Y2goYCR7dXJsfS9zb3VyY2UuanNgKTtcclxuICAgIGlmIChzb3VyY2VSZXNwLnN0YXR1cyAhPT0gMjAwKSB0aHJvdyBuZXcgRXJyb3IoYFwiJHt1cmx9XCIgZXh0ZW5zaW9uIHNvdXJjZSBpcyBub3QgcmVzcG9uZGVkIHdpdGggMjAwIHN0YXR1cyBjb2RlLmApO1xyXG4gICAgbGV0IHNvdXJjZSA9IGF3YWl0IHNvdXJjZVJlc3AudGV4dCgpO1xyXG5cclxuXHJcbiAgICBvdXQuc3RvcmFnZS5pbnN0YWxsZWQuc3RvcmVbdXJsXSA9IHtcclxuICAgICAgbWV0YWRhdGE6IHtcclxuICAgICAgICBjdXJyZW50OiBtZXRhZGF0YSxcclxuICAgICAgICBsYXN0OiBtZXRhZGF0YVxyXG4gICAgICB9LFxyXG4gICAgICBzb3VyY2UsXHJcbiAgICAgIHJlYWRtZSxcclxuICAgICAgY29uZmlnOiB7XHJcbiAgICAgICAgYXV0b1VwZGF0ZTogdHJ1ZSxcclxuICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgIC4uLmRlZmF1bHRDb25maWdcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvLyBUT0RPOiBMb2FkIGV4dGVuc2lvblxyXG4gIH0sXHJcbiAgYXN5bmMgdW5pbnN0YWxsKHVybCkge1xyXG4gICAgaWYgKCFvdXQuX19jYWNoZV9fLmluaXRpYWxpemVkKSBhd2FpdCBvdXQuaW5pdCgpO1xyXG4gICAgaWYgKCFvdXQuc3RvcmFnZS5pbnN0YWxsZWQuZ2hvc3RbdXJsXSkgdGhyb3cgbmV3IEVycm9yKGBcIiR7dXJsfVwiIGV4dGVuc2lvbiBpcyBub3QgaW5zdGFsbGVkLmApO1xyXG5cclxuICAgIGRlbGV0ZSBvdXQuc3RvcmFnZS5pbnN0YWxsZWQuc3RvcmVbdXJsXTtcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICBhd2FpdCBvdXQudW5sb2FkKHVybCk7XHJcbiAgICB9IGNhdGNoIHsgfVxyXG4gIH0sXHJcbiAgYXN5bmMgbG9hZCh1cmwpIHtcclxuICAgIGlmICghb3V0Ll9fY2FjaGVfXy5pbml0aWFsaXplZCkgYXdhaXQgb3V0LmluaXQoKTtcclxuICAgIGlmICghb3V0LnN0b3JhZ2UuaW5zdGFsbGVkLmdob3N0W3VybF0pIHRocm93IG5ldyBFcnJvcihgXCIke3VybH1cIiBleHRlbnNpb24gaXMgbm90IGluc3RhbGxlZC5gKTtcclxuICAgIGxldCBkYXRhID0gb3V0LnN0b3JhZ2UuaW5zdGFsbGVkLmdob3N0W3VybF07XHJcblxyXG4gICAgaWYgKG91dC5fX2NhY2hlX18ubG9hZGVkLmdob3N0W3VybF0pIHRocm93IG5ldyBFcnJvcihgXCIke3VybH1cIiBleHRlbnNpb24gaXMgYWxyZWFkeSBsb2FkZWQuYCk7XHJcblxyXG4gICAgbGV0IGFwaSA9IGF3YWl0IG91dC5idWlsZEFQSShkYXRhLm1ldGFkYXRhKTtcclxuXHJcbiAgICBsZXQgZXZhbHVhdGVkID0gb3V0LmV2YWx1YXRlKGRhdGEuc291cmNlLCBhcGkpO1xyXG5cclxuICAgIGF3YWl0IGV2YWx1YXRlZD8ubG9hZD8uKCk7XHJcblxyXG4gICAgb3V0Ll9fY2FjaGVfXy5sb2FkZWQuc3RvcmVbdXJsXSA9IHtcclxuICAgICAgZXZhbHVhdGVkLFxyXG4gICAgICBhcGlcclxuICAgIH07XHJcbiAgfSxcclxuICBhc3luYyB1bmxvYWQodXJsKSB7XHJcbiAgICBpZiAoIW91dC5fX2NhY2hlX18uaW5pdGlhbGl6ZWQpIGF3YWl0IG91dC5pbml0KCk7XHJcbiAgICBpZiAoIW91dC5zdG9yYWdlLmluc3RhbGxlZC5naG9zdFt1cmxdKSB0aHJvdyBuZXcgRXJyb3IoYFwiJHt1cmx9XCIgZXh0ZW5zaW9uIGlzIG5vdCBpbnN0YWxsZWQuYCk7XHJcblxyXG4gICAgaWYgKCFvdXQuX19jYWNoZV9fLmxvYWRlZC5naG9zdFt1cmxdKSB0aHJvdyBuZXcgRXJyb3IoYFwiJHt1cmx9XCIgZXh0ZW5zaW9uIGlzIG5vdCBsb2FkZWQuYCk7XHJcblxyXG4gICAgbGV0IHsgZXZhbHVhdGVkIH0gPSBvdXQuX19jYWNoZV9fLmxvYWRlZC5naG9zdFt1cmxdO1xyXG5cclxuICAgIGF3YWl0IGV2YWx1YXRlZD8udW5sb2FkPy4oKTtcclxuXHJcbiAgICBkZWxldGUgb3V0Ll9fY2FjaGVfXy5sb2FkZWQuc3RvcmVbdXJsXTtcclxuICB9LFxyXG4gIGV2YWx1YXRlKHNvdXJjZSwgYXBpKSB7XHJcbiAgICBjb25zdCAkYWNvcmQgPSBhcGk7XHJcbiAgICByZXR1cm4gZXZhbChzb3VyY2UpO1xyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IG91dDsiLCAiaW1wb3J0IHsgQmFzaWNFdmVudEVtaXR0ZXIgfSBmcm9tIFwiLi4vLi4vbGliL0Jhc2ljRXZlbnRFbWl0dGVyLmpzXCI7XHJcblxyXG5jb25zdCBldmVudHMgPSBuZXcgQmFzaWNFdmVudEVtaXR0ZXIoKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGV2ZW50czsiLCAiLy8gd2UgdXNlIHRoaXMgYXJyYXkgbXVsdGlwbGUgdGltZXNcclxuZXhwb3J0IGNvbnN0IHBhdGNoVHlwZXMgPSBbXCJhXCIsIFwiYlwiLCBcImlcIl07XHJcbmV4cG9ydCBjb25zdCBwYXRjaGVkT2JqZWN0cyA9IG5ldyBNYXAoKTtcclxuIiwgIi8vIGNhbGxzIHJlbGV2YW50IHBhdGNoZXMgYW5kIHJldHVybnMgdGhlIGZpbmFsIHJlc3VsdFxyXG5pbXBvcnQgeyBwYXRjaGVkT2JqZWN0cyB9IGZyb20gXCIuL3NoYXJlZC5qc1wiO1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoZnVuY05hbWUsIGZ1bmNQYXJlbnQsIGZ1bmNBcmdzLCBcclxuLy8gdGhlIHZhbHVlIG9mIGB0aGlzYCB0byBhcHBseVxyXG5jdHh0LCBcclxuLy8gaWYgdHJ1ZSwgdGhlIGZ1bmN0aW9uIGlzIGFjdHVhbGx5IGNvbnN0cnVjdG9yXHJcbmlzQ29uc3RydWN0KSB7XHJcbiAgICBjb25zdCBwYXRjaCA9IHBhdGNoZWRPYmplY3RzLmdldChmdW5jUGFyZW50KT8uW2Z1bmNOYW1lXTtcclxuICAgIC8vIFRoaXMgaXMgaW4gdGhlIGV2ZW50IHRoYXQgdGhpcyBmdW5jdGlvbiBpcyBiZWluZyBjYWxsZWQgYWZ0ZXIgYWxsIHBhdGNoZXMgYXJlIHJlbW92ZWQuXHJcbiAgICBpZiAoIXBhdGNoKVxyXG4gICAgICAgIHJldHVybiBpc0NvbnN0cnVjdFxyXG4gICAgICAgICAgICA/IFJlZmxlY3QuY29uc3RydWN0KGZ1bmNQYXJlbnRbZnVuY05hbWVdLCBmdW5jQXJncywgY3R4dClcclxuICAgICAgICAgICAgOiBmdW5jUGFyZW50W2Z1bmNOYW1lXS5hcHBseShjdHh0LCBmdW5jQXJncyk7XHJcbiAgICAvLyBCZWZvcmUgcGF0Y2hlc1xyXG4gICAgZm9yIChjb25zdCBob29rIG9mIHBhdGNoLmIudmFsdWVzKCkpIHtcclxuICAgICAgICBjb25zdCBtYXliZWZ1bmNBcmdzID0gaG9vay5jYWxsKGN0eHQsIGZ1bmNBcmdzKTtcclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShtYXliZWZ1bmNBcmdzKSlcclxuICAgICAgICAgICAgZnVuY0FyZ3MgPSBtYXliZWZ1bmNBcmdzO1xyXG4gICAgfVxyXG4gICAgLy8gSW5zdGVhZCBwYXRjaGVzXHJcbiAgICBsZXQgaW5zdGVhZFBhdGNoZWRGdW5jID0gKC4uLmFyZ3MpID0+IGlzQ29uc3RydWN0XHJcbiAgICAgICAgPyBSZWZsZWN0LmNvbnN0cnVjdChwYXRjaC5vLCBhcmdzLCBjdHh0KVxyXG4gICAgICAgIDogcGF0Y2guby5hcHBseShjdHh0LCBhcmdzKTtcclxuICAgIGZvciAoY29uc3QgY2FsbGJhY2sgb2YgcGF0Y2guaS52YWx1ZXMoKSkge1xyXG4gICAgICAgIGNvbnN0IG9sZFBhdGNoRnVuYyA9IGluc3RlYWRQYXRjaGVkRnVuYztcclxuICAgICAgICBpbnN0ZWFkUGF0Y2hlZEZ1bmMgPSAoLi4uYXJncykgPT4gY2FsbGJhY2suY2FsbChjdHh0LCBhcmdzLCBvbGRQYXRjaEZ1bmMpO1xyXG4gICAgfVxyXG4gICAgbGV0IHdvcmtpbmdSZXRWYWwgPSBpbnN0ZWFkUGF0Y2hlZEZ1bmMoLi4uZnVuY0FyZ3MpO1xyXG4gICAgLy8gQWZ0ZXIgcGF0Y2hlc1xyXG4gICAgZm9yIChjb25zdCBob29rIG9mIHBhdGNoLmEudmFsdWVzKCkpXHJcbiAgICAgICAgd29ya2luZ1JldFZhbCA9IGhvb2suY2FsbChjdHh0LCBmdW5jQXJncywgd29ya2luZ1JldFZhbCkgPz8gd29ya2luZ1JldFZhbDtcclxuICAgIHJldHVybiB3b3JraW5nUmV0VmFsO1xyXG59XHJcbiIsICJpbXBvcnQgeyBwYXRjaGVkT2JqZWN0cywgcGF0Y2hUeXBlcyB9IGZyb20gXCIuL3NoYXJlZC5qc1wiO1xyXG5leHBvcnQgZnVuY3Rpb24gdW5QYXRjaChmdW5jUGFyZW50LCBmdW5jTmFtZSwgaG9va0lkLCB0eXBlKSB7XHJcbiAgICBjb25zdCBwYXRjaGVkT2JqZWN0ID0gcGF0Y2hlZE9iamVjdHMuZ2V0KGZ1bmNQYXJlbnQpO1xyXG4gICAgY29uc3QgcGF0Y2ggPSBwYXRjaGVkT2JqZWN0Py5bZnVuY05hbWVdO1xyXG4gICAgaWYgKCFwYXRjaD8uW3R5cGVdLmhhcyhob29rSWQpKVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIHBhdGNoW3R5cGVdLmRlbGV0ZShob29rSWQpO1xyXG4gICAgLy8gSWYgdGhlcmUgYXJlIG5vIG1vcmUgaG9va3MgZm9yIGV2ZXJ5IHR5cGUsIHJlbW92ZSB0aGUgcGF0Y2hcclxuICAgIGlmIChwYXRjaFR5cGVzLmV2ZXJ5KCh0KSA9PiBwYXRjaFt0XS5zaXplID09PSAwKSkge1xyXG4gICAgICAgIC8vIHJlZmxlY3QgZGVmaW5lcHJvcGVydHkgaXMgbGlrZSBvYmplY3QgZGVmaW5lcHJvcGVydHlcclxuICAgICAgICAvLyBidXQgaW5zdGVhZCBvZiBlcnJvcmluZyBpdCByZXR1cm5zIGlmIGl0IHdvcmtlZCBvciBub3QuXHJcbiAgICAgICAgLy8gdGhpcyBpcyBtb3JlIGVhc2lseSBtaW5pZmlhYmxlLCBoZW5jZSBpdHMgdXNlLiAtLSBzaW5rXHJcbiAgICAgICAgY29uc3Qgc3VjY2VzcyA9IFJlZmxlY3QuZGVmaW5lUHJvcGVydHkoZnVuY1BhcmVudCwgZnVuY05hbWUsIHtcclxuICAgICAgICAgICAgdmFsdWU6IHBhdGNoLm8sXHJcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKCFzdWNjZXNzKVxyXG4gICAgICAgICAgICBmdW5jUGFyZW50W2Z1bmNOYW1lXSA9IHBhdGNoLm87XHJcbiAgICAgICAgZGVsZXRlIHBhdGNoZWRPYmplY3RbZnVuY05hbWVdO1xyXG4gICAgfVxyXG4gICAgaWYgKE9iamVjdC5rZXlzKHBhdGNoZWRPYmplY3QpLmxlbmd0aCA9PSAwKVxyXG4gICAgICAgIHBhdGNoZWRPYmplY3RzLmRlbGV0ZShmdW5jUGFyZW50KTtcclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiB1blBhdGNoQWxsKCkge1xyXG4gICAgZm9yIChjb25zdCBbcGFyZW50T2JqZWN0LCBwYXRjaGVkT2JqZWN0XSBvZiBwYXRjaGVkT2JqZWN0cy5lbnRyaWVzKCkpXHJcbiAgICAgICAgZm9yIChjb25zdCBmdW5jTmFtZSBpbiBwYXRjaGVkT2JqZWN0KVxyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGhvb2tUeXBlIG9mIHBhdGNoVHlwZXMpXHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGhvb2tJZCBvZiBwYXRjaGVkT2JqZWN0W2Z1bmNOYW1lXT8uW2hvb2tUeXBlXS5rZXlzKCkgPz8gW10pXHJcbiAgICAgICAgICAgICAgICAgICAgdW5QYXRjaChwYXJlbnRPYmplY3QsIGZ1bmNOYW1lLCBob29rSWQsIGhvb2tUeXBlKTtcclxufVxyXG4iLCAiLy8gY3VycmllZCAtIGdldFBhdGNoRnVuYyhcImJlZm9yZVwiKSguLi4pXHJcbi8vIGFsbG93cyB1cyB0byBhcHBseSBhbiBhcmd1bWVudCB3aGlsZSBsZWF2aW5nIHRoZSByZXN0IG9wZW4gbXVjaCBjbGVhbmVyLlxyXG4vLyBmdW5jdGlvbmFsIHByb2dyYW1taW5nIHN0cmlrZXMgYWdhaW4hIC0tIHNpbmtcclxuaW1wb3J0IGhvb2sgZnJvbSBcIi4vaG9vay5qc1wiO1xyXG5pbXBvcnQgeyBwYXRjaGVkT2JqZWN0cyB9IGZyb20gXCIuL3NoYXJlZC5qc1wiO1xyXG5pbXBvcnQgeyB1blBhdGNoIH0gZnJvbSBcIi4vdW4tcGF0Y2guanNcIjtcclxuLy8gY3JlYXRlcyBhIGhvb2sgaWYgbmVlZGVkLCBlbHNlIGp1c3QgYWRkcyBvbmUgdG8gdGhlIHBhdGNoZXMgYXJyYXlcclxuZXhwb3J0IGRlZmF1bHQgKHBhdGNoVHlwZSkgPT4gKGZ1bmNOYW1lLCBmdW5jUGFyZW50LCBjYWxsYmFjaywgb25lVGltZSA9IGZhbHNlKSA9PiB7XHJcbiAgICBpZiAodHlwZW9mIGZ1bmNQYXJlbnRbZnVuY05hbWVdICE9PSBcImZ1bmN0aW9uXCIpXHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke2Z1bmNOYW1lfSBpcyBub3QgYSBmdW5jdGlvbiBpbiAke2Z1bmNQYXJlbnQuY29uc3RydWN0b3IubmFtZX1gKTtcclxuICAgIGlmICghcGF0Y2hlZE9iamVjdHMuaGFzKGZ1bmNQYXJlbnQpKVxyXG4gICAgICAgIHBhdGNoZWRPYmplY3RzLnNldChmdW5jUGFyZW50LCB7fSk7XHJcbiAgICBjb25zdCBwYXJlbnRJbmplY3Rpb25zID0gcGF0Y2hlZE9iamVjdHMuZ2V0KGZ1bmNQYXJlbnQpO1xyXG4gICAgaWYgKCFwYXJlbnRJbmplY3Rpb25zW2Z1bmNOYW1lXSkge1xyXG4gICAgICAgIGNvbnN0IG9yaWdGdW5jID0gZnVuY1BhcmVudFtmdW5jTmFtZV07XHJcbiAgICAgICAgLy8gbm90ZSB0byBmdXR1cmUgbWUgb3B0aW1pc2luZyBmb3Igc2l6ZTogZXh0cmFjdGluZyBuZXcgTWFwKCkgdG8gYSBmdW5jIGluY3JlYXNlcyBzaXplIC0tc2lua1xyXG4gICAgICAgIHBhcmVudEluamVjdGlvbnNbZnVuY05hbWVdID0ge1xyXG4gICAgICAgICAgICBvOiBvcmlnRnVuYyxcclxuICAgICAgICAgICAgYjogbmV3IE1hcCgpLFxyXG4gICAgICAgICAgICBpOiBuZXcgTWFwKCksXHJcbiAgICAgICAgICAgIGE6IG5ldyBNYXAoKSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IHJ1bkhvb2sgPSAoY3R4dCwgYXJncywgY29uc3RydWN0KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJldCA9IGhvb2soZnVuY05hbWUsIGZ1bmNQYXJlbnQsIGFyZ3MsIGN0eHQsIGNvbnN0cnVjdCk7XHJcbiAgICAgICAgICAgIGlmIChvbmVUaW1lKVxyXG4gICAgICAgICAgICAgICAgdW5wYXRjaFRoaXNQYXRjaCgpO1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgY29uc3QgcmVwbGFjZVByb3h5ID0gbmV3IFByb3h5KG9yaWdGdW5jLCB7XHJcbiAgICAgICAgICAgIGFwcGx5OiAoXywgY3R4dCwgYXJncykgPT4gcnVuSG9vayhjdHh0LCBhcmdzLCBmYWxzZSksXHJcbiAgICAgICAgICAgIGNvbnN0cnVjdDogKF8sIGFyZ3MpID0+IHJ1bkhvb2sob3JpZ0Z1bmMsIGFyZ3MsIHRydWUpLFxyXG4gICAgICAgICAgICBnZXQ6ICh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSA9PiBwcm9wID09IFwidG9TdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgPyBvcmlnRnVuYy50b1N0cmluZy5iaW5kKG9yaWdGdW5jKVxyXG4gICAgICAgICAgICAgICAgOiBSZWZsZWN0LmdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSxcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyB0aGlzIHdvcmtzIGFyb3VuZCBicmVha2luZyBzb21lIGFzeW5jIGZpbmQgaW1wbGVtZW50YXRpb24gd2hpY2ggbGlzdGVucyBmb3IgYXNzaWducyB2aWEgcHJveHlcclxuICAgICAgICAvLyBzZWUgY29tbWVudCBpbiB1bnBhdGNoLnRzXHJcbiAgICAgICAgY29uc3Qgc3VjY2VzcyA9IFJlZmxlY3QuZGVmaW5lUHJvcGVydHkoZnVuY1BhcmVudCwgZnVuY05hbWUsIHtcclxuICAgICAgICAgICAgdmFsdWU6IHJlcGxhY2VQcm94eSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAoIXN1Y2Nlc3MpXHJcbiAgICAgICAgICAgIGZ1bmNQYXJlbnRbZnVuY05hbWVdID0gcmVwbGFjZVByb3h5O1xyXG4gICAgICAgIGZ1bmNQYXJlbnRbZnVuY05hbWVdLl9fb3JpZ2luYWxfXyA9IHBhcmVudEluamVjdGlvbnNbZnVuY05hbWVdLm87XHJcbiAgICB9XHJcbiAgICBjb25zdCBob29rSWQgPSBTeW1ib2woKTtcclxuICAgIGNvbnN0IHVucGF0Y2hUaGlzUGF0Y2ggPSAoKSA9PiB1blBhdGNoKGZ1bmNQYXJlbnQsIGZ1bmNOYW1lLCBob29rSWQsIHBhdGNoVHlwZSk7XHJcbiAgICBwYXJlbnRJbmplY3Rpb25zW2Z1bmNOYW1lXVtwYXRjaFR5cGVdLnNldChob29rSWQsIGNhbGxiYWNrKTtcclxuICAgIHJldHVybiB1bnBhdGNoVGhpc1BhdGNoO1xyXG59O1xyXG4iLCAiaW1wb3J0IGdldFBhdGNoRnVuYyBmcm9tIFwiLi9nZXQtcGF0Y2gtZnVuYy5qc1wiO1xyXG5pbXBvcnQgeyB1blBhdGNoQWxsIH0gZnJvbSBcIi4vdW4tcGF0Y2guanNcIjtcclxuaW1wb3J0IHsgcGF0Y2hlZE9iamVjdHMgYXMgcGF0Y2hlZCB9IGZyb20gXCIuL3NoYXJlZC5qc1wiO1xyXG5jb25zdCBiZWZvcmUgPSBnZXRQYXRjaEZ1bmMoXCJiXCIpO1xyXG5jb25zdCBpbnN0ZWFkID0gZ2V0UGF0Y2hGdW5jKFwiaVwiKTtcclxuY29uc3QgYWZ0ZXIgPSBnZXRQYXRjaEZ1bmMoXCJhXCIpO1xyXG5leHBvcnQgeyBpbnN0ZWFkLCBiZWZvcmUsIGFmdGVyLCB1blBhdGNoQWxsLCBwYXRjaGVkIH07XHJcbiIsICJpbXBvcnQgKiBhcyBzcGl0Um9hc3QgZnJvbSBcIi4uLy4uL2xpYi9zcGl0cm9hc3QvZGlzdC9lc21cIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICBfX2NhY2hlX186IHtcclxuICAgIHBhdGNoZWQ6IHNwaXRSb2FzdC5wYXRjaGVkLFxyXG4gIH0sXHJcbiAgYmVmb3JlOiBzcGl0Um9hc3QuYmVmb3JlLFxyXG4gIGFmdGVyOiBzcGl0Um9hc3QuYWZ0ZXIsXHJcbiAgaW5zdGVhZDogc3BpdFJvYXN0Lmluc3RlYWQsXHJcbiAgdW5QYXRjaEFsbDogc3BpdFJvYXN0LnVuUGF0Y2hBbGwsXHJcbiAgaW5qZWN0Q1NTKGNzcykge1xyXG4gICAgY29uc3Qgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XHJcbiAgICBzdHlsZS5jbGFzc05hbWUgPSBgYWNvcmQtLWluamVjdGVkLWNzc2A7XHJcbiAgICBzdHlsZS50ZXh0Q29udGVudCA9IGNzcztcclxuICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xyXG5cclxuICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgIHN0eWxlPy5yZW1vdmUoKTtcclxuICAgIH07XHJcbiAgfSxcclxuICB1blBhdGNoQWxsQ1NTKCkge1xyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5hY29yZC0taW5qZWN0ZWQtY3NzXCIpLmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICAgIGVsZW1lbnQucmVtb3ZlKCk7XHJcbiAgICB9KVxyXG4gIH1cclxufSIsICJpbXBvcnQgbW9kdWxlcyBmcm9tICcuL21vZHVsZXMnO1xyXG5pbXBvcnQgZGV2IGZyb20gJy4vZGV2JztcclxuaW1wb3J0IHV0aWxzIGZyb20gJy4vdXRpbHMnO1xyXG5pbXBvcnQgZXh0ZW5zaW9ucyBmcm9tICcuL2V4dGVuc2lvbnMnO1xyXG5pbXBvcnQgaTE4biBmcm9tICcuL2kxOG4nO1xyXG5pbXBvcnQgc3RvcmFnZSBmcm9tICcuL3N0b3JhZ2UnO1xyXG5pbXBvcnQgZXZlbnRzIGZyb20gJy4vZXZlbnRzJztcclxuaW1wb3J0IHBhdGNoZXIgZnJvbSAnLi9wYXRjaGVyL2luZGV4LmpzJztcclxuXHJcbnV0aWxzLmxvZ2dlci5kZWJ1ZyhgUFJFTE9BRF9LRVk6IDxQUkVMT0FEX0tFWT5gKTtcclxuXHJcbmZ1bmN0aW9uIGRldkVycm9yKGFwaSkge1xyXG4gIHJldHVybiBuZXcgRXJyb3IoYFRoZSAke2FwaX0gQVBJIGNhbiBvbmx5IGJlIGFjY2Vzc2VkIHdoZW4gRGV2IG1vZGUgaXMgZW5hYmxlZCFgKTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIGV4cG9zZWRBUEk6IHtcclxuICAgIGRldixcclxuICAgIHV0aWxzLFxyXG4gICAgaTE4bixcclxuICAgIGV2ZW50cyxcclxuICAgIGdldCBwYXRjaGVyKCkge1xyXG4gICAgICBpZiAoIWRldi5lbmFibGVkKSB0aHJvdyBkZXZFcnJvcihcIlBhdGNoZXJcIik7XHJcbiAgICAgIHJldHVybiBwYXRjaGVyO1xyXG4gICAgfSxcclxuICAgIGdldCBzdG9yYWdlKCkge1xyXG4gICAgICBpZiAoIWRldi5lbmFibGVkKSB0aHJvdyBkZXZFcnJvcihcIlN0b3JhZ2VcIik7XHJcbiAgICAgIHJldHVybiBzdG9yYWdlO1xyXG4gICAgfSxcclxuICAgIGdldCBtb2R1bGVzKCkge1xyXG4gICAgICBpZiAoIWRldi5lbmFibGVkKSB0aHJvdyBkZXZFcnJvcihcIk1vZHVsZXNcIik7XHJcbiAgICAgIHJldHVybiBtb2R1bGVzO1xyXG4gICAgfSxcclxuICAgIGdldCBleHRlbnNpb25zKCkge1xyXG4gICAgICBpZiAoIWRldi5lbmFibGVkKSB0aHJvdyBkZXZFcnJvcihcIkV4dGVuc2lvbnNcIik7XHJcbiAgICAgIHJldHVybiBleHRlbnNpb25zO1xyXG4gICAgfSxcclxuICAgIGdldCBpbnRlcm5hbCgpIHtcclxuICAgICAgaWYgKCFkZXYuZW5hYmxlZCkgdGhyb3cgZGV2RXJyb3IoXCJJbnRlcm5hbFwiKTtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBwcm9jZXNzOiBnbG9iYWxUaGlzW1wiPFBSRUxPQURfS0VZPlwiXS5wcm9jZXNzLFxyXG4gICAgICAgIGlzRGV2VG9vbHNPcGVuOiBnbG9iYWxUaGlzW1wiPFBSRUxPQURfS0VZPlwiXS5pc0RldlRvb2xzT3BlbixcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0sXHJcbiAgdW5leHBvc2VkQVBJOiB7XHJcbiAgICBkZXYsXHJcbiAgICBtb2R1bGVzLFxyXG4gICAgdXRpbHMsXHJcbiAgICBleHRlbnNpb25zLFxyXG4gICAgaTE4bixcclxuICAgIHN0b3JhZ2UsXHJcbiAgICBldmVudHMsXHJcbiAgICBwYXRjaGVyLFxyXG4gICAgaW50ZXJuYWw6IHtcclxuICAgICAgcHJvY2VzczogZ2xvYmFsVGhpc1tcIjxQUkVMT0FEX0tFWT5cIl0ucHJvY2VzcyxcclxuICAgICAgaXNEZXZUb29sc09wZW46IGdsb2JhbFRoaXNbXCI8UFJFTE9BRF9LRVk+XCJdLmlzRGV2VG9vbHNPcGVuLFxyXG4gICAgfVxyXG4gIH1cclxufSIsICJpbXBvcnQgYXBpIGZyb20gXCIuL2FwaVwiO1xyXG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgXCJhY29yZFwiLCB7XHJcbiAgZ2V0KCkge1xyXG4gICAgcmV0dXJuIGFwaS5leHBvc2VkQVBJO1xyXG4gIH1cclxufSk7XHJcbndpbmRvdy5nbG9iYWwgPSB3aW5kb3c7Il0sCiAgIm1hcHBpbmdzIjogInloQkFBQSxJQUFBQSxFQUFBQyxFQUFBQyxHQUFBLGNBQ0EsT0FBTyxlQUFlQSxFQUFTLGFBQWMsQ0FBRSxNQUFPLEVBQUssQ0FBQyxFQUM1REEsRUFBUSxRQUFVLE9BQU8sT0FBTyxDQUM1QixJQUFLLE1BQ0wsSUFBSyxNQUNMLE9BQVEs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QVMsTUFBTUgsRUFBUyxZQUFZLEVBQzdDLE9BQU9TLEVBQ1QsRUFDQSxJQUFJLFVBQVcsQ0FDYixHQUFJLENBQUNOLEVBQUksUUFBUyxNQUFNSCxFQUFTLFVBQVUsRUFDM0MsTUFBTyxDQUNMLFFBQVMsV0FBVyxlQUFlLEVBQUUsUUFDckMsZUFBZ0IsV0FBVyxlQUFlLEVBQUUsY0FDOUMsQ0FDRixDQUNGLEVBQ0EsYUFBYyxDQUNaLElBQUFHLEVBQ0EsUUFBQUssRUFDQSxNQUFBVCxFQUNBLFdBQUFVLEdBQ0EsS0FBQUwsRUFDQSxRQUFBRyxFQUNBLE9BQUFGLEdBQ0EsUUFBQUMsR0FDQSxTQUFVLENBQ1IsUUFBUyxXQUFXLGVBQWUsRUFBRSxRQUNyQyxlQUFnQixXQUFXLGVBQWUsRUFBRSxjQUM5QyxDQUNGLENBQ0YsRUN6REEsT0FBTyxlQUFlLE9BQVEsUUFBUyxDQUNyQyxLQUFNLENBQ0osT0FBT0ksR0FBSSxVQUNiLENBQ0YsQ0FBQyxFQUNELE9BQU8sT0FBUyIsCiAgIm5hbWVzIjogWyJyZXF1aXJlX0V2ZW50cyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAicmVxdWlyZV9FdmVudEVtaXR0ZXIiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIl9faW1wb3J0RGVmYXVsdCIsICJtb2QiLCAiRXZlbnRzXzEiLCAiRXZlbnRFbWl0dGVyIiwgImFjYyIsICJ2YWwiLCAiZXZlbnQiLCAibGlzdGVuZXIiLCAib25jZUxpc3RlbmVyIiwgImRhdGEiLCAicmVxdWlyZV9tYWtlIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJfX2ltcG9ydERlZmF1bHQiLCAibW9kIiwgIkV2ZW50RW1pdHRlcl8xIiwgIm1ha2UiLCAiZGF0YSIsICJuZXN0QXJyYXlzIiwgImVtaXR0ZXIiLCAiY3JlYXRlUHJveHkiLCAidGFyZ2V0IiwgInJvb3QiLCAicGF0aCIsICJwcm9wZXJ0eSIsICJuZXdQYXRoIiwgInZhbHVlIiwgInJlcXVpcmVfY2pzIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJfX2ltcG9ydERlZmF1bHQiLCAibW9kIiwgIkV2ZW50c18xIiwgIm1ha2VfMSIsICJjb21tb25fZGVmYXVsdCIsICJmaW5kSW5UcmVlIiwgInRyZWUiLCAic2VhcmNoRmlsdGVyIiwgIndhbGthYmxlIiwgImlnbm9yZSIsICJsaW1pdCIsICJpdGVyYXRpb24iLCAiZG9TZWFyY2giLCAiaXRlbSIsICJmb3VuZCIsICJrZXkiLCAiYnVpbGQiLCAicHJlZml4IiwgInR5cGUiLCAiY29sb3IiLCAiaW5wdXQiLCAibG9nZ2VyX2RlZmF1bHQiLCAicmVhY3RfZGVmYXVsdCIsICJub2RlIiwgImkiLCAiaW5zdGFuY2UiLCAiZWwiLCAidHJlZSIsICJmaWx0ZXIiLCAiZmluZEluVHJlZSIsICJjb21wb25lbnRzIiwgImxhc3RJbnN0YW5jZSIsICJzdGF0ZU5vZGVzIiwgIm1heCIsICJjdXJyZW50IiwgInV0aWxzX2RlZmF1bHQiLCAibG9nZ2VyX2RlZmF1bHQiLCAicmVhY3RfZGVmYXVsdCIsICJmaW5kSW5UcmVlIiwgInZhbCIsICJhcmdzIiwgIl8iLCAiY2FwIiwgImNiIiwgImR1ciIsICJpbnRlcnZhbCIsICJ0aW1lb3V0IiwgInRleHQiLCAiY29weUFyZWEiLCAiZXJyIiwgIndyYXBGaWx0ZXIiLCAiZmlsdGVyIiwgImFyZ3MiLCAiZXJyIiwgImxvZ2dlcl9kZWZhdWx0IiwgImNoZWNrTW9kdWxlU3RyaW5ncyIsICJtIiwgInN0cmluZ3MiLCAiaGFzTm90IiwgImNoZWNrIiwgInMxIiwgInMyIiwgImoiLCAiaSIsICJjaGVja01vZHVsZVByb3BzIiwgInByb3BlcnRpZXMiLCAicHJvcCIsICJ2YWx1ZSIsICJjaGVja01vZHVsZVByb3RvdHlwZXMiLCAicHJvdG9Qcm9wcyIsICJ3ZWJwYWNrQ2h1bmtOYW1lIiwgInB1c2hMaXN0ZW5lcnMiLCAiaGFuZGxlUHVzaCIsICJjaHVuayIsICJtb2R1bGVzIiwgIm1vZHVsZUlkIiwgIm9nTW9kdWxlIiwgIm1vZHVsZSIsICJleHBvcnRzIiwgInJlcXVpcmUiLCAibGlzdGVuZXIiLCAiZXJyb3IiLCAidXRpbHNfZGVmYXVsdCIsICJvZ1B1c2giLCAibGF6eUZpbmQiLCAic2lnbmFsIiwgInNlYXJjaEV4cG9ydHMiLCAicmVzb2x2ZSIsICJyZWplY3QiLCAiY2FuY2VsIiwgImZvdW5kIiwgImtleSIsICJleHBvcnRlZCIsICJwYXRoZWQiLCAiZmluZCIsICJyZXEiLCAiY29uZmlnIiwgImRlZmF1bHRFeHBvcnQiLCAidW5sb2FkZWQiLCAiYWxsIiwgInIiLCAicmVzb2x2ZWQiLCAicmVzb2x2ZWQyIiwgInRydWVSZXNvbHZlZCIsICJmaW5kZXJGaW5kRnVuY3Rpb24iLCAiZW50cmllcyIsICJuIiwgImZ1bmNTdHJpbmciLCAicmVuZGVyRnVuY1N0cmluZyIsICJzdHJpbmciLCAiZmluZGVyVG9GaWx0ZXIiLCAiZmluZGVyTWFwIiwgIl9fb3JpZ2luYWxfXyIsICJtYXAiLCAiX19tYXBwZWRfXyIsICJ0ZW1wIiwgImZvdW5kRnVuYyIsICJmaW5kQnlGaW5kZXIiLCAiZmluZGVyIiwgImxhenlGaW5kQnlGaW5kZXIiLCAid2VicGFja19kZWZhdWx0IiwgInJlcUlkIiwgInJlcSIsICJmaWx0ZXIiLCAiY29uZmlnIiwgImZpbmQiLCAid3JhcEZpbHRlciIsICJsYXp5RmluZCIsICJmaW5kZXIiLCAibGF6eUZpbmRCeUZpbmRlciIsICJmaW5kQnlGaW5kZXIiLCAicHJvcHMiLCAibWFwT2JqZWN0IiwgInRlbXAiLCAiaW5wIiwgImtleSIsICJ3ZWJwYWNrX2RlZmF1bHQiLCAiY29tbW9uQVBJIiwgImNvbW1vbl9kZWZhdWx0IiwgInBhdGhzIiwgImkiLCAibSIsICJvYmoiLCAicGF0aCIsICJuYW1lIiwgIm1vZHVsZXNfZGVmYXVsdCIsICJjb21tb25fZGVmYXVsdCIsICJ3ZWJwYWNrX2RlZmF1bHQiLCAiZGV2TW9kZUVuYWJsZWQiLCAiZGV2X2RlZmF1bHQiLCAidmFsdWUiLCAiQmFzaWNFdmVudEVtaXR0ZXIiLCAiZXZlbnROYW1lIiwgImxpc3RlbmVyIiwgImFyZ3MiLCAiZXZlbnRNYXAiLCAib25jZSIsICJCQVNFX1VSTCIsICJub1N0b3JlIiwgIm91dCIsICJtb2R1bGVzX2RlZmF1bHQiLCAia2V5IiwgImNoZWNrIiwgIl8iLCAicHJvcCIsICJzdHIiLCAiYXJncyIsICJ1dGlsc19kZWZhdWx0IiwgImxvY2FsZSIsICJpMThuX2RlZmF1bHQiLCAibmVzdHMiLCAicHJvbWlzaWZ5UmVxdWVzdCIsICJyZXF1ZXN0IiwgInJlc29sdmUiLCAicmVqZWN0IiwgImNyZWF0ZVN0b3JlIiwgImRiTmFtZSIsICJzdG9yZU5hbWUiLCAiZGJwIiwgInR4TW9kZSIsICJjYWxsYmFjayIsICJkYiIsICJkZWZhdWx0R2V0U3RvcmVGdW5jIiwgImRlZmF1bHRHZXRTdG9yZSIsICJnZXQiLCAia2V5IiwgImN1c3RvbVN0b3JlIiwgInN0b3JlIiwgInNldCIsICJ2YWx1ZSIsICJkZUN5Y2xlciIsICJ2YWwiLCAiY29uZmlnIiwgImRlY3ljbGVXYWxrZXIiLCAiZGVDeWNsZWQiLCAiZSIsICJyZXZpdmVyRGF0ZSIsICJyZXZpdmVyUmVnRXhwIiwgInJldml2ZXJFcnJvciIsICJyZXZpdmVyRnVuY3Rpb24iLCAicmV2aXZlIiwgImZ1bmN0aW9ucyIsICJyZXZpdmVyIiwgImtleSIsICJlcnJvciIsICJwYXJlbnRzIiwgInBhdGgiLCAic3RhY2siLCAibWVzc2FnZSIsICJwb2ludCIsICJjb3B5IiwgImkiLCAiayIsICJsIiwgInN0b3JhZ2VfZGVmYXVsdCIsICJzdWZmaXgiLCAiY2FjaGVkIiwgImdldCIsICJyZXZpdmUiLCAibmVzdCIsICJzYXZlIiwgInNldCIsICJkZUN5Y2xlZCIsICJidWlsZEV4dGVuc2lvbkkxOE4iLCAiY2ZnIiwgIm91dCIsICJrZXkiLCAiYXJncyIsICJ1dGlsc19kZWZhdWx0IiwgImNoZWNrIiwgIl8iLCAicHJvcCIsICJsb2NhbGUiLCAiaTE4bl9kZWZhdWx0IiwgIkJBU0VfVVJMIiwgIm5lc3RzIiwgImJ1aWxkQVBJIiwgImNmZyIsICJwZXJzaXN0IiwgInN0b3JhZ2VfZGVmYXVsdCIsICJvdXQiLCAibmFtZSIsICJkZXZfZGVmYXVsdCIsICJtb2R1bGVzX2RlZmF1bHQiLCAiaSIsICJfIiwgInByb3AiLCAiZGF0YSIsICJwcm9tIiwgInJlc29sdmUiLCAicmVqZWN0IiwgInIiLCAidmFsdWUiLCAiaTE4bl9kZWZhdWx0IiwgImJ1aWxkRXh0ZW5zaW9uSTE4TiIsICJCYXNpY0V2ZW50RW1pdHRlciIsICJ1cmwiLCAiZGVmYXVsdENvbmZpZyIsICJtZXRhUmVzcCIsICJtZXRhZGF0YSIsICJyZWFkbWVSZXNwIiwgInJlYWRtZSIsICJzb3VyY2VSZXNwIiwgInNvdXJjZSIsICJhcGkiLCAiZXZhbHVhdGVkIiwgImV4dGVuc2lvbnNfZGVmYXVsdCIsICJldmVudHMiLCAiQmFzaWNFdmVudEVtaXR0ZXIiLCAiZXZlbnRzX2RlZmF1bHQiLCAicGF0Y2hUeXBlcyIsICJwYXRjaGVkT2JqZWN0cyIsICJob29rX2RlZmF1bHQiLCAiZnVuY05hbWUiLCAiZnVuY1BhcmVudCIsICJmdW5jQXJncyIsICJjdHh0IiwgImlzQ29uc3RydWN0IiwgInBhdGNoIiwgInBhdGNoZWRPYmplY3RzIiwgImhvb2siLCAibWF5YmVmdW5jQXJncyIsICJpbnN0ZWFkUGF0Y2hlZEZ1bmMiLCAiYXJncyIsICJjYWxsYmFjayIsICJvbGRQYXRjaEZ1bmMiLCAid29ya2luZ1JldFZhbCIsICJ1blBhdGNoIiwgImZ1bmNQYXJlbnQiLCAiZnVuY05hbWUiLCAiaG9va0lkIiwgInR5cGUiLCAicGF0Y2hlZE9iamVjdCIsICJwYXRjaGVkT2JqZWN0cyIsICJwYXRjaCIsICJwYXRjaFR5cGVzIiwgInQiLCAidW5QYXRjaEFsbCIsICJwYXJlbnRPYmplY3QiLCAiaG9va1R5cGUiLCAiZ2V0X3BhdGNoX2Z1bmNfZGVmYXVsdCIsICJwYXRjaFR5cGUiLCAiZnVuY05hbWUiLCAiZnVuY1BhcmVudCIsICJjYWxsYmFjayIsICJvbmVUaW1lIiwgInBhdGNoZWRPYmplY3RzIiwgInBhcmVudEluamVjdGlvbnMiLCAib3JpZ0Z1bmMiLCAicnVuSG9vayIsICJjdHh0IiwgImFyZ3MiLCAiY29uc3RydWN0IiwgInJldCIsICJob29rX2RlZmF1bHQiLCAidW5wYXRjaFRoaXNQYXRjaCIsICJyZXBsYWNlUHJveHkiLCAiXyIsICJ0YXJnZXQiLCAicHJvcCIsICJyZWNlaXZlciIsICJob29rSWQiLCAidW5QYXRjaCIsICJiZWZvcmUiLCAiZ2V0X3BhdGNoX2Z1bmNfZGVmYXVsdCIsICJpbnN0ZWFkIiwgImFmdGVyIiwgInBhdGNoZXJfZGVmYXVsdCIsICJwYXRjaGVkT2JqZWN0cyIsICJiZWZvcmUiLCAiYWZ0ZXIiLCAiaW5zdGVhZCIsICJ1blBhdGNoQWxsIiwgImNzcyIsICJzdHlsZSIsICJlbGVtZW50IiwgInV0aWxzX2RlZmF1bHQiLCAiZGV2RXJyb3IiLCAiYXBpIiwgImFwaV9kZWZhdWx0IiwgImRldl9kZWZhdWx0IiwgImkxOG5fZGVmYXVsdCIsICJldmVudHNfZGVmYXVsdCIsICJwYXRjaGVyX2RlZmF1bHQiLCAic3RvcmFnZV9kZWZhdWx0IiwgIm1vZHVsZXNfZGVmYXVsdCIsICJleHRlbnNpb25zX2RlZmF1bHQiLCAiYXBpX2RlZmF1bHQiXQp9Cg==
